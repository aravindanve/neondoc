{
  "openapi": "3.0.0",
  "info": {
    "version": "2.1",
    "title": "Rebilly REST API",
    "contact": {
      "name": "Rebilly API Support",
      "url": "https://www.rebilly.com/contact/",
      "email": "integrations@rebilly.com"
    },
    "license": {
      "name": "Rebilly",
      "url": "https://www.rebilly.com/api-license/"
    },
    "termsOfService": "https://www.rebilly.com/terms-of-use/",
    "x-logo": {
      "url": "https://rebilly-api.redoc.ly/rb_apiLogo.svg",
      "backgroundColor": "#0033A0"
    },
    "description": "# Introduction\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).\n\nWe have other APIs that are also available.  Every action from our [app](https://app.rebilly.com)\nis supported by an API which is documented and available for use so that you\nmay automate any workflows necessary.  This document contains the most commonly\nintegrated resources.\n\n# Authentication\nWhen you sign up for an account, you are given your first secret API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.\n- [Secret API key](#section/Authentication/SecretApiKey): used for requests made\n  from the server side. Never share these keys. Keep them guarded and secure.\n- [Publishable API key](#section/Authentication/PublishableApiKey): used for \n  requests from the client side. For now can only be used to create \n  a [Payment Token](#operation/PostToken) and \n  a [File token](#operation/PostFile).\n- [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time.\n\nNever share your secret keys. Keep them guarded and secure.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# SDKs\n\nRebilly offers a Javascript SDK and a PHP SDK to help interact with\nthe API.  However, no SDK is required to use the API.\n\nRebilly also offers [FramePay](https://rebilly.github.io/framepay-docs/),\n a client-side iFrame-based solution to help\ncreate payment tokens while minimizing PCI DSS compliance burdens\nand maximizing the customizability. [FramePay](https://rebilly.github.io/framepay-docs/)\nis interacting with the [payment tokens creation operation](#operation/PostToken).\n\n## Javascript SDK\n\nThe [Javascript SDK](https://github.com/Rebilly/rebilly-js-sdk) is maintained \nwithin Github, and contains the installation and usage instructions.\n\n## PHP SDK\nFor all PHP SDK examples provided in these docs you will need to configure the `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n\n# Using filter with Collections\nRebilly provides collections filtering. You can use `?filter` param on collection to define which records should be shown in the response.\n\nHere is filter format description:\n\n- Fields and values in filter are separated with `:`: `?filter=firstName:John`.\n\n- Fields in filter are separated with `;`: `?filter=firstName:John;lastName:Doe`.\n\n- You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`.\n\n- To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,Bob`. This filter rule will exclude all Johns and Bobs from the response.\n\n- You can use range filters like this: `?filter=amount:1..10`.\n\n- You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`.\n\n- You can create some [predefined values lists](https://user-api-docs.rebilly.com/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`\n\n# Expand to Include Embedded Objects\nRebilly provides the ability to pre-load additional \nobjects with a request. \n\nYou can use `?expand` param on most requests to expand\nand include embedded objects within the\n`_embedded` property of the response.\n\nThe `_embedded` property contains an array of \nobjects keyed by the expand parameter value(s).\n\nYou may expand multiple objects by passing them\nas comma-separated to the expand value like so:\n\n```\n?expand=recentInvoice,customer\n```\n\nAnd in the response, you would see:\n\n```\n\"_embedded\": [\n    \"recentInvoice\": {...},\n    \"customer\": {...}\n]\n```\nExpand may be utilitized not only on `GET` requests but also on `PATCH`, `POST`, `PUT` requests too.\n\n\n# Getting Started Guide\n\nRebilly's API has over 300 operations.  That's more than you'll \nneed to implement your use cases.  If you have a use \ncase you would like to implement, please consult us for\nfeedback on the best API operations for the task.\n\nOur getting started guide will demonstrate a basic order form use\ncase.  It will allow us to highlight core resources\nin Rebilly that will be helpful for many other use cases\ntoo.\n\nWithin 25 minutes, you'll have sent API requests (via our console)\nto create a subscription order.\n\n[Click here to visit our API Guide Tutorial](https://api-guides.rebilly.com/).\n"
  },
  "servers": [
    {
      "url": "https://api.rebilly.com/v2.1",
      "description": "Live Server"
    },
    {
      "url": "https://api-sandbox.rebilly.com/v2.1",
      "description": "Sandbox Server"
    }
  ],
  "tags": [
    {
      "name": "3D Secure",
      "description": "3D Secure is a way to authenticate and protect transactions.  Typically,\nit's only possible to protect the initial transaction in a subscription\nwith 3D Secure.\n"
    },
    {
      "name": "Bank Accounts",
      "description": "Bank Accounts are a type of payment instrument used to collect\nACH (echeck) payments, similar to how a payment\ncard would be used to for a credit card payment.\n"
    },
    {
      "name": "Blacklists",
      "description": "Your blacklists contains values of customerIds, email addresses,\nipAddresses, bank identification numbers, countries or payment cards that\nyou do NOT want to do business with. They are a good tool for managing\nrisk. A blacklist entry that expires after a period of time we call a\ngreylist.\n"
    },
    {
      "name": "Contacts",
      "description": "Contacts are Customer's address book.\nAll contact information used in Invoices, Subscriptions, Transactions, etc is enlisted here. Hovewer, changing a Contact won't change corresponding contact information in related resources\n"
    },
    {
      "name": "Coupons",
      "description": "Coupons allows to apply different types of discounts to Invoices, Subscriptions and Plans. Redeemed Coupons will be applied only to Invoices with the same currency.\n"
    },
    {
      "name": "Customers",
      "description": "Customers are your customers, sometimes known as accounts, clients,\nmembers, patrons, or players in other systems.\n"
    },
    {
      "name": "Customers Timeline",
      "description": "The customers timeline keeps an audit trail of changes and activity for each customer.\n"
    },
    {
      "name": "KYC Documents",
      "description": "Customer KYC files uploaded on behalf of a customer, tagged with a document type and submitted for validation.\n"
    },
    {
      "name": "Customer Authentication",
      "description": "Create authentication credentials, login, logout, and verify your customers.\n"
    },
    {
      "name": "Custom Fields",
      "description": "Create additional custom fields for particular resources.  You may name,\ndescribe, and determine the type of the schema.\n"
    },
    {
      "name": "Disputes",
      "description": "Handle disputes (chargebacks and retrievals).\n"
    },
    {
      "name": "Files",
      "description": "A File is an entity that can store a physical file and some metadata. It also provides an easy access to\nits size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored\nfiles.\nThere are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending\nfile contents as POST body), fetching from URL (by providing the file URL via 'url' param)\nAttachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,\nTransaction, Subscription, Plan, Product, Invoice, Note. That allows to quickly find and use files related to\nthose specific entities.\n"
    },
    {
      "name": "Invoices",
      "description": "Invoices leave a record for both you and your customer of the products sold.\n"
    },
    {
      "name": "Payments",
      "description": "Payments endpoints are deprecated.  Please use the transactions resource\ninstead.  A payment is a transaction with type `sale`.  The transactions\nresource is more robust and has withstood the test of time by enterprises.\n\nCollect money from your customers with payments.  You can schedule a payment\nto occur in the future.  You can assign a dunning schedule to a payment to collect\nin the case of a decline.\n\nSome payments may be, what we term, offsite payments.  These types of payments\nrequire user interaction.  For example, an initial PayPal purchase, a 3D Secure\npurchase, China Union Pay, and more require the customer's interaction to\ncomplete the payment.  We call these a \"offsite\" payment flow.\n"
    },
    {
      "name": "Payment Cards",
      "description": "Payment cards are a type of payment instrument used for credit and debit card\nsales.  Rebilly securely vaults the full payment card number, and can pass it\nonward securely to any gateway account to transact business.\n"
    },
    {
      "name": "PayPal Accounts",
      "description": "PayPal Accounts are used for paying with PayPal.  We can generate a BAID (billing\nagreement id) which will allow for recurring billing.\n"
    },
    {
      "name": "Payment Tokens",
      "description": "Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment\ntoken can be made using a different authentication scheme (refer to the public key\nauthentication scheme in the Authentication section), which allows you to\ncreate a payment token directly from the browser, bypassing the need to send\nsensitive cardholder info to your servers.  We recommend using this with our\nRebilly.js library, which helps you wire a form into this API resource and create\npayment tokens.\n"
    },
    {
      "name": "Plans",
      "description": "Plans are a template for making a subscription.  For example, you may have a plan\nthat has a 30-day free trial followed by a recurring charge of $19.95 per month\nuntil canceled.  The combination of the plan and a request to make a subscription\nwill apply those instructions to create the invoices according to the plan's\nschedule.\n"
    },
    {
      "name": "Products",
      "description": "A product describes what you sell (goods or services).\nA product determines how what you sell appears on invoices and receipts.\nThe pricing for products is set in Plans.  One product can have many\nplans.\n"
    },
    {
      "name": "Reports",
      "description": "The Rebilly Reporting API is currently experimental. You may see\nthe [Reports API Documentation here](https://reports-api-docs.rebilly.com).\n"
    },
    {
      "name": "Search",
      "description": "Search data including customers, invoices, orders, transactions and more.\n"
    },
    {
      "name": "Shipping Zones",
      "description": "A shipping zone contains regions and countries that you ship to. Each shipping zone has its own shipping rates.\n"
    },
    {
      "name": "Subscriptions",
      "description": "A subscription applies a plan's template to create invoices for a customer at the\nappropriate scheduled intervals.  A subscription may also determine if the payment\nis collected automatically (with autopay set true).\n"
    },
    {
      "name": "Taxes",
      "description": "You can map a product to a tax category.  The tax category is used by\ntax providers to calculate taxes for invoices.\n"
    },
    {
      "name": "Transactions",
      "description": "Get and refund transactions.\n"
    },
    {
      "name": "Users",
      "description": "The Rebilly User API is primarily for our GUI apps.  You may see\nthe [User API Documentation here](https://user-api-docs.rebilly.com).\nA User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.  It has resources less commonly integrated by\n3rd parties.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Customers",
      "tags": [
        "Customers",
        "Customer Authentication",
        "Custom Fields",
        "Contacts",
        "Files",
        "KYC Documents",
        "Tags",
        "Customers Timeline"
      ]
    },
    {
      "name": "Payment Instruments",
      "tags": ["Bank Accounts", "Payment Cards", "Payment Tokens", "PayPal Accounts", "Payment Instrument Validation"]
    },
    {
      "name": "Payments",
      "tags": ["3D Secure", "Payments", "Transactions", "Disputes", "Blacklists"]
    },
    {
      "name": "Invoices & Subscriptions",
      "tags": ["Coupons", "Invoices", "Plans", "Products", "Shipping Zones", "Subscriptions", "Taxes"]
    },
    {
      "name": "Misc",
      "tags": ["Reports", "Search", "Users"]
    }
  ],
  "security": [
    {
      "SecretApiKey": []
    },
    {
      "JWT": []
    }
  ],
  "paths": {
    "/3dsecure": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["3D Secure"],
        "summary": "Retrieve a list of ThreeDSecure entries",
        "operationId": "Get3DSecureCollection",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThreeDSecure"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["3D Secure"],
        "summary": "Create a ThreeDSecure entry",
        "operationId": "Post3DSecure",
        "description": "Create a ThreeDSecure entry\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreeDSecure"
              }
            }
          },
          "description": "ThreeDSecure resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ThreeDSecure entry was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreeDSecure"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/3dsecure/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["3D Secure"],
        "summary": "Retrieve a ThreeDSecure entry",
        "operationId": "Get3DSecure",
        "description": "Retrieve a ThreeDSecure entry with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ThreeDSecure entry was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreeDSecure"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Files"],
        "summary": "Retrieve a list of Attachments",
        "operationId": "GetAttachmentCollection",
        "description": "Retrieve a list of Attachments\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          },
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "-id",
                  "name",
                  "-name",
                  "relatedId",
                  "-relatedId",
                  "relatedType",
                  "-relatedType",
                  "fileId",
                  "-fileId",
                  "createdTime",
                  "-createdTime",
                  "updatedTime",
                  "-updatedTime"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Attachments was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachments = $client->attachments()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Files"],
        "summary": "Create an Attachment",
        "operationId": "PostAttachment",
        "description": "Create an Attachment\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Attachment"
        },
        "responses": {
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->create($attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/attachments/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Files"],
        "summary": "Retrieve an Attachment",
        "operationId": "GetAttachment",
        "description": "Retrieve a Attachment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Attachment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachment = $client->attachments()->load('attachmentId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Files"],
        "summary": "Update the Attachment with predefined ID",
        "operationId": "PutAttachment",
        "description": "Update the Attachment with predefined ID\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Attachment"
        },
        "responses": {
          "200": {
            "description": "Attachment was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->update('attachmentId', $attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete an Attachment",
        "operationId": "DeleteAttachment",
        "description": "Delete the Attachment with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Attachment was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->attachments()->delete('attachmentId');\n"
          }
        ]
      }
    },
    "/authentication-options": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customer Authentication"],
        "summary": "Read current authentication options",
        "operationId": "GetAuthenticationOption",
        "description": "Read current authentication options\n",
        "responses": {
          "200": {
            "description": "Current authentication options was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationOptions"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptions = $client->authenticationOptions()->load();\n"
          }
        ]
      },
      "put": {
        "tags": ["Customer Authentication"],
        "summary": "Change authentication options",
        "operationId": "PutAuthenticationOption",
        "description": "Change options\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationOptions"
              }
            }
          },
          "description": "Authentication Options resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authentication Options were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptionsForm = new Rebilly\\Entities\\AuthenticationOptions();\n// Regular expression below matches any password with 6+ length that contains alphabet symbols and/or numbers.\n$authenticationOptionsForm->setPasswordPattern('/^[a-zA-Z0-9]{6,}$/');\n\ntry {\n    $authenticationOptions = $client->authenticationOptions()->update($authenticationOptionsForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customer Authentication"],
        "summary": "Retrieve a list of auth tokens",
        "operationId": "GetAuthenticationTokenCollection",
        "description": "Retrieve a list of auth tokens\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of auth tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationToken"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationTokens = $client->authenticationTokens()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Customer Authentication"],
        "summary": "Login",
        "operationId": "PostAuthenticationToken",
        "description": "Login a customer\n",
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationToken"
              }
            }
          },
          "description": "AuthenticationToken resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Login successful",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationForm = new Rebilly\\Entities\\AuthenticationToken();\n$authenticationForm->setUsername('username');\n$authenticationForm->setPassword('test123');\n\ntry {\n    $authenticationToken = $client->authenticationTokens()->login($authenticationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customer Authentication"],
        "summary": "Verify",
        "operationId": "GetAuthenticationTokenVerification",
        "description": "Verify an authentication token\n",
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication Token was verified",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$isVerified = $client->authenticationTokens()->verify('token');\n"
          }
        ]
      },
      "delete": {
        "tags": ["Customer Authentication"],
        "summary": "Logout a customer",
        "operationId": "DeleteAuthenticationToken",
        "description": "Logout a customer\n",
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "responses": {
          "204": {
            "description": "Customer was logged out",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->authenticationTokens()->logout('token');\n"
          }
        ]
      }
    },
    "/authentication-tokens/{token}/exchange": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Customer Authentication"],
        "summary": "Exchange",
        "operationId": "PostAuthenticationTokenExchange",
        "description": "Exchange Authentication Token for JWT\n\nIt will also invalidate an Authentication Token by default (so it can only be exchanged once).\n",
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerJWT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authentication Token exchanged for JWT",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerJWT"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/bank-accounts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Create a Bank Account",
        "operationId": "PostBankAccount",
        "description": "Create a Bank Account\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountCreateToken"
                  },
                  {
                    "$ref": "#/components/schemas/BankAccountCreatePlain"
                  }
                ]
              }
            }
          },
          "description": "BankAccount resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Bank Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->bankAccounts()->create($bankAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a list of bank accounts",
        "operationId": "GetBankAccountCollection",
        "description": "Retrieve a list of Bank Accounts\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Bank Accounts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccounts = $client->bankAccounts()->search([\n    'filter' => 'customerId:testId',\n]);\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a Bank Account",
        "operationId": "GetBankAccount",
        "description": "Retrieve a Bank Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Bank Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->load('bankAccountId');\n"
          }
        ]
      },
      "patch": {
        "tags": ["Bank Accounts"],
        "summary": "Update a bank account's values",
        "operationId": "PatchBankAccount",
        "description": "Update bank account's values except for the account number and routing number\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bankName": {
                    "description": "Bank's name.",
                    "type": "string"
                  },
                  "accountType": {
                    "description": "Bank's Account type.",
                    "type": "string",
                    "enum": ["checking", "savings", "other"]
                  },
                  "address": {
                    "description": "The Address.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ContactObject"
                      }
                    ]
                  },
                  "customFields": {
                    "$ref": "#/components/schemas/ResourceCustomFields"
                  }
                }
              }
            }
          },
          "description": "Bank Account"
        },
        "responses": {
          "200": {
            "description": "Bank Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "put": {
        "tags": ["Bank Accounts"],
        "summary": "Create a Bank Account with predefined ID",
        "operationId": "PutBankAccount",
        "description": "Create or update a BankAccount with predefined identifier string\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountCreateToken"
                  },
                  {
                    "$ref": "#/components/schemas/BankAccountCreatePlain"
                  }
                ]
              }
            }
          },
          "description": "BankAccount resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "BankAccount was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "201": {
            "description": "BankAccount was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->customers()->create($bankAccountForm, 'bankAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Deactivate a Bank Account",
        "operationId": "PostBankAccountDeactivation",
        "description": "Deactivate a Bank Account\n",
        "responses": {
          "201": {
            "description": "Bank Account was deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->deactivate('bankAccountId');\n"
          }
        ]
      }
    },
    "/blacklists": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Blacklists"],
        "summary": "Retrieve a list of blacklists",
        "operationId": "GetBlacklistCollection",
        "description": "Retrieve a list of blacklists\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Blacklists was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Blacklist"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklists = $client->blacklists()->search([\n    'filter' => 'value:testValue',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Blacklists"],
        "summary": "Create a blacklist",
        "operationId": "PostBlacklist",
        "description": "Create a blacklist\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Blacklist"
        },
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blacklist"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->create($blacklistForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/blacklists/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Blacklists"],
        "summary": "Retrieve a blacklist",
        "operationId": "GetBlacklist",
        "description": "Retrieve a blacklist with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Blacklist was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blacklist"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklist = $client->blacklists()->load('blacklistId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Blacklists"],
        "summary": "Create a blacklist with predefined ID",
        "operationId": "PutBlacklist",
        "description": "Create a blacklist with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Blacklist"
        },
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blacklist"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "description": "Blacklist exist and cannot be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->create($blacklistForm, 'blacklistId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": ["Blacklists"],
        "summary": "Delete a blacklist",
        "operationId": "DeleteBlacklist",
        "description": "Delete a blacklist with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "description": "Blacklist was deleted"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->blacklists()->delete('blacklistId');\n"
          }
        ]
      }
    },
    "/contacts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Contacts"],
        "summary": "Retrieve a list of contacts",
        "operationId": "GetContactCollection",
        "deprecated": true,
        "description": "Retrieve a list of contacts.  This may be useful\nwhen giving the customer a choice between previous\naddresses they've used before.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Contacts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contacts = $client->contacts()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Contacts"],
        "summary": "Create a contact",
        "operationId": "PostContact",
        "deprecated": true,
        "description": "Contacts are created automatically by data passed to the \ncontact-related hashes within the customer, invoice,\npayment instrument (like payment card), subscriptions,\nand more.    \n<div class=\"alert alert-warning\">\n  Note: This method should almost never be used.\n  Please check with us on your use case before using it.\n</div>  \n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Contact"
        },
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n$contactForm->setEmails(\n    [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ]\n);\n$contactForm->setPhoneNumbers(\n    [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ]\n);\n\ntry {\n    $contact = $client->contacts()->create($contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/contacts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Contacts"],
        "summary": "Retrieve a contact",
        "operationId": "GetContact",
        "deprecated": true,
        "description": "Retrieve a contact with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Contact was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contact = $client->contacts()->load('contactId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Contacts"],
        "summary": "Create or update a contact with predefined ID",
        "operationId": "PutContact",
        "deprecated": true,
        "description": "Create or update a contact with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Contact"
        },
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Contact exists and cannot be updated"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n$contactForm->setEmails(\n    [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ]\n);\n$contactForm->setPhoneNumbers(\n    [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ]\n);\n\ntry {\n    $contact = $client->contacts()->update('contactId', $contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": ["Contacts"],
        "summary": "Delete a contact",
        "operationId": "DeleteContact",
        "deprecated": true,
        "description": "Delete a contact with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Contact was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "402": {
            "description": "Contact cannot be deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/coupons-redemptions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Coupons"],
        "summary": "Retrieve a list of coupon redemptions",
        "operationId": "GetCouponRedemptionCollection",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupons redemptions were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponRedemption"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemptions = $client->couponsRedemptions()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Coupons"],
        "summary": "Redeem a coupon",
        "operationId": "PostCouponRedemption",
        "description": "Redeem a coupon\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponRedemption"
              }
            }
          },
          "description": "Redeem a coupon",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Coupon was redeemed",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemption"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$redemptionForm = new Rebilly\\Entities\\Coupons\\Redemption();\n$redemptionForm->setCustomerId('customerId');\n$redemptionForm->setRedemptionCode('redemptionCode');\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$redemptionForm->setAdditionalRestrictions($restrictionForm);\n\ntry {\n    $couponRedemption = $client->couponsRedemptions()->redeem($redemptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons-redemptions/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Coupons"],
        "summary": "Retrieve a coupon redemption with specified identifier string",
        "operationId": "GetCouponRedemption",
        "responses": {
          "200": {
            "description": "Retrieve a coupon redemption with specified identifier string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemption"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemption = $client->couponsRedemptions()->load('redemptionCode');\n"
          }
        ]
      }
    },
    "/coupons-redemptions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Coupons"],
        "summary": "Cancel a coupon redemption",
        "operationId": "PostCouponRedemptionCancellation",
        "responses": {
          "201": {
            "description": "Cancel a coupon redemption"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->couponsRedemptions()->cancel('id');\n"
          }
        ]
      }
    },
    "/coupons": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Coupons"],
        "summary": "Retrieve a list of coupons",
        "operationId": "GetCouponCollection",
        "description": "Retrieve a list of coupons\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of coupons was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coupon"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupons = $client->coupons()->search([\n    'filter' => 'status:issued',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Coupons"],
        "summary": "Create a coupon",
        "operationId": "PostCoupon",
        "description": "Create a coupon\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Coupon"
        },
        "responses": {
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new \\Rebilly\\Entities\\Coupons\\Discounts\\Fixed($discountArray);\n$couponForm->setDiscount($discountForm);\n// Coupon can be used right now\n$couponForm->setIssuedTime(date('Y-m-d H:i:s'));\n\n$restrictionArray = [\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restrictions\\DiscountsPerRedemption($restrictionArray);\n\n$couponForm->setRestrictions([$restrictionForm]);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons/{redemptionCode}": {
      "parameters": [
        {
          "name": "redemptionCode",
          "in": "path",
          "description": "The Coupon's redemption code",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Coupons"],
        "summary": "Retrieve a coupon",
        "operationId": "GetCoupon",
        "description": "Retrieve a coupon with specified redemption code string\n",
        "responses": {
          "200": {
            "description": "Coupon was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupon = $client->coupons()->load('redemptionCode');\n"
          }
        ]
      },
      "put": {
        "tags": ["Coupons"],
        "summary": "Create or update a coupon with predefined redemption code",
        "operationId": "PutCoupon",
        "description": "Create or update a coupon with predefined redemption code\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Coupon"
        },
        "responses": {
          "200": {
            "description": "Coupon was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Discount::TYPE_FIXED,\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new Rebilly\\Entities\\Coupons\\Discount($discountArray);\n$couponForm->setDiscount($discountForm);\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$couponForm->setRestrictions($restrictionForm);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm, 'redemptionCode');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons/{redemptionCode}/expiration": {
      "parameters": [
        {
          "name": "redemptionCode",
          "in": "path",
          "description": "The coupon's redemption code",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Coupons"],
        "summary": "Set a coupon's expiration time.",
        "operationId": "PostCouponExpiration",
        "description": "Set a coupon's expiry time with the specified redemption code.\nThe expiredTime of a coupon must be greater than its issuedTime.\nThis cannot be performed on expired coupons.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponExpiration"
              }
            }
          },
          "description": "Coupon resource"
        },
        "responses": {
          "201": {
            "description": "Coupon expiration was successfully set",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "The coupon is already expired and has been redeemed, unable to reschedule expiration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/credentials": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customer Authentication"],
        "summary": "Retrieve a list of credentials",
        "operationId": "GetCredentialCollection",
        "description": "Retrieve a list of credentials\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Credentials was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentials = $client->customerCredentials()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Customer Authentication"],
        "summary": "Create a credential",
        "operationId": "PostCredential",
        "description": "Create a credential\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Credential"
        },
        "responses": {
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->create($customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/credentials/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customer Authentication"],
        "summary": "Retrieve a credential",
        "operationId": "GetCredential",
        "description": "Retrieve a credential with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredential = $client->customerCredentials()->load('credentialId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Customer Authentication"],
        "summary": "Create or update a credential with predefined ID",
        "operationId": "PutCredential",
        "description": "Create or update a credential with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Credential"
        },
        "responses": {
          "200": {
            "description": "Credential was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->update('credentialId', $customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": ["Customer Authentication"],
        "summary": "Delete a credential",
        "operationId": "DeleteCredential",
        "description": "Delete a credential with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "description": "Credential was deleted"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->customerCredentials()->delete('credentialId');\n"
          }
        ]
      }
    },
    "/custom-fields/{resource}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customFieldResource"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Custom Fields"],
        "summary": "Retrieve Custom Fields",
        "operationId": "GetCustomFieldCollection",
        "description": "Retrieve a schema of Custom Fields for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of Custom Fields was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "The list of custom fields",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFields = $client->customFields()->search('customers', [\n    'filter' => 'type:boolean',\n]);\n"
          }
        ]
      }
    },
    "/custom-fields/{resource}/{name}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customFieldResource"
        },
        {
          "name": "name",
          "in": "path",
          "description": "The custom field's identifier string",
          "required": true,
          "schema": {
            "type": "string",
            "maxLength": 60,
            "pattern": "^[\\w-]+$"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Custom Fields"],
        "summary": "Retrieve a Custom Field",
        "operationId": "GetCustomField",
        "description": "Retrieve a schema of the given Custom Field for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of the Custom Field was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customField = $client->customFields()->load('customers', 'testFieldName');\n"
          }
        ]
      },
      "put": {
        "tags": ["Custom Fields"],
        "summary": "Create or alter a Custom Field",
        "operationId": "PutCustomField",
        "description": "Create or alter a schema of the given Custom Field for the given resource type.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomField"
              }
            }
          },
          "description": "Custom Fields schema of the given resource type",
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Custom Field was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "201": {
            "description": "The Custom Fields was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "description": "The schema is in use: remove all the associated data in order to remove or alter the schema\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFieldForm = new Rebilly\\Entities\\CustomField();\n$customFieldForm->setType($customFieldForm::TYPE_BOOLEAN);\n\ntry {\n    $customField = $client->customFields()->update('customers', 'testFieldName', $customFieldForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers"],
        "summary": "Retrieve a list of customers",
        "operationId": "GetCustomerCollection",
        "description": "Retrieve a list of customers\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          },
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "-id",
                  "email",
                  "-email",
                  "averageValue",
                  "-averageValue",
                  "paymentCount",
                  "-paymentCount",
                  "lastPaymentTime",
                  "-lastPaymentTime",
                  "lifetimeRevenue",
                  "-lifetimeRevenue",
                  "invoiceCount",
                  "-invoiceCount",
                  "createdTime",
                  "-createdTime",
                  "updatedTime",
                  "-updatedTime"
                ]
              }
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/csv"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Customers was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create a customer (without an ID)",
        "operationId": "PostCustomer",
        "description": "Create a customer without a predefined ID.  \nThe customer's primary address\nwill be used as the default address for payment\ninstruments, subscriptions and invoices if none\nare provided.\n\nIf you wish to create the customer with a predefined\nID (which we recommend to prevent duplication), you \nmay use our `PUT` request described below.\n\nRead our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)\nto understand more.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Customer"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->create($customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers"],
        "summary": "Retrieve a customer",
        "operationId": "GetCustomer",
        "description": "Retrieve a customer with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Customer was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->load('myCustomerId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Customers"],
        "summary": "Upsert a customer with predefined ID",
        "operationId": "PutCustomer",
        "description": "Create or update (upsert) a customer with predefined identifier string.\nRead our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)\nto understand more.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Customer"
          },
          "201": {
            "$ref": "#/components/responses/Customer"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->update('myCustomerId', $customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "in": "query",
            "name": "targetCustomerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The customer idendifier to get the data of the deleted duplicate customer"
          }
        ],
        "tags": ["Customers"],
        "summary": "Merge and delete a customer",
        "operationId": "DeleteCustomer",
        "description": "Merge one duplicate customer to another target customer and delete the former.",
        "responses": {
          "204": {
            "description": "Customer has been merged and removed",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/customer-timeline-custom-events": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers Timeline"],
        "summary": "Retrieve a list of customer timeline custom event types",
        "operationId": "GetCustomerTimelineCustomEventTypeCollection",
        "description": "Retrieve a list of customer timeline custom event types\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer timeline custom event types was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create Customer Timeline custom event type",
        "operationId": "PostCustomerTimelineCustomEventType",
        "description": "Create Customer Timeline custom event type\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
              }
            }
          },
          "description": "Customer Timeline Custom Event Type resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer Timeline Custom Event Type was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/customer-timeline-custom-events/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers Timeline"],
        "summary": "Retrieve customer timeline custom event type with specified identifier string",
        "operationId": "GetCustomerTimelineCustomEventType",
        "description": "Retrieve customer timeline custom event type\n",
        "responses": {
          "200": {
            "description": "Customer Timeline custom event type was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/customer-timeline-events": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers Timeline"],
        "summary": "Retrieve a list of customer timeline messages for all customers",
        "operationId": "GetCustomerTimelineEventCollection",
        "description": "Retrieve a list of customer timeline messages for all customers\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer timeline messages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerTimeline"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/customers/{id}/lead-source": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers"],
        "summary": "Retrieve a customer's Lead Source",
        "operationId": "GetCustomerLeadSource",
        "description": "Retrieve a Lead Source of given customer\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadSource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->load('myCustomerId');\n$leadSource = $customer->getLeadSource();\n"
          }
        ]
      },
      "put": {
        "tags": ["Customers"],
        "summary": "Create a Lead Source for a customer",
        "operationId": "PutCustomerLeadSource",
        "description": "Create a Lead Source for a customer\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadSource"
              }
            }
          },
          "description": "Lead Source resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadSource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $customer = $client->customers()->updateLeadSource('myCustomerId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": ["Customers"],
        "summary": "Delete a Lead Source for a customer",
        "operationId": "DeleteCustomerLeadSource",
        "description": "Delete a Lead Source that belongs to a certain customer\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->deleteLeadSource('myCustomerId');\n"
          }
        ]
      }
    },
    "/customers/{id}/timeline": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers Timeline"],
        "summary": "Retrieve a list of customer timeline messages",
        "operationId": "GetCustomerTimelineCollection",
        "description": "Retrieve a list of customer timeline messages\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer timeline messages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerTimeline"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Customers Timeline"],
        "summary": "Create a customer Timeline comment or custom defined event",
        "operationId": "PostCustomerTimeline",
        "description": "Create a customer Timeline comment or custom defined event\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerTimeline"
              }
            }
          },
          "description": "Customer Timeline resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer Timeline comment or custom defined event was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/customers/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "messageId",
          "in": "path",
          "description": "The Customer Timeline message ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customers Timeline"],
        "summary": "Retrieve a customer Timeline message",
        "operationId": "GetCustomerTimeline",
        "description": "Retrieve a customer message with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Customer message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Customers Timeline"],
        "summary": "Delete a Customer Timeline message",
        "operationId": "DeleteCustomerTimeline",
        "description": "Delete a Customer Timeline message with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Customer Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/customers/{id}/upcoming-invoices": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Retrieve customer's upcoming invoices",
        "operationId": "GetCustomerUpcomingInvoiceCollection",
        "description": "Retrieve a list of upcoming invoices from the subscriptions which belong to the given customer.\nThe endpoint is temporary before upcoming invoices get a complete integration.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Upcoming invoices are retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/disputes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Disputes"],
        "summary": "Retrieve a list of disputes",
        "operationId": "GetDisputeCollection",
        "description": "Retrieve a list of disputes\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of disputes was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dispute"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputes = $client->disputes()->search([\n    'filter' => 'transactionId:testId',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Disputes"],
        "summary": "Create a dispute",
        "operationId": "PostDispute",
        "description": "Create a dispute\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Dispute"
        },
        "responses": {
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->create($disputeForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Disputes"],
        "summary": "Retrieve a dispute",
        "operationId": "GetDispute",
        "description": "Retrieve a dispute with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Dispute was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$dispute = $client->disputes()->load('disputeId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Disputes"],
        "summary": "Create or update a Dispute with predefined ID",
        "operationId": "PutDispute",
        "description": "Create or update a Dispute with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Dispute"
        },
        "responses": {
          "200": {
            "description": "Dispute was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->update('disputeId', $dispute);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Disputes"],
        "summary": "Get matched rules for the dispute",
        "operationId": "GetDisputeMatchedRuleCollection",
        "description": "Get matched rules for the dispute",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchedRule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/files": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Files"],
        "summary": "Retrieve a list of files",
        "operationId": "GetFileCollection",
        "description": "Retrieve a list of files\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionExpand"
          },
          {
            "$ref": "#/components/parameters/collectionFields"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "-id",
                  "name",
                  "-name",
                  "extension",
                  "-extension",
                  "size",
                  "-size",
                  "width",
                  "-width",
                  "height",
                  "-height",
                  "createdTime",
                  "-createdTime",
                  "updatedTime",
                  "-updatedTime"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Files was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$files = $client->files()->search([\n    'filter' => 'name:TestFile',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Files"],
        "summary": "Create a file",
        "operationId": "PostFile",
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "description": "Additionally, a file can be sent with:\n - multipart/form-data POST request: in this case all property names are the same as the JSON ones (`file` is an uploaded file)\n - file body request: the file body is sent as the request body, with the appropriate `Content-Type`. No additional\n properties can be set along the request data\n\nThe following file types only are allowed:\n - jpg\n - png\n - gif\n - pdf\n - mp3\n\n\nIf using a Publishable Api Key, only private files can be created. The files can later on be modified or used using\n a secret API key.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FileCreateFromInline"
                  },
                  {
                    "$ref": "#/components/schemas/FileCreateFromUrl"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "File was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setUrl('http://test.com/somefile.jpg');\n\ntry {\n    $file = $client->files()->create($fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/files/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Files"],
        "summary": "Retrieve a File Record",
        "operationId": "GetFile",
        "description": "Retrieve a File with specified identifier string\n",
        "responses": {
          "200": {
            "description": "File was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$file = $client->files()->load('fileId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Files"],
        "summary": "Update the File with predefined ID",
        "operationId": "PutFile",
        "description": "Update the File with predefined ID. Note that file can be uploaded with POST only.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          },
          "description": "File resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "File was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setDescription('This is a test file');\n\ntry {\n    $file = $client->files()->update('fileId', $fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete a File",
        "operationId": "DeleteFile",
        "description": "Delete the File with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "File was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->files()->delete('fileId');\n"
          }
        ]
      }
    },
    "/files/{id}/download": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Files"],
        "summary": "Download a file",
        "operationId": "GetFileDownload",
        "description": "Download a file\n",
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "schema": {
                  "type": "integer"
                }
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          },
          "302": {
            "$ref": "#/components/responses/Found"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/files/{id}/download{extension}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "extension",
          "in": "path",
          "description": "File extension which also indicates the desired file format",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [".png", ".jpg", ".gif"]
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Files"],
        "summary": "Download image in specific format",
        "operationId": "GetFileDownloadExtension",
        "description": "Download image in specific format. Images are converted server-side\n",
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "schema": {
                  "type": "integer"
                }
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/invoices": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Retrieve a list of invoices",
        "operationId": "GetInvoiceCollection",
        "description": "Retrieve a list of invoices\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/csv"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of invoices was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoices = $client->invoices()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Invoices"],
        "summary": "Create an invoice",
        "operationId": "PostInvoice",
        "description": "Create an invoice\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Invoice"
        },
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->create($invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Retrieve an invoice",
        "operationId": "GetInvoice",
        "description": "Retrieve an invoice with specified identifier string\n",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json", "application/pdf"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->load('invoiceId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Invoices"],
        "summary": "Create or update an invoice with predefined ID",
        "operationId": "PutInvoice",
        "description": "Create or update an invoice with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Invoice"
        },
        "responses": {
          "200": {
            "description": "Invoice was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->update('invoiceId', $invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/abandon": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Invoices"],
        "summary": "Abandon an invoice",
        "operationId": "PostInvoiceAbandonment",
        "description": "Abandon an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was abandoned successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->abandon('invoiceId');\n"
          }
        ]
      }
    },
    "/invoices/{id}/issue": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Invoices"],
        "summary": "Issue an invoice",
        "operationId": "PostInvoiceIssuance",
        "description": "Issue an invoice with specified identifier string. It must be in `draft` status.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceIssue"
              }
            }
          },
          "description": "InvoiceIssue resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Invoice was issued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->issue('invoiceId', '2025-01-01 05:00:00');\n"
          }
        ]
      }
    },
    "/invoices/{id}/items": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Retrieve invoice items",
        "operationId": "GetInvoiceItemCollection",
        "description": "Retrieve an invoice items with specified invoice identifier string\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice items were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceItem"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItems = $client->invoiceItems()->search('invoiceId', [\n    'filter' => 'quantity:5',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Invoices"],
        "summary": "Create an invoice item",
        "operationId": "PostInvoiceItem",
        "description": "Create an invoice item\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceItem"
              }
            }
          },
          "description": "InvoiceItem resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "InvoiceItem was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItemForm = new Rebilly\\Entities\\InvoiceItem();\n$invoiceItemForm->setType($invoiceItemForm::TYPE_DEBIT);\n$invoiceItemForm->setUnitPrice(0.99);\n$invoiceItemForm->setQuantity(5);\n\ntry {\n    $invoiceItem = $client->invoiceItems()->create($invoiceItemForm, 'invoiceId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Get matched rules for the invoice",
        "operationId": "GetInvoiceMatchedRuleCollection",
        "description": "Get matched rules for the invoice",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchedRule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}/recalculate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Invoices"],
        "summary": "Recalculate an invoice",
        "operationId": "PostInvoiceRecalculation",
        "description": "Recalculate an invoice with specified identifier string.\nIt will recalculate shipping rates, taxes, discounts. It is useful when coupon was revoked or customer redeemed coupon after invoice was issued and you want to apply it to this invoice.\n",
        "responses": {
          "201": {
            "description": "Invoice was recalculated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/invoices/{id}/reissue": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Invoices"],
        "summary": "Reissue an invoice",
        "operationId": "PostInvoiceReissuance",
        "description": "Reissue an invoice with specified identifier string. It must be issued (status must be `unpaid` or `past-due`).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceReissue"
              }
            }
          },
          "description": "InvoiceReissue resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Invoice was reissued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/invoices/{id}/timeline": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Retrieve a list of invoice timeline messages",
        "operationId": "GetInvoiceTimelineCollection",
        "description": "Retrieve a list of invoice timeline messages\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of invoice timeline messages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceTimeline"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Invoices"],
        "summary": "Create an invoice Timeline comment",
        "operationId": "PostInvoiceTimeline",
        "description": "Create an invoice Timeline comment\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceTimeline"
              }
            }
          },
          "description": "Invoice Timeline resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Invoice Timeline comment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/invoices/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "messageId",
          "in": "path",
          "description": "The Invoice Timeline message ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Retrieve an Invoice Timeline message",
        "operationId": "GetInvoiceTimeline",
        "description": "Retrieve a invoice message with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Invoice message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Invoices"],
        "summary": "Delete an Invoice Timeline message",
        "operationId": "DeleteInvoiceTimeline",
        "description": "Delete an Invoice Timeline message with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Invoice Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/invoices/{id}/transaction-allocations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Get transaction amounts allocated to an invoice",
        "operationId": "GetInvoiceTransactionAllocationCollection",
        "description": "Get the precise amounts from a transaction allocated as invoice payments",
        "responses": {
          "200": {
            "description": "List of allocations was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceTransactionAllocation"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}/void": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Invoices"],
        "summary": "Void an invoice",
        "operationId": "PostInvoiceVoid",
        "description": "Void an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was voided successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->void('invoiceId');\n"
          }
        ]
      }
    },
    "/kyc-documents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["KYC Documents"],
        "summary": "Retrieve a list of KYC documents",
        "operationId": "GetKycDocumentCollection",
        "description": "Retrieve a list of KYC documents\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "-id", "createdTime", "-createdTime", "updatedTime", "-updatedTime"]
              }
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of KYC documents was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["KYC Documents"],
        "summary": "Create a KYC Document",
        "operationId": "PostKycDocument",
        "description": "Create a KYC Document\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KycDocument"
              }
            }
          },
          "description": "Kyc document resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Kyc document was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/kyc-documents/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["KYC Documents"],
        "summary": "Retrieve a KYC Document",
        "operationId": "GetKycDocument",
        "description": "Retrieve a KYC document with specified identifier string.",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KYC document was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": ["KYC Documents"],
        "summary": "Create or update a KYC document with predefined ID",
        "operationId": "PutKycDocument",
        "description": "Create or update a KYC document with predefined identifier string.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KycDocument"
              }
            }
          },
          "description": "KYC document resource.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "KYC document was updated.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            }
          },
          "201": {
            "description": "KYC document was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/kyc-documents/{id}/acceptance": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["KYC Documents"],
        "summary": "Accept a KYC document",
        "operationId": "PostKycDocumentAcceptance",
        "description": "Marks that status of the document as `accepted`. Updates the review time and reviewer information. Intended to be used for manual overrides.\n",
        "responses": {
          "201": {
            "description": "KYC document acceptance was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/kyc-documents/{id}/rejection": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["KYC Documents"],
        "summary": "Reject a KYC document",
        "operationId": "PostKycDocumentRejection",
        "description": "Marks that status of the document as `rejected`. Updates the review time and reviewer information. Intended to be used for manual overrides.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KycDocumentRejection"
              }
            }
          },
          "description": "KYC document resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "KYC document rejection was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/kyc-documents/{id}/review": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["KYC Documents"],
        "summary": "Review a KYC document",
        "operationId": "PostKycDocumentReview",
        "description": "Mark the KYC document as reviewed. Updates the review time and reviewer information.",
        "responses": {
          "201": {
            "description": "KYC document was reviewed.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/password-tokens": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customer Authentication"],
        "summary": "Retrieve a list of tokens",
        "operationId": "GetPasswordTokenCollection",
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Reset Password Tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResetPasswordToken"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Customer Authentication"],
        "summary": "Create a Reset Password Token",
        "operationId": "PostPasswordToken",
        "description": "Create a Reset Password Token\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordToken"
              }
            }
          },
          "description": "ResetPasswordToken resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reset Password Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/password-tokens/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Customer Authentication"],
        "summary": "Retrieve a Reset Password Token",
        "operationId": "GetPasswordToken",
        "description": "Retrieve a Reset Password Token with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ResetPasswordToken was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Customer Authentication"],
        "summary": "Delete a Reset Password Token",
        "operationId": "DeletePasswordToken",
        "description": "Delete a Reset Password Token with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ResetPasswordToken was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/payment-cards": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Payment Cards"],
        "summary": "Retrieve a list of Payment Cards",
        "operationId": "GetPaymentCardCollection",
        "description": "Retrieve a list of Payments Cards\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Payment Card was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCards = $client->paymentCards()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Payment Cards"],
        "summary": "Create a Payment Card",
        "operationId": "PostPaymentCard",
        "description": "Create a Payment Card\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentCardCreateToken"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentCardCreatePlain"
                  }
                ]
              }
            }
          },
          "description": "PaymentCard resource",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Card was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "201": {
            "description": "Payment Card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Payment Cards"],
        "summary": "Retrieve a Payment Card",
        "operationId": "GetPaymentCard",
        "description": "Retrieve a Payment Card with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Payment card was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCard = $client->paymentCards()->load('paymentCardId');\n"
          }
        ]
      },
      "patch": {
        "tags": ["Payment Cards"],
        "summary": "Update a payment card's values",
        "operationId": "PatchPaymentCard",
        "description": "Update any of the payment card's values except for the pan\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cvv": {
                    "description": "Card's cvv (card verification value).",
                    "type": "string"
                  },
                  "expMonth": {
                    "description": "Card's expiry month",
                    "type": "integer"
                  },
                  "expYear": {
                    "description": "Card's expiry year",
                    "type": "integer"
                  },
                  "billingAddress": {
                    "description": "Card's billing address",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ContactObject"
                      }
                    ]
                  },
                  "stickyGatewayAccountId": {
                    "description": "Sticky Gateway Account ID",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "customFields": {
                    "$ref": "#/components/schemas/ResourceCustomFields"
                  }
                }
              }
            }
          },
          "description": "Payment card"
        },
        "responses": {
          "200": {
            "description": "Payment card was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "put": {
        "tags": ["Payment Cards"],
        "summary": "Create a payment card with predefined ID",
        "operationId": "PutPaymentCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentCardCreateToken"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentCardCreatePlain"
                  }
                ]
              }
            }
          },
          "description": "Payment card"
        },
        "responses": {
          "200": {
            "description": "Payment card was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "201": {
            "description": "Payment card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "description": "Payment card already exists and cannot be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm, 'paymentCardId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/authorization": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Payment Cards"],
        "summary": "Authorize a Payment Card",
        "operationId": "PostPaymentCardAuthorization",
        "description": "Authorize a Payment Card\n\nInstead of using this endpoint a Payment Card will\nbe authorized on first usage (new transaction or order).\n",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["websiteId", "currency"],
                "properties": {
                  "websiteId": {
                    "description": "The Website ID",
                    "type": "string"
                  },
                  "currency": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CurrencyCode"
                      }
                    ]
                  },
                  "gatewayAccountId": {
                    "description": "The Gateway account ID",
                    "type": "string"
                  },
                  "amount": {
                    "description": "Amount",
                    "type": "number",
                    "format": "double"
                  },
                  "redirectUrl": {
                    "description": "Redirect URL",
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "Payment Card resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment Card was authorized",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardAuthorizationForm = new Rebilly\\Entities\\PaymentCardAuthorization();\n$paymentCardAuthorizationForm->setWebsiteId('websiteId');\n$paymentCardAuthorizationForm->setCurrency('USD');\n$paymentCardAuthorizationForm->setGatewayAccountId('gatewayAccountId');\n\ntry {\n    $paymentCard = $client->paymentCards()->authorize('paymentCardId', $paymentCardAuthorizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Payment Cards"],
        "summary": "Deactivate a Payment Card",
        "operationId": "PostPaymentCardDeactivation",
        "description": "Deactivate a Payment Card\n",
        "responses": {
          "201": {
            "description": "Payment Card was deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->paymentCards()->deactivate('paymentCardId');\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Payment Cards"],
        "summary": "Get matched rules for the payment card",
        "operationId": "GetPaymentCardMatchedRuleCollection",
        "description": "Get matched rules for the payment card",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchedRule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/payment-instrument-validation": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Payment Instrument Validation"],
        "summary": "Retrieve a Payment Instrument validation",
        "operationId": "GetPaymentInstrumentValidationCollection",
        "description": "Retrieve a Payment Instrument validation with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Successfully retrieved a payment instrument validation",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInstrumentValidation"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Payment Instrument Validation"],
        "summary": "Validate a payment instrument",
        "operationId": "PostPaymentInstrumentValidation",
        "description": "Validate a payment instrument\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["method", "paymentInstrumentId"],
                "properties": {
                  "method": {
                    "description": "Payment method",
                    "type": "string"
                  },
                  "paymentInstrumentId": {
                    "description": "Payment instrument ID",
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "Payment instrument"
        },
        "responses": {
          "201": {
            "description": "Validation successful",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentValidation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/payment-instrument-validation/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Payment Instrument Validation"],
        "summary": "Retrieve a list of validated payment instruments",
        "operationId": "GetPaymentInstrumentValidation",
        "description": "Retrieve a list of validated payment instruments\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of validated payment instrument was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentValidation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Payments"],
        "summary": "Retrieve a payment list",
        "operationId": "GetPaymentCollection",
        "deprecated": true,
        "description": "Retrieve a payment list\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/csv"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payments = $client->payments()->search([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      },
      "post": {
        "deprecated": true,
        "tags": ["Payments"],
        "summary": "Create a payment",
        "operationId": "PostPayment",
        "description": "Create a payment (deprecated).  Use create a transaction instead.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Payment"
        },
        "responses": {
          "201": {
            "description": "Payment was processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Payment was accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->create($paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payments/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "deprecated": true,
        "tags": ["Payments"],
        "summary": "Retrieve a payment",
        "operationId": "GetPayment",
        "description": "Retrieve a payment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Payment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->load('paymentId');\n"
          }
        ]
      },
      "put": {
        "deprecated": true,
        "tags": ["Payments"],
        "summary": "Create a payment with predefined ID",
        "operationId": "PutPayment",
        "description": "Make a payment with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Payment"
        },
        "responses": {
          "201": {
            "description": "Payment was processed",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Payment was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->update('paymentId', $paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["PayPal Accounts"],
        "summary": "Retrieve a list of PayPal accounts",
        "operationId": "GetPayPalAccountCollection",
        "description": "Retrieve a list of PayPal Accounts\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of PayPal Accounts was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayPalAccount"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalAccounts = $client->payPalAccounts()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["PayPal Accounts"],
        "summary": "Create a PayPal Account",
        "operationId": "PostPayPalAccount",
        "description": "Create a PayPal Account\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayPalAccount"
              }
            }
          },
          "description": "PayPalAccount resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "PayPal Account was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["PayPal Accounts"],
        "summary": "Retrieve a PayPal Account",
        "operationId": "GetPayPalAccount",
        "description": "Retrieve a PayPal Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "PayPal Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalAccount = $client->payPalAccounts()->load('payPalAccountId');\n"
          }
        ]
      },
      "put": {
        "tags": ["PayPal Accounts"],
        "summary": "Create a PayPal account with predefined ID",
        "operationId": "PutPayPalAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayPalAccount"
              }
            }
          },
          "description": "PayPal Account",
          "required": true
        },
        "responses": {
          "201": {
            "description": "PayPal Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "description": "PayPal Account exist and cannot be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm, 'payPalAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}/activation": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["PayPal Accounts"],
        "summary": "Activate a PayPal Account",
        "operationId": "PostPayPalAccountActivation",
        "description": "Activate a PayPal Account\n\nInstead of using this endpoint a PayPal Account will\nbe authorized on first usage (new transaction or order).\n",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayPalAccountAuthorization"
              }
            }
          },
          "description": "PayPal Account resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "PayPal Account was activated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$activationData = [\n    'websiteId' => 'testWebsiteId',\n    'currency' => 'USD',\n];\n\ntry {\n    $client->payPalAccounts()->activate($activationData, 'payPalAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["PayPal Accounts"],
        "summary": "Deactivate a PayPal Account",
        "operationId": "PostPayPalAccountDeactivation",
        "description": "Deactivate a PayPal Account\n",
        "responses": {
          "201": {
            "description": "PayPal Account was deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->payPalAccounts()->deactivate('payPalAccountId');\n"
          }
        ]
      }
    },
    "/plans": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Plans"],
        "summary": "Retrieve a list of plans",
        "operationId": "GetPlanCollection",
        "description": "Retrieve a list of plans\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Plans was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plan"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plans = $client->plans()->search([\n    'filter' => 'name:TestPlan',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Plans"],
        "summary": "Create a plan",
        "operationId": "PostPlan",
        "description": "Create a plan\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Plan"
        },
        "responses": {
          "201": {
            "description": "Plan was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n$planForm->setProductId('test-product');\n\ntry {\n    $plan = $client->plans()->create($planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/plans/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Plans"],
        "summary": "Retrieve a plan",
        "operationId": "GetPlan",
        "description": "Retrieve a plan with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Plan was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plan = $client->plans()->load('planId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Plans"],
        "summary": "Create or update a Plan with predefined ID",
        "operationId": "PutPlan",
        "description": "Create or update a Plan with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Plan"
        },
        "responses": {
          "200": {
            "description": "Plan was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "201": {
            "description": "Plan was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n\ntry {\n    $plan = $client->plans()->update('planId', $planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": ["Plans"],
        "summary": "Delete a Plan",
        "operationId": "DeletePlan",
        "description": "Delete a Plan with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Plan was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->plans()->delete('planId');\n"
          }
        ]
      }
    },
    "/products": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Products"],
        "summary": "Retrieve a list of products",
        "operationId": "GetProductCollection",
        "description": "Retrieve a list of products\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "Create a Product",
        "operationId": "PostProduct",
        "description": "Create a Product\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Product"
        },
        "responses": {
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/products/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Products"],
        "summary": "Retrieve a product",
        "operationId": "GetProduct",
        "description": "Retrieve a product with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Product was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": ["Products"],
        "summary": "Create a product with predefined ID",
        "operationId": "PutProduct",
        "description": "Create a product with predefined identifier string\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Product"
        },
        "responses": {
          "200": {
            "description": "Product was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete a product",
        "operationId": "DeleteProduct",
        "description": "Delete a product with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Product was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/search": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Search"],
        "summary": "Search merchant data",
        "operationId": "GetSearch",
        "description": "Search merchant's data to return resources such as customers, invoices, orders, transactions\n",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The default or \"global\" search. It will search all searchable resources across as many fields as possible.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nUse one or more of the listed filter fields. i.e. `is:customer email:bob@test.com`.\nThe `date` value can be surrounded with quotes. Examples:\n`>2019-01-01`, `last month`, `yesterday`, `<=2019-04-30`.\n",
            "schema": {
              "type": "string",
              "enum": [
                "is",
                "amount",
                "bin",
                "coupon",
                "currency",
                "date",
                "email",
                "last4",
                "name",
                "paypalUsername",
                "plan",
                "product",
                "tag"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results keyed by resource",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Search"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      }
    },
    "/shipping-zones": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Shipping Zones"],
        "summary": "Retrieve a list of shipping zones",
        "operationId": "GetShippingZoneCollection",
        "description": "Retrieve a list of shipping zones\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of shipping zones was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShippingZone"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Shipping Zones"],
        "summary": "Create a Shipping Zone",
        "operationId": "PostShippingZone",
        "description": "Create a Shipping Zone\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingZone"
              }
            }
          },
          "description": "Shipping Zone resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Shipping Zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingZone"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/shipping-zones/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Shipping Zones"],
        "summary": "Retrieve a shipping zone",
        "operationId": "GetShippingZone",
        "description": "Retrieve a shipping zone with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Shipping zone was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingZone"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": ["Shipping Zones"],
        "summary": "Create a shipping zone with predefined ID",
        "operationId": "PutShippingZone",
        "description": "Create a shipping zone with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Shipping zone was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingZone"
                }
              }
            }
          },
          "201": {
            "description": "Shipping zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingZone"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingZone"
              }
            }
          },
          "description": "Shipping zone resource",
          "required": true
        }
      },
      "delete": {
        "tags": ["Shipping Zones"],
        "summary": "Delete a shipping zone",
        "operationId": "DeleteShippingZone",
        "description": "Delete a shipping zone with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Shipping zone was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/subscription-cancellations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve a list of cancellations",
        "operationId": "GetSubscriptionCancellationCollection",
        "description": "Retrieve a list of cancellations for all subscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cancellations was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionCancellation"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Cancel a subscription",
        "operationId": "PostSubscriptionCancellation",
        "description": "Cancel a subscription or preview the cancellation parameters before that",
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscriptionCancellation"
        },
        "responses": {
          "201": {
            "description": "Cancellation was created, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionCancellation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionCancelForm = new Rebilly\\Entities\\SubscriptionCancel();\n$subscriptionCancelForm->setEffectiveTime(new DateTime());\n\ntry {\n    $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscription-cancellations/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve a subscription сancellation",
        "operationId": "GetSubscriptionCancellation",
        "description": "Retrieve a subscription сancellation with specified identifier string",
        "responses": {
          "200": {
            "description": "Cancellation was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionCancellation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": ["Subscriptions"],
        "summary": "Cancel a subscription",
        "operationId": "PutSubscriptionCancellation",
        "description": "Cancel a subscription",
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscriptionCancellation"
        },
        "responses": {
          "200": {
            "description": "Cancellation was updated, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionCancellation"
                }
              }
            }
          },
          "201": {
            "description": "Cancellation was created, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionCancellation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": ["Subscriptions"],
        "summary": "Delete a cancellation",
        "operationId": "DeleteSubscriptionCancellation",
        "description": "Delete a subscription's cancellation. Only draft can be deleted.",
        "responses": {
          "204": {
            "description": "Cancellaton was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/subscription-reactivations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve a list of reactivations",
        "operationId": "GetSubscriptionReactivationCollection",
        "description": "Retrieve a list of reactivations for all subscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of reactivations was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionReactivation"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Reactivate a subscription",
        "operationId": "PostSubscriptionReactivation",
        "description": "Reactivate a subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionReactivation"
              }
            }
          },
          "description": "Reactivation resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reactivation was created, subscription is active and won't be deactivated.\nIf there was a cancellation with status \"confirmed\", it is revoked.\n",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionReactivation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/subscription-reactivations/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve a subscription reactivation",
        "operationId": "GetSubscriptionReactivation",
        "description": "Retrieve a subscription reactivation with specified identifier string",
        "responses": {
          "200": {
            "description": "Reactivation was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionReactivation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/subscriptions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve a list of subscriptions",
        "operationId": "GetSubscriptionCollection",
        "description": "Retrieve a list of subscriptions\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionExpand"
          },
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/csv"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of subscriptions was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptions = $client->subscriptions()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Create a subscription",
        "operationId": "PostSubscription",
        "description": "Create a subscription. Consider using the upsert\noperation to accomplish this task.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionExpand"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Subscription"
        },
        "responses": {
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setItems([\n    [\n        'planId' => 'my-plan',\n        'quantity' => 1,\n    ],\n]);\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->create($subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve a subscription",
        "operationId": "GetSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionExpand"
          }
        ],
        "description": "Retrieve a subscription with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Subscription was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->load('subscriptionId');\n"
          }
        ]
      },
      "put": {
        "tags": ["Subscriptions"],
        "summary": "Upsert a subscription with predefined ID",
        "operationId": "PutSubscription",
        "description": "Create or update a subscription with predefined identifier string\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionExpand"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Subscription"
        },
        "responses": {
          "200": {
            "description": "Subscription was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setItems($subscriptionForm->createItems([\n    'planId' => 'my-plan',\n    'quantity' => 1,\n]));\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->update('subscriptionId', $subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/change-plan": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Change a subscription's plan",
        "operationId": "PostSubscriptionPlanChange",
        "description": "Change a subscription's plan and designate when and if there should be pro rata credits given.\nOnly active subscriptions with a single plan can be changed.\nEdit pending unpaid subscriptions directly regardless the number of plans.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChange"
              }
            }
          },
          "description": "Change the plan",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscription was changed",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionChangePlanForm = new Rebilly\\Entities\\SubscriptionChangePlan();\n$subscriptionChangePlanForm->setPlanId('newPlanId');\n$subscriptionChangePlanForm->setRenewalPolicy('retain');\n$subscriptionChangePlanForm->setPreview(true);\n$subscriptionChangePlanForm->setProrated(true);\n$subscriptionChangePlanForm->setEffectiveTime('2018-02-02 00:00:00');\n\ntry {\n    $subscription = $client->subscriptions()->changePlan('subscriptionId', $subscriptionChangePlanForm);\n    echo $subscription->getLineItemSubtotal();\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/interim-invoice": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Issue an interim invoice for a subscription",
        "operationId": "PostSubscriptionInterimInvoice",
        "description": "Issue an interim invoice for a subscription, typically used in conjunction with plan changes and pro rata adjustments.\nThis process creates an invoice, adds the subscription's line items to the invoice, and issues the invoice, and applies\npayment to it if a transaction id is supplied.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInvoice"
              }
            }
          },
          "description": "Issue an interim invoice",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/subscriptions/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get matched rules for the subscription",
        "operationId": "GetSubscriptionMatchedRuleCollection",
        "description": "Get matched rules for the subscription",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchedRule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/subscriptions/{id}/timeline": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve a list of order timeline messages",
        "operationId": "GetSubscriptionTimelineCollection",
        "description": "Retrieve a list of order timeline messages\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of order timeline messages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderTimeline"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Create an order Timeline comment",
        "operationId": "PostSubscriptionTimeline",
        "description": "Create an order Timeline comment\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTimeline"
              }
            }
          },
          "description": "Order Timeline resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Order Timeline comment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/subscriptions/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "messageId",
          "in": "path",
          "description": "The Order Timeline message ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Retrieve an Order Timeline message",
        "operationId": "GetSubscriptionTimeline",
        "description": "Retrieve a order message with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Order message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Subscriptions"],
        "summary": "Delete an Order Timeline message",
        "operationId": "DeleteSubscriptionTimeline",
        "description": "Delete an Order Timeline message with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Order Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/subscriptions/{id}/upcoming-invoices": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Invoices"],
        "summary": "Retrieve subscription's upcoming invoice",
        "operationId": "GetSubscriptionUpcomingInvoiceCollection",
        "description": "Retrieve an upcoming invoice from the specified subscription.\nThe endpoint is temporary before upcoming invoices get a complete integration.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Upcoming invoices are retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/subscriptions/{id}/upcoming-invoices/{invoiceId}/issue": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "invoiceId",
          "in": "path",
          "description": "The Upcoming Invoice ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Issue an upcoming invoice for early pay",
        "operationId": "PostUpcomingInvoiceIssuance",
        "description": "Issue an upcoming invoice with specified identifier string for early pay.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceIssue"
              }
            }
          },
          "description": "InvoiceIssue resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Upcoming Invoice was issued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/tags": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Tags"],
        "summary": "Retrieve a list of tags",
        "operationId": "GetTagCollection",
        "description": "Retrieve a list of tags\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "-id", "name", "-name", "createdTime", "-createdTime", "updatedTime", "-updatedTime"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tags was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Tags"],
        "summary": "Create a tag",
        "operationId": "PostTag",
        "description": "Create a tag\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "201": {
            "description": "Tag was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/tags/{tag}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/tag"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Tags"],
        "summary": "Retrieve a tag",
        "operationId": "GetTag",
        "description": "Retrieve a tag\n",
        "responses": {
          "200": {
            "description": "Tag with specified name was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": ["Tags"],
        "summary": "Update a tag",
        "operationId": "PatchTag",
        "description": "Update a tag\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "200": {
            "description": "Tag was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": ["Tags"],
        "summary": "Delete a tag",
        "operationId": "DeleteTag",
        "description": "Delete a tag.\nIt's an asynchronous operation.\n",
        "responses": {
          "204": {
            "description": "Tag was deleted"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/tags/{tag}/customers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/tag"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Tags"],
        "summary": "Tag a list of customers",
        "operationId": "PostTagCustomerCollection",
        "description": "Tag a list of customers.\nIf the customer from the list is already tagged it will be ignored.\nIt's an asynchronous operation.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customerIds"],
                "properties": {
                  "customerIds": {
                    "description": "The list of customer IDs",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customers was tagged"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": ["Tags"],
        "summary": "Untag a list of customers",
        "operationId": "DeleteTagCustomerCollection",
        "description": "Untag a list of customers.\nIf the customer from the list is already untagged it will be ignored.\nIt's an asynchronous operation.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customerIds"],
                "properties": {
                  "customerIds": {
                    "description": "The list of customer IDs",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customers was untagged"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/tags/{tag}/customers/{customerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/tag"
        },
        {
          "$ref": "#/components/parameters/customerId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Tags"],
        "summary": "Tag a customer",
        "operationId": "PostTagCustomer",
        "description": "Tag a customer\n",
        "responses": {
          "204": {
            "description": "Customer was tagged"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Tags"],
        "summary": "Untag a customer",
        "operationId": "DeleteTagCustomer",
        "description": "Untag a customer\n",
        "responses": {
          "204": {
            "description": "Customer was untagged"
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/tokens": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Payment Tokens"],
        "summary": "Create a payment token",
        "operationId": "PostToken",
        "description": "[FramePay](https://rebilly.github.io/framepay-docs/)\nis the recommended way to \ncreate a payment token because it minimizes\nPCI DSS compliance.  Once a payment token \nis created, it can only be used once.\n\nA payment token expires upon first use\nor within 30 minutes of the token creation\n(whichever comes first).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentCardToken"
                  },
                  {
                    "$ref": "#/components/schemas/BankAccountToken"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentToken"
                  }
                ]
              }
            }
          },
          "description": "PaymentToken resource",
          "required": true
        },
        "security": [
          {
            "PublishableApiKey": []
          },
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          }
        ],
        "responses": {
          "201": {
            "description": "Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaymentCardToken"
                    },
                    {
                      "$ref": "#/components/schemas/BankAccountToken"
                    },
                    {
                      "$ref": "#/components/schemas/PaymentToken"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokenForm = new Rebilly\\Entities\\PaymentCardToken();\n$paymentCardTokenForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\n$paymentInstrumentForm = new Entities\\PaymentInstruments\\PaymentCardPaymentInstrument();\n$paymentInstrumentForm->setPan('4111111111111111');\n$paymentInstrumentForm->setExpYear(2025);\n$paymentInstrumentForm->setExpMonth(8);\n$paymentInstrumentForm->setCvv(123);\n\n$paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "get": {
        "tags": ["Payment Tokens"],
        "summary": "Retrieve a list of tokens",
        "operationId": "GetTokenCollection",
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentToken"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokens = $client->paymentCardTokens()->search([\n    'filter' => 'token:string',\n]);\n"
          }
        ]
      }
    },
    "/tokens/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Payment Tokens"],
        "summary": "Retrieve a token",
        "operationId": "GetToken",
        "description": "Retrieve a token with specified identifier string\n",
        "security": [
          {
            "PublishableApiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardToken = $client->paymentCardTokens()->load('tokenId');\n"
          }
        ]
      }
    },
    "/transactions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a transaction",
        "operationId": "PostTransaction",
        "description": "Create a transactions of type `sale`, `authorize`, or `credit`.\nThis endpoint supports two main styles of transactions:\n  1. A real-time decision and response.\n  2. User approval/interaction is required.\n\nA real-time decision is very familiar.  You send a request, and\ninspect the `result` of the response for `approved` or `declined`.\n\nHowever, many transactions, especially those for alternative\nmethods, require the user to interact with a 3rd party.  You\nmay be able to envision PayPal, for example, the user must\ngive permission to complete the payment (or accept the \nbilling agreement).  \n\nEven payment cards may require user approval in the case of\n3D secure authentication.  In the event that approval is \nrequired, you will receive a response back and notice\nthat the `result` is `unknown`.  You will find that the\n`status` is `waiting-approval`. And you will find in the\n`_links` section of the response a link for the `approvalUrl`.\n\nIn this case you would either open the `approvalUrl` in an \niframe or in a pop (better workflow for mobile).  \n",
        "requestBody": {
          "$ref": "#/components/requestBodies/TransactionRequest"
        },
        "responses": {
          "201": {
            "description": "Transaction was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      },
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve a list of transactions",
        "operationId": "GetTransactionCollection",
        "description": "Retrieve a list of transactions\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          },
          {
            "$ref": "#/components/parameters/collectionQuery"
          },
          {
            "$ref": "#/components/parameters/collectionSort"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response media type",
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/csv"],
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transactions was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transactions = $client->transactions()->search([\n    'filter' => 'result:approved',\n]);\n"
          }
        ]
      }
    },
    "/transactions/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve a Transaction",
        "operationId": "GetTransaction",
        "description": "Retrieve a Transaction with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Transaction was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->load('transactionId');\n"
          }
        ]
      }
    },
    "/transactions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Transactions"],
        "summary": "Cancel a pending or suspended transaction",
        "operationId": "PostTransactionCancellation",
        "description": "Cancel a scheduled transaction. Once handled a transaction cannot be canceled",
        "responses": {
          "201": {
            "description": "Successful cancel the payment",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $payment = $client->transactions()->cancel('transactionId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/transactions/{id}/gateway-logs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve a Transaction Gateway Logs",
        "operationId": "GetTransactionGatewayLogCollection",
        "description": "Retrieve Gateway communication Logs for Transaction with specified identifier string",
        "responses": {
          "200": {
            "description": "Logs were retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionGatewayLog"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/transactions/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Transactions"],
        "summary": "Get matched rules for the transaction",
        "operationId": "GetTransactionMatchedRuleCollection",
        "description": "Get matched rules for the transaction",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchedRule"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/transactions/{id}/refund": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": ["Transactions"],
        "summary": "Refund a Transaction",
        "operationId": "PostTransactionRefund",
        "description": "Refund a Transaction with specified identifier string.\nNote that the refund will be in the same currency as the original transaction.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRefund"
              }
            }
          },
          "description": "Transaction resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction was refunded successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->refund('transactionId', 1.99);\n"
          }
        ]
      }
    },
    "/transactions/{id}/timeline": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve a list of transaction timeline messages",
        "operationId": "GetTransactionTimelineCollection",
        "description": "Retrieve a list of transaction timeline messages\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectionLimit"
          },
          {
            "$ref": "#/components/parameters/collectionOffset"
          },
          {
            "$ref": "#/components/parameters/collectionFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transaction timeline messages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              },
              "Pagination-Total": {
                "$ref": "#/components/headers/Pagination-Total"
              },
              "Pagination-Limit": {
                "$ref": "#/components/headers/Pagination-Limit"
              },
              "Pagination-Offset": {
                "$ref": "#/components/headers/Pagination-Offset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionTimeline"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a transaction Timeline comment",
        "operationId": "PostTransactionTimeline",
        "description": "Create a transaction Timeline comment\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionTimeline"
              }
            }
          },
          "description": "Transaction Timeline resource",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction Timeline comment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidDataError"
          }
        }
      }
    },
    "/transactions/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "name": "messageId",
          "in": "path",
          "description": "The Transaction Timeline message ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve a transaction Timeline message",
        "operationId": "GetTransactionTimeline",
        "description": "Retrieve a timeline message with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Timeline message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionTimeline"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete a Transaction Timeline message",
        "operationId": "DeleteTransactionTimeline",
        "description": "Delete a Transaction Timeline message with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Transaction Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "$ref": "#/components/headers/Rate-Limit-Limit"
              },
              "Rate-Limit-Remaining": {
                "$ref": "#/components/headers/Rate-Limit-Remaining"
              },
              "Rate-Limit-Reset": {
                "$ref": "#/components/headers/Rate-Limit-Reset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JWT": {
        "description": "You can create a JSON Web Token (JWT) via our [JWT Session resource](https://user-api-docs.rebilly.com/#operation/PostSigninRequest).\nUsage format: `Bearer <JWT>`\n",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "PublishableApiKey": {
        "description": "Only for the Tokens resource.\nYou can create a Publishable API Key via our [API Keys resource](https://user-api-docs.rebilly.com/#tag/API-Keys), by specifying the type as `publishable`.\n",
        "name": "Authorization",
        "type": "apiKey",
        "in": "header"
      },
      "SecretApiKey": {
        "description": "When you sign up for an account, you are given your first secret API key.\nTo do so please [follow this link.](https://app.rebilly.com/signup)\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). All API keys can be restricted to a\nsmall set of permissions (restricted API keys).\n",
        "name": "REB-APIKEY",
        "type": "apiKey",
        "in": "header"
      }
    },
    "schemas": {
      "ResourceId": {
        "type": "string",
        "description": "The resource ID. Defaults to UUID v4",
        "maxLength": 50,
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      },
      "CurrencyCode": {
        "type": "string",
        "description": "ISO 4217 alphabetic currency code",
        "minLength": 3,
        "maxLength": 3,
        "example": "USD"
      },
      "ServerTimestamp": {
        "type": "string",
        "description": "Read-only timestamp, automatically assigned on back-end.",
        "format": "date-time",
        "readOnly": true
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "description": "The link URL",
            "type": "string"
          }
        },
        "required": ["href"]
      },
      "SelfLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["self"]
          }
        },
        "required": ["rel"]
      },
      "ThreeDSecure": {
        "type": "object",
        "required": [
          "enrolled",
          "enrollmentEci",
          "customerId",
          "gatewayAccountId",
          "paymentCardId",
          "websiteId",
          "currency",
          "amount"
        ],
        "properties": {
          "id": {
            "description": "The 3D Secure entry identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "Related customer ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "gatewayAccountId": {
            "description": "Related gateway account ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "paymentCardId": {
            "description": "Related payment card ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websiteId": {
            "description": "Related Website ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "enrolled": {
            "description": "Is the cardholder enrolled in 3DSecure",
            "type": "string",
            "enum": ["Y", "N", "U"]
          },
          "enrollmentEci": {
            "description": "The 3D Secure entry enrollment eci",
            "type": "string"
          },
          "eci": {
            "description": "The 3D Secure entry electronic commerce indicator",
            "type": "integer"
          },
          "cavv": {
            "description": "The 3D Secure entry cardholder authentication verification value",
            "type": "string"
          },
          "xid": {
            "description": "The 3D Secure entry transaction Id",
            "type": "string"
          },
          "payerAuthResponseStatus": {
            "description": "The 3D Secure entry Auth Response Status",
            "type": "string",
            "enum": ["Y", "N", "U", "A"]
          },
          "signatureVerification": {
            "description": "If signature was verified",
            "type": "string",
            "enum": ["Y", "N"]
          },
          "amount": {
            "description": "Transaction amount",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "createdTime": {
            "description": "The 3D Secure entry created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "minimum": 100,
            "maximum": 600,
            "description": "The HTTP status code."
          },
          "error": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\"."
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
          }
        }
      },
      "InvalidError": {
        "description": "Invalid data was sent",
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "invalidFields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "description": "The field name. Dot notation is used for nested object field names."
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": [
                  {
                    "field": "field1",
                    "message": "field1 is invalid"
                  },
                  {
                    "field": "subObject.field2",
                    "message": "field2 is invalid"
                  },
                  {
                    "field": "subObject.field2",
                    "message": "another error in the field2"
                  }
                ]
              }
            }
          }
        ]
      },
      "FileLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["file"]
          }
        },
        "required": ["rel"]
      },
      "AttachmentResourceLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["customer", "dispute", "invoice", "payment", "plan", "product", "subscription", "transaction"]
          }
        },
        "required": ["rel"]
      },
      "FileDownloadLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["download"]
          }
        },
        "required": ["rel"]
      },
      "SignedLinkLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["signedLink"]
          }
        },
        "required": ["rel"]
      },
      "PermalinkLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["permalink"]
          }
        },
        "required": ["rel"]
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "Original File name",
            "type": "string"
          },
          "extension": {
            "description": "The File extension",
            "type": "string"
          },
          "description": {
            "description": "The File description",
            "type": "string"
          },
          "tags": {
            "description": "The tags list",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mime": {
            "description": "The mime type",
            "type": "string",
            "readOnly": true,
            "enum": ["image/png", "image/jpeg", "image/gif", "application/pdf", "audio/mpeg"]
          },
          "size": {
            "description": "The File size in bytes",
            "type": "integer",
            "readOnly": true
          },
          "width": {
            "description": "Image width, applicable to images only",
            "type": "integer",
            "readOnly": true
          },
          "height": {
            "description": "Image height, applicable to images only",
            "type": "integer",
            "readOnly": true
          },
          "sha1": {
            "description": "Hash sum of the file",
            "type": "string",
            "readOnly": true
          },
          "createdTime": {
            "description": "The upload date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The latest update date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "isPublic": {
            "description": "Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.",
            "type": "boolean"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 3,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/FileDownloadLink"
                },
                {
                  "$ref": "#/components/schemas/SignedLinkLink"
                },
                {
                  "$ref": "#/components/schemas/PermalinkLink"
                }
              ]
            }
          }
        }
      },
      "FileEmbed": {
        "type": "object",
        "description": "File object",
        "readOnly": true,
        "properties": {
          "file": {
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "required": ["fileId", "relatedId", "relatedType"],
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "fileId": {
            "description": "Linked File object id",
            "type": "string"
          },
          "relatedType": {
            "description": "Linked object type",
            "type": "string",
            "enum": [
              "customer",
              "dispute",
              "gateway-timeline-comment",
              "invoice",
              "organization",
              "payment",
              "plan",
              "product",
              "subscription",
              "transaction",
              "customer-timeline-comment",
              "transaction-timeline-comment",
              "order-timeline-comment"
            ]
          },
          "relatedId": {
            "description": "Linked object Id",
            "type": "string"
          },
          "name": {
            "description": "The Original Attachment name",
            "type": "string"
          },
          "description": {
            "description": "The Attachment description",
            "type": "string"
          },
          "createdTime": {
            "description": "Creation date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Latest update date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 3,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/FileLink"
                },
                {
                  "$ref": "#/components/schemas/AttachmentResourceLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FileEmbed"
                }
              ]
            }
          }
        }
      },
      "AuthenticationOptions": {
        "type": "object",
        "properties": {
          "passwordPattern": {
            "description": "Allowed password pattern",
            "type": "string"
          },
          "credentialTtl": {
            "description": "The default lifetime of the credential in seconds",
            "type": "integer"
          },
          "authTokenTtl": {
            "description": "The default lifetime of the auth-token in seconds",
            "type": "integer"
          },
          "resetTokenTtl": {
            "description": "The default lifetime of the reset-token in seconds",
            "type": "integer"
          },
          "otpRequired": {
            "description": "Should OTP be required to exchange token",
            "type": "boolean"
          }
        }
      },
      "AuthenticationToken": {
        "type": "object",
        "discriminator": {
          "propertyName": "mode",
          "mapping": {
            "password": "#/components/schemas/password",
            "passwordless": "#/components/schemas/passwordless"
          }
        },
        "properties": {
          "token": {
            "description": "The token identifier string",
            "type": "string",
            "readOnly": true
          },
          "mode": {
            "description": "The token's generation mode",
            "type": "string",
            "enum": ["password", "passwordless"],
            "writeOnly": true,
            "default": "password"
          },
          "otpRequired": {
            "description": "Should OTP be required to exchange this token",
            "type": "boolean"
          },
          "credentialId": {
            "description": "The credential's ID",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      },
      "AuthenticationTokenMetadata": {
        "type": "object",
        "properties": {
          "expiredTime": {
            "description": "Token's expired time",
            "type": "string",
            "format": "date-time"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "password": {
        "required": ["username", "password"],
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationToken"
          },
          {
            "properties": {
              "username": {
                "description": "The token's username",
                "type": "string"
              },
              "password": {
                "description": "The token's password",
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              "customerId": {
                "description": "The token's customer ID",
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuthenticationTokenMetadata"
          }
        ]
      },
      "passwordless": {
        "required": ["customerId"],
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationToken"
          },
          {
            "properties": {
              "customerId": {
                "description": "The token's customer ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuthenticationTokenMetadata"
          }
        ]
      },
      "CustomerLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["customer"]
          }
        },
        "required": ["rel"]
      },
      "CustomerJWT": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The session identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "readOnly": true
          },
          "type": {
            "description": "Session type",
            "type": "string",
            "readOnly": true,
            "enum": ["customer"]
          },
          "token": {
            "description": "The session's token used for authentication",
            "type": "string",
            "readOnly": true
          },
          "invalidate": {
            "description": "Whether to invalidate token after exchange or not",
            "type": "boolean",
            "default": true,
            "example": true,
            "writeOnly": true
          },
          "oneTimePassword": {
            "description": "The one time password sent via an email. Should contain digits only.",
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "example": "123456",
            "writeOnly": true
          },
          "customerId": {
            "description": "The customer's ID",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "createdTime": {
            "description": "Session created time",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedTime": {
            "description": "Session updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expiredTime": {
            "description": "Session expired time. Defaults to one hour",
            "type": "string",
            "format": "date-time"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/CustomerLink"
            }
          }
        }
      },
      "ContactPhoneNumbers": {
        "description": "The list of phone numbers",
        "type": "array",
        "items": {
          "type": "object",
          "required": ["label", "value"],
          "properties": {
            "label": {
              "description": "The phone label",
              "type": "string",
              "example": "main"
            },
            "value": {
              "description": "The phone value",
              "type": "string",
              "example": "512-710-1640"
            },
            "primary": {
              "description": "True if phone is primary",
              "type": "boolean",
              "example": true
            }
          }
        }
      },
      "ContactEmails": {
        "description": "The list of emails",
        "type": "array",
        "items": {
          "type": "object",
          "required": ["label", "value"],
          "properties": {
            "label": {
              "description": "The email label",
              "type": "string",
              "example": "main"
            },
            "value": {
              "description": "The email value",
              "type": "string",
              "example": "rebilly@example.com"
            },
            "primary": {
              "description": "True if email is primary",
              "type": "boolean",
              "example": true
            }
          }
        }
      },
      "ContactObject": {
        "type": "object",
        "properties": {
          "firstName": {
            "description": "The contact first name",
            "type": "string",
            "example": "Benjamin",
            "nullable": true
          },
          "lastName": {
            "description": "The contact last name",
            "type": "string",
            "example": "Franklin",
            "nullable": true
          },
          "organization": {
            "description": "The contact organization",
            "type": "string",
            "nullable": true,
            "example": null
          },
          "address": {
            "description": "The contact street address",
            "type": "string",
            "maxLength": 60,
            "example": "36 Craven St",
            "nullable": true
          },
          "address2": {
            "description": "The contact street address (second line)",
            "type": "string",
            "maxLength": 60,
            "nullable": true
          },
          "city": {
            "description": "The contact city",
            "type": "string",
            "maxLength": 45,
            "nullable": true,
            "example": "London"
          },
          "region": {
            "description": "The contact region (state)",
            "type": "string",
            "maxLength": 45,
            "nullable": true,
            "example": "London"
          },
          "country": {
            "description": "The contact country ISO Alpha-2 code",
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "nullable": true,
            "example": "GB"
          },
          "postalCode": {
            "description": "The contact postal code",
            "type": "string",
            "maxLength": 10,
            "nullable": true,
            "example": "WC2N 5NF"
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/ContactPhoneNumbers"
          },
          "emails": {
            "$ref": "#/components/schemas/ContactEmails"
          },
          "hash": {
            "description": "A hash that can be used to compare multiple contacts for identical attribute values",
            "type": "string",
            "maxLength": 40,
            "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
            "readOnly": true
          }
        }
      },
      "ResourceCustomFields": {
        "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
        "type": "object"
      },
      "Method": {
        "type": "string",
        "description": "The payment method",
        "enum": [
          "payment-card",
          "ach",
          "bank-account",
          "cash",
          "check",
          "paypal",
          "Alipay",
          "ApplePay",
          "AstroPay Card",
          "bank-transfer",
          "bitcoin",
          "Boleto",
          "cash-deposit",
          "CASHlib",
          "CashToCode",
          "China UnionPay",
          "CODVoucher",
          "Conekta-oxxo",
          "domestic-cards",
          "echeck",
          "ecoPayz",
          "ecoVoucher",
          "EPS",
          "ePay.bg",
          "Finrax",
          "Flexepin",
          "Giropay",
          "GooglePay",
          "Gpaysafe",
          "iDebit",
          "iDEAL",
          "INOVAPAY-pin",
          "INOVAPAY-wallet",
          "InstaDebit",
          "instant-bank-transfer",
          "Interac-online",
          "Interac-eTransfer",
          "Interac-express-connect",
          "Interac",
          "invoice",
          "Jeton",
          "Klarna",
          "LPG-online",
          "LPG-payment-card",
          "miscellaneous",
          "Netbanking",
          "Neteller",
          "Nordea-Solo",
          "OchaPay",
          "online-bank-transfer",
          "Onlineueberweisen",
          "Pagsmile-lottery",
          "Pagsmile-deposit-express",
          "PayCash",
          "Paysafecard",
          "Pay4Fun",
          "PinPay",
          "phone",
          "POLi",
          "Przelewy24",
          "QQPay",
          "Resurs",
          "SEPA",
          "Skrill",
          "Skrill Rapid Transfer",
          "SMSVoucher",
          "SparkPay",
          "swift-dbt",
          "ToditoCash-card",
          "Trustly",
          "UPayCard",
          "voucher",
          "WeChat Pay",
          "Zotapay"
        ]
      },
      "PaymentInstrument": {
        "type": "object",
        "required": ["method"],
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "ach": "#/components/schemas/achInstrument",
            "Alipay": "#/components/schemas/AlipayInstrument",
            "AstroPay Card": "#/components/schemas/AstroPay-CardInstrument",
            "bank-account": "#/components/schemas/bank-accountInstrument",
            "bitcoin": "#/components/schemas/bitcoinInstrument",
            "Boleto": "#/components/schemas/BoletoInstrument",
            "cash": "#/components/schemas/cashInstrument",
            "check": "#/components/schemas/checkInstrument",
            "China UnionPay": "#/components/schemas/China-UnionPayInstrument",
            "ePay.bg": "#/components/schemas/ePay-bgInstrument",
            "EPS": "#/components/schemas/EPSInstrument",
            "Flexepin": "#/components/schemas/FlexepinInstrument",
            "iDEAL": "#/components/schemas/iDEALInstrument",
            "Klarna": "#/components/schemas/KlarnaInstrument",
            "payment-card": "#/components/schemas/payment-cardInstrument",
            "paypal": "#/components/schemas/paypalInstrument",
            "QQPay": "#/components/schemas/QQPayInstrument",
            "Skrill Rapid Transfer": "#/components/schemas/Skrill-Rapid-TransferInstrument",
            "SMSVoucher": "#/components/schemas/SMSVoucherInstrument",
            "UPayCard": "#/components/schemas/UPayCardInstrument",
            "WeChat Pay": "#/components/schemas/WeChat-PayInstrument",
            "AlipayInstrument": "#/components/schemas/AlipayInstrument",
            "AstroPay-CardInstrument": "#/components/schemas/AstroPay-CardInstrument",
            "BoletoInstrument": "#/components/schemas/BoletoInstrument",
            "China-UnionPayInstrument": "#/components/schemas/China-UnionPayInstrument",
            "EPSInstrument": "#/components/schemas/EPSInstrument",
            "FlexepinInstrument": "#/components/schemas/FlexepinInstrument",
            "KlarnaInstrument": "#/components/schemas/KlarnaInstrument",
            "QQPayInstrument": "#/components/schemas/QQPayInstrument",
            "SMSVoucherInstrument": "#/components/schemas/SMSVoucherInstrument",
            "Skrill-Rapid-TransferInstrument": "#/components/schemas/Skrill-Rapid-TransferInstrument",
            "UPayCardInstrument": "#/components/schemas/UPayCardInstrument",
            "WeChat-PayInstrument": "#/components/schemas/WeChat-PayInstrument",
            "achInstrument": "#/components/schemas/achInstrument",
            "bank-accountInstrument": "#/components/schemas/bank-accountInstrument",
            "bitcoinInstrument": "#/components/schemas/bitcoinInstrument",
            "cashInstrument": "#/components/schemas/cashInstrument",
            "checkInstrument": "#/components/schemas/checkInstrument",
            "ePay-bgInstrument": "#/components/schemas/ePay-bgInstrument",
            "iDEALInstrument": "#/components/schemas/iDEALInstrument",
            "payment-cardInstrument": "#/components/schemas/payment-cardInstrument",
            "paypalInstrument": "#/components/schemas/paypalInstrument"
          }
        },
        "properties": {
          "method": {
            "$ref": "#/components/schemas/Method"
          }
        }
      },
      "achInstrument": {
        "description": "ACH payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "required": ["bankAccountId"],
            "properties": {
              "bankAccountId": {
                "description": "The bank account identifier string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "AlipayInstrument": {
        "description": "Alipay payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "AstroPay-CardInstrument": {
        "description": "AstroPay Card payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "bank-accountInstrument": {
        "description": "ACH payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "required": ["bankAccountId"],
            "properties": {
              "bankAccountId": {
                "description": "The bank account identifier string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "bitcoinInstrument": {
        "description": "Bitcoin payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "BoletoInstrument": {
        "description": "Boleto payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "cashInstrument": {
        "description": "Cash payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "properties": {
              "receivedBy": {
                "description": "The receiver's name",
                "type": "string"
              }
            }
          }
        ]
      },
      "checkInstrument": {
        "description": "Check payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "properties": {
              "reference": {
                "description": "Reference data",
                "type": "string"
              }
            }
          }
        ]
      },
      "China-UnionPayInstrument": {
        "description": "China UnionPay payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "ePay-bgInstrument": {
        "description": "ePay.bg payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "EPSInstrument": {
        "description": "EPS payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "FlexepinInstrument": {
        "description": "Flexepin payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "iDEALInstrument": {
        "description": "iDEAL payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "KlarnaInstrument": {
        "description": "Klarna payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "payment-cardInstrument": {
        "description": "Payment card payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "required": ["paymentCardId"],
            "properties": {
              "paymentCardId": {
                "description": "The payment card identifier string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "paypalInstrument": {
        "description": "PayPal payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          {
            "type": "object",
            "required": ["payPalAccountId"],
            "properties": {
              "payPalAccountId": {
                "description": "The PayPal account identifier string",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "QQPayInstrument": {
        "description": "QQPay payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "Skrill-Rapid-TransferInstrument": {
        "description": "Skrill Rapid Transfer payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "SMSVoucherInstrument": {
        "description": "SMSVoucher payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "UPayCardInstrument": {
        "description": "SMSVoucher payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "WeChat-PayInstrument": {
        "description": "WeChat Pay payment instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrument"
          }
        ]
      },
      "CustomerAverageValue": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "currency": {
            "description": "Merchant's reporting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "amount": {
            "description": "Average approved payment amount in Merchant's reporting currency",
            "type": "number",
            "format": "double"
          },
          "amountUsd": {
            "description": "Average approved payment amount in USD",
            "type": "number",
            "format": "double"
          }
        }
      },
      "CustomerLifetimeRevenue": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "currency": {
            "description": "Merchant's reporting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "amount": {
            "description": "Revenue amount in Merchant's reporting currency",
            "type": "number",
            "format": "double"
          },
          "amountUsd": {
            "description": "Revenue amount in USD",
            "type": "number",
            "format": "double"
          }
        }
      },
      "Tag": {
        "type": "object",
        "description": "Tag",
        "required": ["name"],
        "properties": {
          "id": {
            "description": "The tag's identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "The tag's unique name, which is case-insensitive.",
            "type": "string",
            "maxLength": 255,
            "pattern": "^[@~\\-\\.\\w\\s]+$",
            "example": "New"
          },
          "createdTime": {
            "description": "The tag's created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The tag's updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                }
              ]
            }
          }
        }
      },
      "DefaultPaymentInstrumentLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["defaultPaymentInstrument"]
          }
        },
        "required": ["rel"]
      },
      "LeadSourceLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["leadSource"]
          }
        },
        "required": ["rel"]
      },
      "WebsiteLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["website"]
          }
        },
        "required": ["rel"]
      },
      "LeadSourceData": {
        "type": "object",
        "properties": {
          "medium": {
            "description": "Lead Source's medium (eg search, display)",
            "type": "string"
          },
          "source": {
            "description": "Lead Source's source (eg google, yahoo)",
            "type": "string"
          },
          "campaign": {
            "description": "Lead Source's campaign (eg go-big-123)",
            "type": "string"
          },
          "term": {
            "description": "Lead Source's term (eg salt shakers)",
            "type": "string"
          },
          "content": {
            "description": "Lead Source's content (eg smiley faces)",
            "type": "string"
          },
          "affiliate": {
            "description": "Lead Source's affiliate (eg 123, Bob Smith)",
            "type": "string"
          },
          "subAffiliate": {
            "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
            "type": "string"
          },
          "salesAgent": {
            "description": "Lead Source's sales agent (eg James Bond)",
            "type": "string"
          },
          "clickId": {
            "description": "Lead Source's click id (may come from an ad server)",
            "type": "string"
          },
          "path": {
            "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
            "type": "string"
          },
          "createdTime": {
            "description": "LeadSource created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                }
              ]
            }
          }
        }
      },
      "LeadSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LeadSourceData"
          },
          {
            "type": "object",
            "properties": {
              "original": {
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeadSourceData"
                  }
                ]
              }
            }
          }
        ]
      },
      "LeadSourceEmbed": {
        "type": "object",
        "description": "Lead Source object",
        "readOnly": true,
        "properties": {
          "leadSource": {
            "$ref": "#/components/schemas/LeadSource"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The customer identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websiteId": {
            "description": "The website's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "paymentToken": {
            "type": "string",
            "writeOnly": true,
            "description": "A write-only payment token; if supplied, it will be converted into a\npayment instrument and be set as the `defaultPaymentInstrument`. The\nvalue of this property will override the `defaultPaymentInstrument`\nin the case that both are supplied. The token may only be used once\nbefore it is expired.\n"
          },
          "defaultPaymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          "createdTime": {
            "description": "The customer created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The customer updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/ContactObject"
          },
          "averageValue": {
            "$ref": "#/components/schemas/CustomerAverageValue"
          },
          "paymentCount": {
            "description": "The number of approved payments for the customer",
            "readOnly": true,
            "type": "integer"
          },
          "lastPaymentTime": {
            "description": "The most recent time of an approved payment for the customer",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "lifetimeRevenue": {
            "$ref": "#/components/schemas/CustomerLifetimeRevenue"
          },
          "invoiceCount": {
            "description": "An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer",
            "readOnly": true,
            "type": "integer"
          },
          "tags": {
            "description": "A list of customer's tags",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "revision": {
            "description": "The number of times the customer data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
            "type": "integer",
            "readOnly": true
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 3,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/DefaultPaymentInstrumentLink"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceLink"
                },
                {
                  "$ref": "#/components/schemas/WebsiteLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/LeadSourceEmbed"
                }
              ]
            }
          }
        }
      },
      "CustomerEmbed": {
        "type": "object",
        "description": "Customer object",
        "readOnly": true,
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "BankAccount": {
        "type": "object",
        "required": ["customerId"],
        "properties": {
          "id": {
            "description": "The bank account identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "method": {
            "description": "The method of payment instrument",
            "type": "string",
            "readOnly": true,
            "enum": ["bank-account"]
          },
          "bankName": {
            "description": "Bank's name.",
            "type": "string"
          },
          "routingNumber": {
            "description": "Bank's Routing Number.",
            "type": "string"
          },
          "accountNumberType": {
            "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
            "type": "string",
            "default": "BBAN",
            "enum": ["BBAN", "IBAN"]
          },
          "accountType": {
            "description": "Bank's Account type.",
            "type": "string",
            "enum": ["checking", "savings", "other"]
          },
          "bic": {
            "description": "Bank Identifier Code",
            "type": "string"
          },
          "address": {
            "description": "The Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "fingerprint": {
            "description": "A unique value to identify the Bank Account. It contains alphanumeric values.",
            "type": "string",
            "readOnly": true
          },
          "last4": {
            "description": "The last 4 digits of the bank account",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "Bank Account status",
            "type": "string",
            "readOnly": true,
            "enum": ["active", "deactivated"]
          },
          "createdTime": {
            "description": "Bank Account created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Bank Account updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CustomerEmbed"
                }
              ]
            }
          }
        }
      },
      "BankAccountCreateToken": {
        "type": "object",
        "required": ["customerId", "token"],
        "properties": {
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "token": {
            "description": "BankAccountToken ID.",
            "type": "string"
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          }
        }
      },
      "BankAccountCreatePlain": {
        "type": "object",
        "required": ["accountNumberType"],
        "discriminator": {
          "propertyName": "accountNumberType",
          "mapping": {
            "BBAN": "#/components/schemas/BBANType",
            "IBAN": "#/components/schemas/IBANType"
          }
        },
        "properties": {
          "accountNumberType": {
            "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
            "type": "string",
            "default": "BBAN",
            "enum": ["IBAN", "BBAN"]
          }
        }
      },
      "BBANType": {
        "description": "BBAN type object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccountCreatePlain"
          },
          {
            "type": "object",
            "required": ["customerId", "accountNumber", "routingNumber", "accountType", "address"],
            "properties": {
              "customerId": {
                "description": "The Customer's ID.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "accountNumber": {
                "description": "Bank's Account Number.",
                "type": "string",
                "pattern": "^[0-9]+$"
              },
              "routingNumber": {
                "description": "Bank's Routing Number.",
                "type": "string",
                "pattern": "^[0-9]+$"
              },
              "accountType": {
                "description": "Bank's Account type.",
                "type": "string",
                "enum": ["checking", "savings", "other"]
              },
              "bankName": {
                "description": "Bank's name.",
                "type": "string"
              },
              "bic": {
                "description": "Bank Identifier Code.",
                "type": "string"
              },
              "address": {
                "description": "The Address.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactObject"
                  }
                ]
              },
              "customFields": {
                "$ref": "#/components/schemas/ResourceCustomFields"
              }
            }
          }
        ]
      },
      "IBANType": {
        "description": "IBAN type object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccountCreatePlain"
          },
          {
            "type": "object",
            "required": ["customerId", "accountNumber", "address"],
            "properties": {
              "customerId": {
                "description": "The Customer's ID.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "accountNumber": {
                "description": "Bank's Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available\nin [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
                "type": "string"
              },
              "bankName": {
                "description": "Bank's name.",
                "type": "string"
              },
              "bic": {
                "description": "Bank Identifier Code.",
                "type": "string"
              },
              "address": {
                "description": "The Address.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactObject"
                  }
                ]
              },
              "customFields": {
                "$ref": "#/components/schemas/ResourceCustomFields"
              }
            }
          }
        ]
      },
      "Blacklist": {
        "type": "object",
        "required": ["type", "value"],
        "properties": {
          "id": {
            "description": "The blacklist identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "The blacklist type",
            "type": "string",
            "enum": [
              "payment-card",
              "bank-account",
              "customer-id",
              "email",
              "email-domain",
              "ip-address",
              "country",
              "fingerprint",
              "bin",
              "address"
            ]
          },
          "value": {
            "description": "The blacklist value",
            "type": "string"
          },
          "expirationTime": {
            "description": "The blacklist expiration time",
            "type": "string",
            "format": "date-time"
          },
          "createdTime": {
            "description": "The blacklist created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The blacklist updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The contact identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "The contact customer ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "firstName": {
            "description": "The contact first name",
            "type": "string"
          },
          "lastName": {
            "description": "The contact last name",
            "type": "string"
          },
          "organization": {
            "description": "The contact organization",
            "type": "string"
          },
          "address": {
            "description": "The contact street address",
            "type": "string",
            "maxLength": 60
          },
          "address2": {
            "description": "The contact street address (second line)",
            "type": "string",
            "maxLength": 60
          },
          "city": {
            "description": "The contact city",
            "type": "string",
            "maxLength": 45
          },
          "region": {
            "description": "The contact region (state)",
            "type": "string",
            "maxLength": 45
          },
          "country": {
            "description": "The contact country ISO Alpha-2 code",
            "type": "string",
            "pattern": "^[A-Z]{2}$"
          },
          "postalCode": {
            "description": "The contact postal code",
            "type": "string",
            "maxLength": 10
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/ContactPhoneNumbers"
          },
          "emails": {
            "$ref": "#/components/schemas/ContactEmails"
          },
          "hash": {
            "description": "A hash that can be used to compare multiple contacts for identical attribute values, excluding id, customer id, createdTime, updatedTime.",
            "type": "string",
            "maxLength": 40,
            "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
            "readOnly": true
          },
          "createdTime": {
            "description": "The contact created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The contact updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CustomerEmbed"
                }
              ]
            }
          }
        }
      },
      "discounts-per-redemption": {
        "description": "discounts-per-redemption restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["quantity"],
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "Restriction quantity"
              }
            }
          }
        ]
      },
      "CouponRestriction": {
        "description": "Coupon restrictions",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "discounts-per-redemption": "#/components/schemas/discounts-per-redemption",
            "minimum-order-amount": "#/components/schemas/minimum-order-amount",
            "paid-by-time": "#/components/schemas/paid-by-time",
            "redemptions-per-customer": "#/components/schemas/redemptions-per-customer",
            "restrict-to-invoices": "#/components/schemas/restrict-to-invoices",
            "restrict-to-plans": "#/components/schemas/restrict-to-plans",
            "restrict-to-products": "#/components/schemas/restrict-to-products",
            "restrict-to-subscriptions": "#/components/schemas/restrict-to-subscriptions",
            "total-redemptions": "#/components/schemas/total-redemptions"
          }
        },
        "properties": {
          "type": {
            "description": "Coupon's restriction type",
            "type": "string",
            "enum": [
              "discounts-per-redemption",
              "minimum-order-amount",
              "redemptions-per-customer",
              "restrict-to-invoices",
              "restrict-to-plans",
              "restrict-to-subscriptions",
              "restrict-to-products",
              "total-redemptions",
              "paid-by-time"
            ]
          }
        },
        "required": ["type"]
      },
      "RedemptionRestriction": {
        "description": "Redemption restrictions",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "discounts-per-redemption": "#/components/schemas/discounts-per-redemption",
            "minimum-order-amount": "#/components/schemas/minimum-order-amount",
            "paid-by-time": "#/components/schemas/paid-by-time",
            "restrict-to-invoices": "#/components/schemas/restrict-to-invoices",
            "restrict-to-plans": "#/components/schemas/restrict-to-plans",
            "restrict-to-products": "#/components/schemas/restrict-to-products",
            "restrict-to-subscriptions": "#/components/schemas/restrict-to-subscriptions"
          }
        },
        "properties": {
          "type": {
            "description": "Redemption's additional restriction type",
            "type": "string",
            "enum": [
              "discounts-per-redemption",
              "minimum-order-amount",
              "restrict-to-invoices",
              "restrict-to-plans",
              "restrict-to-subscriptions",
              "restrict-to-products",
              "paid-by-time"
            ]
          }
        },
        "required": ["type"]
      },
      "minimum-order-amount": {
        "description": "minimum-order-amount restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["amount", "currency"],
            "properties": {
              "amount": {
                "type": "integer",
                "description": "Minimum order quantity"
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCode"
                  }
                ]
              }
            }
          }
        ]
      },
      "paid-by-time": {
        "description": "paid-by-time restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["time"],
            "properties": {
              "time": {
                "type": "string",
                "format": "date-time",
                "description": "The time when the coupon's redemption is no longer valid and removed from unpaid invoices if applied. Note that this datetime cannot be changed."
              }
            }
          }
        ]
      },
      "redemptions-per-customer": {
        "description": "Quantity per Customer restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["quantity"],
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "Restriction value"
              }
            }
          }
        ]
      },
      "restrict-to-invoices": {
        "description": "restrict-to-invoices restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["invoiceIds"],
            "properties": {
              "invoiceIds": {
                "type": "array",
                "description": "Invoice IDs coupon can be applied to",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "restrict-to-plans": {
        "description": "restrict-to-plans restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["planIds"],
            "properties": {
              "planIds": {
                "type": "array",
                "description": "Plan IDs coupon can be applied to",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "restrict-to-products": {
        "description": "restrict-to-products restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["productIds"],
            "properties": {
              "productIds": {
                "type": "array",
                "description": "Product IDs coupon can be applied to",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "restrict-to-subscriptions": {
        "description": "restrict-to-subscriptions restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["subscriptionIds"],
            "properties": {
              "subscriptionIds": {
                "type": "array",
                "description": "Subscription IDs coupon can be applied to",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "total-redemptions": {
        "description": "total-redemptions restrictions",
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponRestriction"
          },
          {
            "$ref": "#/components/schemas/RedemptionRestriction"
          },
          {
            "type": "object",
            "required": ["quantity"],
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "Total redemptions quantity"
              }
            }
          }
        ]
      },
      "CouponRedemption": {
        "type": "object",
        "description": "Coupons redemption log",
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "redemptionCode": {
            "description": "Coupon's redemption code",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "Customer's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "additionalRestrictions": {
            "description": "Additional restrictions for coupon's redemptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedemptionRestriction"
            }
          },
          "createdTime": {
            "description": "Coupon redeem time",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "canceledTime": {
            "description": "Coupon redemption canceled time",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Discount": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "fixed": "#/components/schemas/fixed",
            "percent": "#/components/schemas/percent"
          }
        },
        "properties": {
          "type": {
            "description": "Discount type",
            "type": "string",
            "enum": ["fixed", "percent"]
          }
        }
      },
      "fixed": {
        "description": "Coupon fixed amount discount",
        "allOf": [
          {
            "$ref": "#/components/schemas/Discount"
          },
          {
            "type": "object",
            "required": ["amount", "currency"],
            "properties": {
              "amount": {
                "description": "Discount amount",
                "type": "number",
                "format": "double",
                "minimum": 0,
                "exclusiveMinimum": true
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCode"
                  }
                ]
              }
            }
          }
        ]
      },
      "percent": {
        "description": "Coupon percent discount",
        "allOf": [
          {
            "$ref": "#/components/schemas/Discount"
          },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "value": {
                "description": "Discount percent",
                "type": "number",
                "format": "double",
                "minimum": 0,
                "exclusiveMinimum": true,
                "maximum": 100
              }
            }
          }
        ]
      },
      "Coupon": {
        "type": "object",
        "description": "Coupons and Discounts",
        "required": ["discount", "issuedTime"],
        "properties": {
          "redemptionCode": {
            "description": "Coupon's redemption code",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "restrictions": {
            "description": "Coupon restrictions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponRestriction"
            }
          },
          "redemptionsCount": {
            "type": "integer",
            "description": "Coupon's redemptions count",
            "minimum": 0,
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "If coupon enabled",
            "readOnly": true,
            "enum": ["draft", "issued", "expired"]
          },
          "description": {
            "type": "string",
            "description": "Your coupon description. When it is not empty this is used for invoice discount item description,\notherwise the item's description uses coupon's redemptionCode like 'Coupon \"redemptionCode\"'\n"
          },
          "issuedTime": {
            "description": "Coupon's issued time (start time)",
            "type": "string",
            "format": "date-time"
          },
          "expiredTime": {
            "description": "Coupon's expire time (end time)",
            "type": "string",
            "format": "date-time"
          },
          "createdTime": {
            "description": "Coupon created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Coupon updated time.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "CouponExpiration": {
        "type": "object",
        "required": ["expiredTime"],
        "properties": {
          "expiredTime": {
            "description": "The coupon's expiry time, must be greater than the issued time. Null or empty string will immediately expire the coupon.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Credential": {
        "type": "object",
        "required": ["username", "password", "customerId"],
        "properties": {
          "id": {
            "description": "The credential identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "username": {
            "description": "Credential's username",
            "type": "string"
          },
          "password": {
            "description": "The credential's password",
            "type": "string",
            "format": "password",
            "writeOnly": true
          },
          "customerId": {
            "description": "The credential's customer ID",
            "type": "string"
          },
          "expiredTime": {
            "description": "The credential's expired time",
            "type": "string",
            "format": "date-time"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                }
              ]
            }
          }
        }
      },
      "CustomField": {
        "description": "A separate Custom Field schema",
        "type": "object",
        "required": ["type"],
        "properties": {
          "name": {
            "description": "The name of the custom field",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
            "type": "string",
            "enum": ["array", "boolean", "datetime", "integer", "number", "string", "monetary"]
          },
          "description": {
            "description": "The custom field description",
            "type": "string"
          },
          "additionalSchema": {
            "description": "Additional parameters which can be added according to type:\n\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\nmaxLength      | string        | Maximum allowed length for the string, 255 by default, up to 4000\n"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "CustomerTimelineCustomEvent": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "id": {
            "description": "Customer Timeline Custom Event identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "Customer Timeline Custom Event type name. It must not be similar to any Rebilly system event.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "createdTime": {
            "description": "Customer Timeline Custom event created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Customer Timeline Custom event updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "TimelineAction": {
        "type": "object",
        "discriminator": {
          "propertyName": "action",
          "mapping": {
            "redemption-cancel": "#/components/schemas/redemption-cancel",
            "resend-email": "#/components/schemas/resend-email"
          }
        },
        "readOnly": true,
        "properties": {
          "action": {
            "type": "string",
            "enum": ["resend-email", "redemption-cancel"]
          }
        }
      },
      "redemption-cancel": {
        "description": "Cancel Redemption",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineAction"
          },
          {
            "type": "object",
            "properties": {
              "redemptionId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "resend-email": {
        "description": "Resend Email action",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineAction"
          },
          {
            "type": "object",
            "properties": {
              "messageId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            }
          }
        ]
      },
      "TimelineTable": {
        "type": "object",
        "description": "Additional information about Timeline message",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "three-columns": "#/components/schemas/three-columns",
            "two-columns": "#/components/schemas/two-columns"
          }
        },
        "properties": {
          "type": {
            "type": "string",
            "enum": ["two-columns", "three-columns"]
          },
          "title": {
            "type": "string",
            "description": "Data table title"
          },
          "footer": {
            "type": "string",
            "description": "Data table footer"
          }
        }
      },
      "three-columns": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineTable"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "description": "Table data. Each array element represents a table row",
                "items": {
                  "type": "object",
                  "properties": {
                    "attribute": {
                      "type": "string"
                    },
                    "previousValue": {
                      "type": "string"
                    },
                    "newValue": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "attribute": "Descriptor",
                    "previousValue": "test.com",
                    "newValue": "new-test.com"
                  }
                }
              }
            }
          }
        ]
      },
      "two-columns": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineTable"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "description": "Table data. Each array element represents a table row",
                "items": {
                  "type": "object",
                  "properties": {
                    "attribute": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "attribute": "Who",
                    "value": "John Doe"
                  }
                }
              }
            }
          }
        ]
      },
      "TimelineExtraData": {
        "type": "object",
        "description": "Additional data",
        "readOnly": true,
        "properties": {
          "actions": {
            "description": "Actions available to a Timeline message. Can be empty in case no actions are available for a message",
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/TimelineAction"
            }
          },
          "tables": {
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/TimelineTable"
            }
          },
          "author": {
            "type": "object",
            "description": "Timeline comment author data",
            "properties": {
              "userFullName": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              }
            }
          },
          "mentions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": {
                "@test@mail.com": "userId-1"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "resourceType": {
                  "type": "string",
                  "enum": [
                    "kyc-document",
                    "invoice",
                    "subscription",
                    "transaction",
                    "email-message",
                    "dispute",
                    "credit-memo",
                    "coupon"
                  ]
                },
                "resourceId": {
                  "$ref": "#/components/schemas/ResourceId"
                },
                "placeholder": {
                  "type": "string",
                  "example": "KYC Document"
                }
              }
            }
          }
        }
      },
      "CustomerTimeline": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The Timeline message identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Timeline message type",
            "type": "string",
            "enum": [
              "customer-comment-created",
              "customer-created",
              "primary-address-changed",
              "default-payment-instrument-changed",
              "lead-source-changed",
              "custom-fields-changed",
              "coupon-applied",
              "coupon-redeemed",
              "coupon-redemption-canceled",
              "kyc-document-created",
              "kyc-document-accepted",
              "kyc-document-manually-accepted",
              "kyc-document-rejected",
              "kyc-document-manually-rejected",
              "payment-card-expired",
              "payment-instrument-created",
              "payment-instrument-deactivated",
              "customer-blacklisted",
              "customer-payment-card-blacklisted",
              "invoice-created",
              "invoice-issued",
              "invoice-abandoned",
              "invoice-voided",
              "invoice-past-due",
              "invoice-paid",
              "invoice-partially-paid",
              "invoice-disputed",
              "invoice-refunded",
              "invoice-partially-refunded",
              "order-created",
              "order-renewed",
              "order-activated",
              "order-completed",
              "order-reactivated",
              "order-canceled",
              "order-upgraded",
              "order-downgraded",
              "order-churned",
              "order-paid-early",
              "transaction-approved",
              "transaction-canceled",
              "transaction-declined",
              "transaction-abandoned",
              "transaction-refunded",
              "transaction-voided",
              "transaction-discrepancy-found",
              "transaction-amount-discrepancy-found",
              "email-message-sent",
              "custom-event-processed",
              "custom-event",
              "transaction-waiting-gateway"
            ]
          },
          "customEventType": {
            "description": "Timeline custom event type. Used with `custom-event` type. Must be defined using [Customer Timeline custom event API](#operation/PostCustomerTimelineCustomEventType)",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 255
          },
          "customData": {
            "description": "Timeline custom event data. Used with `custom-event` type. Will be transformed to `extraData` two-column table in response",
            "type": "object",
            "writeOnly": true,
            "example": {
              "customAttribute": "customValue",
              "otherAttribute": "otherValue"
            }
          },
          "triggeredBy": {
            "description": "Shows who or what triggered the Timeline message",
            "type": "string",
            "readOnly": true,
            "enum": ["rebilly", "app", "direct-api"]
          },
          "message": {
            "description": "The message that describes the message details",
            "type": "string"
          },
          "extraData": {
            "$ref": "#/components/schemas/TimelineExtraData"
          },
          "occurredTime": {
            "description": "Timeline message time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "ProductLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["product"]
          }
        },
        "required": ["rel"]
      },
      "Product": {
        "type": "object",
        "required": ["name"],
        "description": "Products include digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.  If it is shippable,\nshipping will be calculated upon invoice generation.  Pricing and \nvariations are set within Plans.\n",
        "properties": {
          "id": {
            "description": "The product identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "example": "membership"
          },
          "name": {
            "description": "The product name",
            "type": "string",
            "maxLength": 255,
            "example": "Premium membership"
          },
          "unitLabel": {
            "description": "The unit label, such as per `seat` or per `unit`.",
            "type": "string",
            "maxLength": 50,
            "example": "seat",
            "default": "unit"
          },
          "description": {
            "description": "The product description",
            "type": "string",
            "maxLength": 512
          },
          "taxCategoryId": {
            "description": "The product's tax category identifier string",
            "type": "string",
            "enum": ["00000", "99999", "20010", "40030", "51020", "51010", "31000", "30070"]
          },
          "requiresShipping": {
            "description": "If the product requires shipping, shipping calculations will be applied",
            "type": "boolean",
            "example": false
          },
          "accountingCode": {
            "description": "The product accounting code",
            "type": "string",
            "example": "4010"
          },
          "options": {
            "description": "The product options such as Color, Size, etc.  The product options definition does not include option values.  Those are defined within the Plans.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "createdTime": {
            "description": "The product created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The product updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "ProductEmbed": {
        "type": "object",
        "description": "Product object",
        "readOnly": true,
        "properties": {
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "PlanPriceFormula": {
        "type": "object",
        "discriminator": {
          "propertyName": "formula",
          "mapping": {
            "fixed-fee": "#/components/schemas/fixed-fee",
            "flat-rate": "#/components/schemas/flat-rate",
            "stairstep": "#/components/schemas/stairstep",
            "tiered": "#/components/schemas/tiered",
            "volume": "#/components/schemas/volume"
          }
        },
        "required": ["formula"],
        "properties": {
          "formula": {
            "type": "string",
            "description": "The price formula determines what algorithm is used to calculate the invoice price based on a few factors,\n- the quantity in the subscription (which may be variable if usage pricing, otherwise determined when creating the subscription)\n- the price brackets data\n\nTo determine which formula is correct, please see the price formula documentation.\n",
            "enum": ["fixed-fee", "flat-rate", "stairstep", "tiered", "volume"]
          }
        }
      },
      "fixed-fee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanPriceFormula"
          },
          {
            "type": "object",
            "required": ["price"],
            "properties": {
              "price": {
                "description": "For the very simple price when it's fixed and does not depend on the quantity chosen by customer.\n\nIf the price is 0, it's free.\n",
                "type": "number",
                "format": "double",
                "example": 99.95
              }
            }
          }
        ]
      },
      "flat-rate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanPriceFormula"
          },
          {
            "type": "object",
            "required": ["price"],
            "properties": {
              "price": {
                "description": "Flat-rate pricing is represented in a simple price per unit.\nSome examples:\n\n- $30 per unit\n- $0.10 per transaction\n- $50 per period\n\nIf the price is 0, it's free.\n",
                "type": "number",
                "format": "double",
                "example": 99.95
              },
              "maxQuantity": {
                "description": "If the value is `null`, it's assumed to be infinite.",
                "type": "integer",
                "example": 1
              }
            }
          }
        ]
      },
      "stairstep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanPriceFormula"
          },
          {
            "type": "object",
            "required": ["brackets"],
            "properties": {
              "brackets": {
                "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"stairstep\" example:\n\nPrice total | Max quantity | Description\n------------|--------------|------------\n$5          | 1            | 1\n$13         | 5            | 2 to 5\n$30         | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case.\n",
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "price": {
                      "description": "If the price is 0, it's free.",
                      "type": "number",
                      "format": "double",
                      "example": 99.95
                    },
                    "maxQuantity": {
                      "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "tiered": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanPriceFormula"
          },
          {
            "type": "object",
            "required": ["brackets"],
            "properties": {
              "brackets": {
                "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"tiered\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $9. $5 per apple for the first apple, then $4 per apple for the 2nd to 5th apple.\n",
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "price": {
                      "description": "If the price is 0, it's free.",
                      "type": "number",
                      "format": "double",
                      "example": 99.95
                    },
                    "maxQuantity": {
                      "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "volume": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanPriceFormula"
          },
          {
            "type": "object",
            "required": ["brackets"],
            "properties": {
              "brackets": {
                "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"volume\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $8. For 2 to 5 apples, the price is $4 per apple.\n",
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "price": {
                      "description": "If the price is 0, it's free.",
                      "type": "number",
                      "format": "double",
                      "example": 99.95
                    },
                    "maxQuantity": {
                      "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "PlanPeriod": {
        "type": "object",
        "required": ["unit", "length"],
        "properties": {
          "unit": {
            "description": "The unit of time",
            "type": "string",
            "enum": ["day", "week", "month", "year"]
          },
          "length": {
            "description": "The length of time",
            "type": "integer"
          }
        }
      },
      "PlanBillingTiming": {
        "type": "string",
        "default": "prepaid",
        "description": "The billing timing in relation to the service period.\nFor `prepaid` plans the customer pays when the service period starts,\nwhereas, for `postpaid` plans, the customer pays when the service period ends.\n",
        "enum": ["prepaid", "postpaid"]
      },
      "CommonScheduleInstruction": {
        "type": "object",
        "description": "The calculation instruction of scheduled time",
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "auto": "#/components/schemas/auto",
            "date-interval": "#/components/schemas/date-interval",
            "day-of-month": "#/components/schemas/day-of-month",
            "day-of-week": "#/components/schemas/day-of-week",
            "immediately": "#/components/schemas/immediately",
            "intelligent": "#/components/schemas/intelligent"
          }
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": ["auto", "intelligent", "immediately", "date-interval", "day-of-month", "day-of-week"]
          }
        },
        "required": ["method"]
      },
      "auto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          }
        ]
      },
      "date-interval": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
          },
          {
            "type": "object",
            "properties": {
              "duration": {
                "type": "integer",
                "description": "The number of the units",
                "minimum": 1
              },
              "unit": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/time-unit"
                  },
                  {
                    "$ref": "#/components/schemas/time-plural-unit"
                  }
                ]
              }
            },
            "required": ["duration", "unit"]
          }
        ]
      },
      "day-of-month": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
          },
          {
            "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
          },
          {
            "type": "object",
            "properties": {
              "day": {
                "type": "integer",
                "minimum": 1,
                "maximum": 31,
                "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n"
              },
              "time": {
                "$ref": "#/components/schemas/extended-time-iso8601"
              }
            },
            "required": ["day"]
          }
        ]
      },
      "CustomEventScheduleInstruction": {
        "type": "object",
        "description": "The calculation instruction of scheduled time",
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "date-interval": "#/components/schemas/date-interval",
            "day-of-month": "#/components/schemas/day-of-month",
            "day-of-week": "#/components/schemas/day-of-week"
          }
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": ["date-interval", "day-of-month", "day-of-week"]
          }
        },
        "required": ["method"]
      },
      "ServicePeriodAnchorInstruction": {
        "type": "object",
        "description": "Instruction for calculating the service period anchor.\nThis is used in conjunction with the **subscription start** to calculate the time the service period starts and ends.\n",
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "day-of-month": "#/components/schemas/day-of-month",
            "day-of-week": "#/components/schemas/day-of-week",
            "immediately": "#/components/schemas/immediately"
          }
        },
        "default": {
          "method": "immediately"
        },
        "required": ["method"],
        "properties": {
          "method": {
            "type": "string",
            "default": "immediately",
            "enum": ["immediately", "day-of-month", "day-of-week"]
          }
        }
      },
      "day-of-week": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
          },
          {
            "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
          },
          {
            "type": "object",
            "properties": {
              "day": {
                "$ref": "#/components/schemas/long-day-of-week"
              },
              "week": {
                "type": "string",
                "default": "next",
                "enum": ["next", "first-in-month", "last-in-month"]
              },
              "time": {
                "$ref": "#/components/schemas/extended-time-iso8601"
              }
            },
            "required": ["day"]
          }
        ]
      },
      "InvoiceRetryScheduleInstruction": {
        "type": "object",
        "description": "The calculation instruction of scheduled time",
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "date-interval": "#/components/schemas/date-interval",
            "day-of-month": "#/components/schemas/day-of-month",
            "day-of-week": "#/components/schemas/day-of-week",
            "immediately": "#/components/schemas/immediately",
            "intelligent": "#/components/schemas/intelligent"
          }
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": ["intelligent", "immediately", "date-interval", "day-of-month", "day-of-week"]
          }
        },
        "required": ["method"]
      },
      "immediately": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
          },
          {
            "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
          }
        ]
      },
      "time-unit": {
        "type": "string",
        "enum": ["second", "minute", "hour", "day", "month", "year"]
      },
      "time-plural-unit": {
        "type": "string",
        "enum": ["seconds", "minutes", "hours", "days", "months", "years"]
      },
      "intelligent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/CustomEventScheduleInstruction"
          },
          {
            "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
          },
          {
            "type": "object",
            "properties": {
              "duration": {
                "type": "integer",
                "description": "The number of the units",
                "minimum": 1
              },
              "unit": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/time-unit"
                  },
                  {
                    "$ref": "#/components/schemas/time-plural-unit"
                  }
                ]
              }
            },
            "required": ["duration", "unit"]
          }
        ]
      },
      "long-day-of-week": {
        "type": "string",
        "enum": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      },
      "extended-time-iso8601": {
        "type": "string",
        "description": "Extended ISO-8601 format of time",
        "pattern": "^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$"
      },
      "IssueTimeShiftInstruction": {
        "type": "object",
        "description": "The calculation instruction of billing time.\nThis is used in conjunction with the **service period anchor** to calculate the time the invoice is issued.\n",
        "required": ["chronology", "duration", "unit"],
        "properties": {
          "chronology": {
            "type": "string",
            "description": "The chronology of the billing time relatively to the service period start.",
            "enum": ["before"]
          },
          "duration": {
            "type": "integer",
            "description": "The number of the units",
            "minimum": 1
          },
          "unit": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/time-unit"
              },
              {
                "$ref": "#/components/schemas/time-plural-unit"
              }
            ]
          }
        }
      },
      "DueTimeShiftInstruction": {
        "type": "object",
        "description": "The calculation instruction of due time.\nThis is used in conjunction with the **billing anchor** to calculate due time of invoice.\nThe chronology of due time shift is always **after**.\n",
        "default": {
          "duration": 1,
          "unit": "hour"
        },
        "properties": {
          "duration": {
            "type": "integer",
            "description": "The number of the units",
            "minimum": 1
          },
          "unit": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/time-unit"
              },
              {
                "$ref": "#/components/schemas/time-plural-unit"
              }
            ]
          }
        },
        "required": ["duration", "unit"]
      },
      "InvoiceTimeShift": {
        "type": "object",
        "description": "The invoice time shift in conjunction with `billingTiming` allows to setup different billing use cases such as:\n\n- Bill immediately when the service period _starts_\n- Bill immediately after the service period _ends_\n- Bill _interval of time_ before the service period _starts_\n- Bill _interval of time_ after the service period _starts_\n- Bill _interval of time_ before the service period _ends_\n- Bill _interval of time_ after the service period _ends_\n",
        "properties": {
          "issueTimeShift": {
            "$ref": "#/components/schemas/IssueTimeShiftInstruction"
          },
          "dueTimeShift": {
            "$ref": "#/components/schemas/DueTimeShiftInstruction"
          }
        }
      },
      "Plan": {
        "type": "object",
        "required": ["name", "currency", "productId", "pricing"],
        "properties": {
          "id": {
            "description": "The plan identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "The plan name, displayed on invoices and receipts.",
            "type": "string"
          },
          "isActive": {
            "description": "If the plan is not active, customers cannot subscribe to the plan.",
            "type": "boolean"
          },
          "productId": {
            "description": "The related product identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "productOptions": {
            "type": "object",
            "description": "Name-value pairs to specify the product options.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "color": "red",
              "size": "xxl"
            }
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "currencySign": {
            "description": "Currency sign",
            "readOnly": true,
            "type": "string"
          },
          "pricing": {
            "$ref": "#/components/schemas/PlanPriceFormula"
          },
          "recurringInterval": {
            "description": "The service interval. For a one-time item, use `null`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanPeriod"
              },
              {
                "type": "object",
                "properties": {
                  "limit": {
                    "description": "The number of invoices this subscription will generate (if 1, it will not generate any beyond the initial subscription creation).  For example, set this property to `12`, when the `periodUnit` is month and the `periodLength` is 1, for a 1 year contract billed monthly.",
                    "type": "integer"
                  },
                  "billingTiming": {
                    "$ref": "#/components/schemas/PlanBillingTiming"
                  },
                  "periodAnchorInstruction": {
                    "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
                  }
                }
              }
            ]
          },
          "trial": {
            "type": "object",
            "description": "The trial. Set `null` if no trial.",
            "required": ["price", "period"],
            "properties": {
              "price": {
                "description": "The price of the trial. For a free trial, use `0`.",
                "type": "number",
                "format": "double"
              },
              "period": {
                "$ref": "#/components/schemas/PlanPeriod"
              }
            }
          },
          "setup": {
            "type": "object",
            "description": "The setup. Set `null` if no setup.",
            "required": ["price"],
            "properties": {
              "price": {
                "description": "The price of a setup - 0 is a valid value (for free)",
                "type": "number",
                "format": "double"
              }
            }
          },
          "invoiceTimeShift": {
            "description": "You can shift issue time and due time of invoices for this plan.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceTimeShift"
              }
            ]
          },
          "subscriptionCount": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of subscriptions associated with this plan"
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "createdTime": {
            "description": "Plan created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Plan updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "PlanEmbed": {
        "type": "object",
        "description": "Plan object",
        "readOnly": true,
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/Plan"
          }
        }
      },
      "InvoiceItem": {
        "type": "object",
        "required": ["type", "unitPrice"],
        "properties": {
          "id": {
            "description": "The website identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Invoice item's type",
            "type": "string",
            "enum": ["debit", "credit"]
          },
          "description": {
            "description": "Invoice item's description",
            "type": "string"
          },
          "unitPrice": {
            "description": "Invoice item's price",
            "type": "number",
            "format": "double"
          },
          "quantity": {
            "description": "Invoice item's quantity",
            "type": "integer"
          },
          "price": {
            "description": "Invoice item's total price",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "productId": {
            "description": "The product's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "discountAmount": {
            "description": "Invoice item discount amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "periodStartTime": {
            "description": "Start time",
            "type": "string",
            "format": "date-time"
          },
          "periodEndTime": {
            "description": "End time",
            "type": "string",
            "format": "date-time"
          },
          "periodNumber": {
            "description": "Invoice item subscription period number",
            "type": "integer"
          },
          "createdTime": {
            "description": "Invoice item created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Invoice item updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/ProductLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductEmbed"
                },
                {
                  "$ref": "#/components/schemas/PlanEmbed"
                }
              ]
            }
          }
        }
      },
      "InvoiceTax": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "amount": {
            "description": "Tax amount",
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": "Tax description"
          }
        }
      },
      "InvoiceDiscount": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "redemptionCode": {
            "description": "Coupon's redemption code",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "redemptionId": {
            "description": "Redemption ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "amount": {
            "description": "Total amount that was discounted by this Coupon",
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": "Discount description"
          }
        }
      },
      "gateway-name": {
        "type": "string",
        "description": "The payment gateway name",
        "enum": [
          "A1Gateway",
          "AmexVPC",
          "ApcoPay",
          "AsiaPaymentGateway",
          "AstroPay",
          "AstroPayCard",
          "AuthorizeNet",
          "Bambora",
          "BitPay",
          "BlueSnap",
          "BraintreePayments",
          "Cardknox",
          "Cashflows",
          "CASHlib",
          "CashToCode",
          "CauriPayment",
          "Cayan",
          "Chase",
          "Citadel",
          "Clearhaus",
          "CODVoucher",
          "Conekta",
          "Coppr",
          "Credorax",
          "Cryptonator",
          "DataCash",
          "Dengi",
          "ecoPayz",
          "EcorePay",
          "Elavon",
          "eMerchantPay",
          "EPG",
          "EPro",
          "Finrax",
          "Flexepin",
          "FinTecSystems",
          "FundSend",
          "Forte",
          "GET",
          "Gigadat",
          "GlobalOnePay",
          "Gooney",
          "Gpaysafe",
          "Greenbox",
          "iCanPay",
          "iCheque",
          "iDebit",
          "Ilixium",
          "Ingenico",
          "INOVAPAY",
          "Inovio",
          "Intuit",
          "InstaDebit",
          "IpayOptions",
          "JetPay",
          "Jeton",
          "LPG",
          "Moneris",
          "MtaPay",
          "Netbanking",
          "Neteller",
          "NinjaWallet",
          "NMI",
          "OchaPay",
          "Onlineueberweisen",
          "Optimal",
          "Pagsmile",
          "Panamerican",
          "ParamountEft",
          "PandaGateway",
          "Pay4Fun",
          "PayCash",
          "Payeezy",
          "Payflow",
          "PaymenTechnologies",
          "PayPal",
          "Payr",
          "Paysafe",
          "Paysafecash",
          "Payvision",
          "Plugnpay",
          "Prosa",
          "Realex",
          "Realtime",
          "Redsys",
          "Rotessa",
          "RPN",
          "Sagepay",
          "SeamlessChex",
          "SecureTrading",
          "Skrill",
          "SmartInvoice",
          "SMSVoucher",
          "Sofort",
          "SparkPay",
          "StaticGateway",
          "Stripe",
          "Tap",
          "TestProcessor",
          "ToditoCash",
          "UPayCard",
          "USAePay",
          "VantivLitle",
          "vegaaH",
          "Wallet88",
          "Walpay",
          "Wirecard",
          "WorldlineAtosFrankfurt",
          "Worldpay",
          "Zotapay"
        ]
      },
      "acquirer-name": {
        "type": "string",
        "description": "The acquirer name",
        "enum": [
          "Alipay",
          "AIB",
          "ApcoPay",
          "AsiaPaymentGateway",
          "AstroPay Card",
          "Ipay Options",
          "B+S",
          "Bambora",
          "BitPay",
          "Bank of America",
          "Bank of Moscow",
          "Bank of Rebilly",
          "Bank One",
          "BMO Harris Bank",
          "Borgun",
          "BraintreePayments",
          "Cardknox",
          "CASHlib",
          "Catalunya Caixa",
          "Chase",
          "ChinaUnionPay",
          "CIM",
          "Citadel",
          "Clearhaus",
          "CODVoucher",
          "Conekta",
          "Coppr",
          "Credorax",
          "Cryptonator",
          "ecoPayz",
          "EcorePay",
          "Elavon",
          "EMS",
          "EPG",
          "Fifth Third Bank",
          "Finrax",
          "First Data Buypass",
          "First Data Nashville",
          "First Data North",
          "First Data Omaha",
          "FinTecSystems",
          "Flexepin",
          "Forte",
          "FundSend",
          "Gigadat",
          "Global East",
          "Gooney",
          "Gpaysafe",
          "Heartland",
          "HSBC",
          "iCanPay",
          "iCheque",
          "Ilixium",
          "Ingenico",
          "INOVAPAY",
          "Intuit",
          "Jeton",
          "LPG",
          "Masapay",
          "Merrick",
          "Mission Valley Bank",
          "Moneris",
          "NATWEST",
          "Netbanking",
          "Neteller",
          "NinjaWallet",
          "NMI",
          "OchaPay",
          "Onlineueberweisen",
          "Other",
          "Panamerican",
          "Panda Bank",
          "Paramount",
          "ParamountEft",
          "Pay4fun",
          "PayCash",
          "PaymenTechnologies",
          "Paynetics",
          "PayPal",
          "Payr",
          "Payvision",
          "Peoples Trust Company",
          "Privatbank",
          "Prosa",
          "QQPay",
          "RBC",
          "RBS WorldPay",
          "RealTime",
          "Rotessa",
          "Skrill",
          "SmartInvoice",
          "SMSVoucher",
          "Sofort",
          "SparkPay",
          "State Bank of Mauritius",
          "Stripe",
          "TBI",
          "TestProcessor",
          "ToditoCash",
          "TrustPay",
          "TSYS",
          "UPayCard",
          "Vantiv",
          "VoicePay",
          "Wallet88",
          "WeChat Pay",
          "Wells Fargo",
          "Wing Hang Bank",
          "Wirecard",
          "WorldPay",
          "Zotapay"
        ]
      },
      "ThreeDSecureResult": {
        "type": "object",
        "readOnly": true,
        "required": ["enrolled", "authenticated", "liability"],
        "properties": {
          "enrolled": {
            "description": "Is the cardholder enrolled in 3D Secure",
            "type": "string",
            "enum": ["yes", "no", "invalid card/timeout", "unavailable"]
          },
          "authenticated": {
            "description": "The 3D Secure entry Auth Response Status",
            "type": "string",
            "enum": ["yes", "no", "not applicable", "attempted"]
          },
          "liability": {
            "type": "string",
            "enum": ["protected", "not protected", "protected (attempt)"]
          }
        }
      },
      "RiskMetadata": {
        "type": "object",
        "properties": {
          "ipAddress": {
            "description": "The customer's IP",
            "type": "string",
            "format": "ipv4"
          },
          "isProxy": {
            "description": "True if customer's ip address is related to proxy",
            "type": "boolean",
            "readOnly": true
          },
          "isVpn": {
            "description": "True if customer's ip address is related to VPN",
            "type": "boolean",
            "readOnly": true
          },
          "isTor": {
            "description": "True if customer's ip address is related to TOR",
            "type": "boolean",
            "readOnly": true
          },
          "isHosting": {
            "description": "True if customer's ip address is related to hosting",
            "type": "boolean",
            "readOnly": true
          },
          "vpnServiceName": {
            "description": "VPN service name, if available",
            "type": "string",
            "readOnly": true
          },
          "isp": {
            "description": "Internet Service Provider name, if available",
            "type": "string",
            "readOnly": true
          },
          "country": {
            "description": "Country ISO Alpha-2 code for specified ipAddress",
            "maxLength": 2,
            "type": "string",
            "readOnly": true,
            "example": "US"
          },
          "region": {
            "description": "Region for specified ipAddress",
            "type": "string",
            "readOnly": true,
            "example": "NY"
          },
          "city": {
            "description": "City for specified ipAddress",
            "type": "string",
            "readOnly": true,
            "example": "New York"
          },
          "latitude": {
            "description": "Latitude for specified ipAddress",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "longitude": {
            "description": "Longitude for specified ipAddress",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "postalCode": {
            "description": "Postal code for specified ipAddress",
            "type": "string",
            "maxLength": 10,
            "readOnly": true
          },
          "timeZone": {
            "description": "Time zone for specified ipAddress",
            "type": "string",
            "readOnly": true,
            "example": "America/New_York"
          },
          "accuracyRadius": {
            "description": "Accuracy radius for specified ipAddress (kilometers)",
            "type": "integer",
            "readOnly": true
          },
          "fingerprint": {
            "description": "The fingerprint",
            "type": "string"
          },
          "httpHeaders": {
            "description": "HTTP headers",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "User-Agent": "Mozilla/5.0",
              "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            }
          },
          "distance": {
            "description": "Distance between IP Address and Billing Address geolocation (kilometers)",
            "type": "integer",
            "readOnly": true
          },
          "score": {
            "description": "Risk score computed per all the factors",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "TransactionNotificationUrl": {
        "description": "The URL where a server-to-server POST notification will be sent.  It  will be sent when the\ntransaction's result is finalized after a timeout or an offsite interaction. Do not trust the\nnotification; follow with a GET request to confirm the result of the transaction. Please\nrespond with a 2xx HTTP status code, or we will reattempt the request again.\nThe 2 placeholders are available to use in this URI: `{id}` and `{result}`.\n",
        "type": "string",
        "format": "uri"
      },
      "TransactionRedirectUrl": {
        "description": "The URL to redirect the end-user when an offsite transaction is completed.\nThe 2 placeholders are available to use in this URI: `{id}` and `{result}`.\nDefaults to the website's configured URL.\n",
        "type": "string",
        "format": "uri"
      },
      "AmountAdjustment": {
        "type": "object",
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "discount": "#/components/schemas/discount",
            "partial": "#/components/schemas/partial"
          }
        },
        "properties": {
          "method": {
            "type": "string",
            "enum": ["none", "partial", "discount"]
          }
        },
        "required": ["method"]
      },
      "discount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountAdjustment"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "description": "The payment amount discount",
                "type": "number",
                "format": "float"
              },
              "type": {
                "description": "The payment amount discount type",
                "type": "string",
                "enum": ["percent", "fixed"]
              }
            },
            "required": ["value", "type"]
          }
        ]
      },
      "partial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountAdjustment"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "description": "The payment amount",
                "type": "number",
                "format": "float"
              },
              "type": {
                "description": "The payment amount type",
                "type": "string",
                "enum": ["percent", "fixed"]
              }
            },
            "required": ["value", "type"]
          }
        ]
      },
      "PaymentRetry": {
        "type": "object",
        "properties": {
          "attempts": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "scheduleInstruction": {
                  "$ref": "#/components/schemas/CommonScheduleInstruction"
                },
                "paymentInstruction": {
                  "$ref": "#/components/schemas/AmountAdjustment"
                }
              },
              "required": ["scheduleInstruction", "paymentInstruction"]
            }
          },
          "afterAttemptPolicy": {
            "description": "The policy on the attempt finishes",
            "type": "string",
            "enum": ["none", "change-subscription-renewal-time"]
          },
          "afterRetryEndPolicy": {
            "description": "The policy on the retry ends",
            "type": "string",
            "enum": ["none", "cancel-subscription"]
          }
        },
        "required": ["attempts", "afterAttemptPolicy", "afterRetryEndPolicy"]
      },
      "GatewayAccountLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["gatewayAccount"]
          }
        },
        "required": ["rel"]
      },
      "PaymentCardLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["paymentCard"]
          }
        },
        "required": ["rel"]
      },
      "ParentTransactionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["parentTransaction"]
          }
        },
        "required": ["rel"]
      },
      "RetriedTransactionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["retriedTransaction"]
          }
        },
        "required": ["rel"]
      },
      "ApprovalUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["approvalUrl"]
          }
        },
        "required": ["rel"]
      },
      "CancelUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["cancelUrl"]
          }
        },
        "required": ["rel"]
      },
      "RefundUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["refundUrl"]
          }
        },
        "required": ["rel"]
      },
      "DisputeLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["dispute"]
          }
        },
        "required": ["rel"]
      },
      "InvoicesLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["invoices"]
          }
        },
        "required": ["rel"]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The transaction identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Transaction type",
            "type": "string",
            "readOnly": true,
            "enum": ["authorize", "capture", "credit", "refund", "sale", "void"]
          },
          "status": {
            "description": "Transaction status",
            "type": "string",
            "readOnly": true,
            "enum": [
              "completed",
              "conn-error",
              "disputed",
              "never-sent",
              "partially-refunded",
              "pending",
              "refunded",
              "sending",
              "timeout",
              "voided",
              "waiting-approval",
              "waiting-capture",
              "waiting-gateway",
              "waiting-refund"
            ]
          },
          "result": {
            "description": "Transaction result",
            "type": "string",
            "readOnly": true,
            "enum": ["abandoned", "approved", "canceled", "declined", "unknown"]
          },
          "amount": {
            "description": "The transactions's amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "currency": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "purchaseAmount": {
            "description": "The transactions's purchase amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "purchaseCurrency": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "requestAmount": {
            "description": "The transactions's amount received in the payment request",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "requestCurrency": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "reportAmount": {
            "description": "The transactions's amount to report",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "reportCurrency": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "parentTransactionId": {
            "description": "The transactions's parent ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "readOnly": true
          },
          "childTransactions": {
            "description": "The child transaction IDs",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            }
          },
          "invoiceIds": {
            "description": "The invoice IDs related to transaction",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            }
          },
          "subscriptionIds": {
            "description": "The subscription IDs related to transaction's invoice(s)",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            }
          },
          "planIds": {
            "description": "The plan IDs related to transaction's subscription(s)",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            }
          },
          "isRebill": {
            "type": "boolean",
            "readOnly": true
          },
          "rebillNumber": {
            "description": "The transactions's rebill number",
            "type": "integer",
            "readOnly": true
          },
          "gatewayAccountId": {
            "description": "The transactions's Gateway Account ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "readOnly": true
          },
          "gatewayTransactionId": {
            "description": "The gateway's transaction ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "readOnly": true
          },
          "gateway": {
            "type": "object",
            "description": "The related gateway information",
            "readOnly": true,
            "properties": {
              "response": {
                "description": "The gateway's response",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "The gateway's response code",
                    "type": "string"
                  },
                  "message": {
                    "description": "The gateway's response message",
                    "type": "string"
                  },
                  "type": {
                    "description": "The gateway's response type",
                    "type": "string"
                  },
                  "originalCode": {
                    "description": "The raw, unmapped gateway's response code",
                    "type": "string"
                  },
                  "originalMessage": {
                    "description": "The raw, unmapped gateway's response message",
                    "type": "string"
                  }
                }
              },
              "avsResponse": {
                "description": "The AVS gateway's response",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "The response code",
                    "type": "string"
                  },
                  "message": {
                    "description": "The response message",
                    "type": "string"
                  },
                  "originalCode": {
                    "description": "The raw response code",
                    "type": "string"
                  },
                  "originalMessage": {
                    "description": "The raw response message",
                    "type": "string"
                  }
                }
              },
              "cvvResponse": {
                "description": "The CVV gateway's response",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "The response code",
                    "type": "string"
                  },
                  "message": {
                    "description": "The response message",
                    "type": "string"
                  },
                  "originalCode": {
                    "description": "The raw response code",
                    "type": "string"
                  },
                  "originalMessage": {
                    "description": "The raw response message",
                    "type": "string"
                  }
                }
              }
            }
          },
          "gatewayName": {
            "readOnly": true,
            "description": "Payment Gateway name, available only when transaction use gateway, else null",
            "allOf": [
              {
                "$ref": "#/components/schemas/gateway-name"
              }
            ]
          },
          "acquirerName": {
            "readOnly": true,
            "description": "Acquirer name, available only when transaction use gateway, else null",
            "allOf": [
              {
                "$ref": "#/components/schemas/acquirer-name"
              }
            ]
          },
          "websiteId": {
            "description": "Website's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "readOnly": true
          },
          "customerId": {
            "description": "Customer's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "readOnly": true
          },
          "method": {
            "description": "Payment Method",
            "allOf": [
              {
                "$ref": "#/components/schemas/Method"
              }
            ]
          },
          "velocity": {
            "description": "The number of transactions by the same customer in the past 24 hours",
            "type": "integer"
          },
          "revision": {
            "description": "The number of times the transaction data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
            "type": "integer",
            "readOnly": true
          },
          "referenceData": {
            "description": "Transaction reference data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "gatewayTransactionId": "GAT123"
            },
            "readOnly": true,
            "nullable": true
          },
          "bin": {
            "description": "Payment Card BIN",
            "type": "string",
            "format": "bin",
            "readOnly": true
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          "billingAddress": {
            "description": "Billing Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "has3ds": {
            "type": "boolean",
            "readOnly": true
          },
          "3ds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureResult"
              }
            ]
          },
          "hasDcc": {
            "description": "True if transaction has Dynamic Currency Conversion applied",
            "type": "boolean",
            "readOnly": true
          },
          "dcc": {
            "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false",
            "type": "object",
            "readOnly": true,
            "properties": {
              "base": {
                "type": "object",
                "description": "Initial amount and currency to convert from",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "double"
                  },
                  "currency": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CurrencyCode"
                      }
                    ]
                  }
                }
              },
              "quote": {
                "type": "object",
                "description": "Suggested amount and currency to convert to",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "double"
                  },
                  "currency": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CurrencyCode"
                      }
                    ]
                  }
                }
              },
              "usdMarkup": {
                "description": "The amount of markup translated to USD",
                "type": "number",
                "format": "double"
              },
              "outcome": {
                "type": "string",
                "description": "Dynamic Currency Conversion outcome",
                "enum": ["rejected", "selected", "unknown"]
              }
            }
          },
          "hasBumpOffer": {
            "description": "True if transaction has a Bump offer",
            "type": "boolean",
            "readOnly": true
          },
          "bumpOffer": {
            "description": "Bump offer information. Null if hasBumpOffer is false",
            "type": "object",
            "readOnly": true,
            "properties": {
              "order": {
                "type": "object",
                "description": "Initial amount and currency",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "double"
                  },
                  "currency": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CurrencyCode"
                      }
                    ]
                  }
                }
              },
              "bump": {
                "type": "object",
                "description": "Bump amount and currency",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "double"
                  },
                  "currency": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CurrencyCode"
                      }
                    ]
                  }
                }
              },
              "bonus": {
                "type": "object",
                "description": "Bonus amount and currency",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "double"
                  },
                  "currency": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CurrencyCode"
                      }
                    ]
                  }
                }
              },
              "usdOrder": {
                "description": "The amount of initial amount translated to USD",
                "type": "number",
                "format": "double"
              },
              "usdBump": {
                "description": "The amount of bump amount translated to USD",
                "type": "number",
                "format": "double"
              },
              "usdBonus": {
                "description": "The amount of bonus amount translated to USD",
                "type": "number",
                "format": "double"
              },
              "version": {
                "description": "The name of the version that was picked (useful for measuring split tests)",
                "type": "string"
              },
              "language": {
                "description": "The language of the bump offer that was displayed to user (useful for finding any translation problems)",
                "type": "string"
              },
              "outcome": {
                "type": "string",
                "description": "Bump offer outcome",
                "enum": ["rejected", "selected", "unknown"]
              }
            }
          },
          "riskScore": {
            "description": "The transactions's risk score",
            "type": "integer",
            "readOnly": true
          },
          "riskMetadata": {
            "description": "Risk metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskMetadata"
              }
            ]
          },
          "notificationUrl": {
            "$ref": "#/components/schemas/TransactionNotificationUrl"
          },
          "redirectUrl": {
            "$ref": "#/components/schemas/TransactionRedirectUrl"
          },
          "retryInstruction": {
            "$ref": "#/components/schemas/PaymentRetry"
          },
          "retryNumber": {
            "type": "integer",
            "readOnly": true,
            "description": "The position in the sequence of retries"
          },
          "retriedTransactionId": {
            "readOnly": true,
            "description": "The retried transaction ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "retriesResult": {
            "type": "string",
            "readOnly": true,
            "description": "Retries sequence result",
            "enum": ["approved", "canceled", "declined", "scheduled"]
          },
          "isRetry": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if this transaction is retry."
          },
          "billingDescriptor": {
            "type": "string",
            "readOnly": true,
            "description": "The billing descriptor that appears on the periodic billing statement. Commonly 12 or fewer characters for a credit card statement."
          },
          "description": {
            "type": "string",
            "description": "The payment description",
            "maxLength": 255
          },
          "isDisputed": {
            "description": "True if transaction is disputed",
            "type": "boolean",
            "readOnly": true
          },
          "isReconciled": {
            "description": "True if the transaction has been verified with gateway batch data",
            "type": "boolean",
            "readOnly": true
          },
          "hadDiscrepancy": {
            "description": "True if the transaction has been updated due to a disprepancy with its source of truth",
            "type": "boolean",
            "readOnly": true
          },
          "orderId": {
            "deprecated": true,
            "description": "The transactions's order ID.  This ID must be unique within a 24 hour period. This field was renamed to the `requestId`.",
            "type": "string"
          },
          "requestId": {
            "description": "The transactions's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.",
            "type": "string"
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "scheduledTime": {
            "type": "string",
            "description": "The time the transaction is scheduled for collection",
            "format": "date-time"
          },
          "processedTime": {
            "description": "Transaction processed time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "createdTime": {
            "description": "Transaction created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Transaction updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/WebsiteLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                },
                {
                  "$ref": "#/components/schemas/GatewayAccountLink"
                },
                {
                  "$ref": "#/components/schemas/PaymentCardLink"
                },
                {
                  "$ref": "#/components/schemas/ParentTransactionLink"
                },
                {
                  "$ref": "#/components/schemas/RetriedTransactionLink"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceLink"
                },
                {
                  "$ref": "#/components/schemas/ApprovalUrlLink"
                },
                {
                  "$ref": "#/components/schemas/CancelUrlLink"
                },
                {
                  "$ref": "#/components/schemas/RefundUrlLink"
                },
                {
                  "$ref": "#/components/schemas/DisputeLink"
                },
                {
                  "$ref": "#/components/schemas/InvoicesLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ParentTransactionEmbed"
                },
                {
                  "$ref": "#/components/schemas/RetriedTransactionEmbed"
                },
                {
                  "$ref": "#/components/schemas/GatewayAccountEmbed"
                },
                {
                  "$ref": "#/components/schemas/CustomerEmbed"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceEmbed"
                },
                {
                  "$ref": "#/components/schemas/WebsiteEmbed"
                },
                {
                  "$ref": "#/components/schemas/PaymentCardEmbed"
                },
                {
                  "$ref": "#/components/schemas/BankAccountEmbed"
                },
                {
                  "$ref": "#/components/schemas/InvoicesEmbed"
                }
              ]
            }
          }
        }
      },
      "ParentTransactionEmbed": {
        "type": "object",
        "description": "Retried Transaction object",
        "readOnly": true,
        "properties": {
          "parentTransaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "RetriedTransactionEmbed": {
        "type": "object",
        "description": "Parent Transaction object",
        "readOnly": true,
        "properties": {
          "retriedTransaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "schemas_ResourceId": {
        "type": "string",
        "description": "The resource ID. Defaults to UUID v4",
        "maxLength": 50,
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
        "pattern": "^[@~\\-\\.\\w\\d]+$"
      },
      "schemas_Method": {
        "type": "string",
        "description": "The payment method",
        "enum": [
          "payment-card",
          "ach",
          "bank-account",
          "cash",
          "check",
          "paypal",
          "Alipay",
          "ApplePay",
          "AstroPay-Card",
          "bank-transfer",
          "bitcoin",
          "Boleto",
          "cash-deposit",
          "CASHlib",
          "CashToCode",
          "China-UnionPay",
          "Conekta-oxxo",
          "domestic-cards",
          "echeck",
          "ecoPayz",
          "ecoVoucher",
          "EPS",
          "ePay-bg",
          "Flexepin",
          "Giropay",
          "GooglePay",
          "Gpaysafe",
          "iDebit",
          "iDEAL",
          "INOVAPAY-pin",
          "INOVAPAY-wallet",
          "InstaDebit",
          "instant-bank-transfer",
          "Interac",
          "Interac-online",
          "Interac-eTransfer",
          "invoice",
          "Jeton",
          "Klarna",
          "LPG-online",
          "LPG-payment-card",
          "miscellaneous",
          "Netbanking",
          "Neteller",
          "Nordea-Solo",
          "OchaPay",
          "online-bank-transfer",
          "Onlineueberweisen",
          "Pagsmile-lottery",
          "Pagsmile-deposit-express",
          "Pagsmile-boleto",
          "PayCash",
          "Paysafecard",
          "Pay4Fun",
          "PinPay",
          "phone",
          "POLi",
          "Przelewy24",
          "QQPay",
          "Resurs",
          "SEPA",
          "Skrill",
          "Skrill-Rapid-Transfer",
          "SMSVoucher",
          "SparkPay",
          "swift-dbt",
          "ToditoCash-card",
          "Trustly",
          "UPayCard",
          "voucher",
          "WeChat-Pay",
          "Zotapay"
        ]
      },
      "payment-card-brands": {
        "type": "string",
        "description": "Payment Card brand",
        "enum": [
          "Visa",
          "MasterCard",
          "American Express",
          "Discover",
          "Maestro",
          "Solo",
          "Electron",
          "JCB",
          "Voyager",
          "Diners Club",
          "Switch",
          "Laser",
          "China UnionPay",
          "AstroPay Card"
        ]
      },
      "and": {
        "type": "object",
        "description": "Logical AND",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/logical"
          }
        ]
      },
      "between": {
        "type": "object",
        "description": "Between condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "min": {
                "type": "string"
              },
              "max": {
                "type": "string"
              }
            },
            "required": ["path", "min", "max"]
          }
        ]
      },
      "equals": {
        "type": "object",
        "description": "Equals condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "gt": {
        "type": "object",
        "description": "Greater than condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "gte": {
        "type": "object",
        "description": "Greater than or equals condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "in": {
        "type": "object",
        "description": "In condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": ["path", "values"]
          }
        ]
      },
      "lt": {
        "type": "object",
        "description": "Less than condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "lte": {
        "type": "object",
        "description": "Less than or equals condition",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/compare"
          }
        ]
      },
      "not": {
        "type": "object",
        "description": "Logical NOT",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/logical-not"
          }
        ]
      },
      "or": {
        "type": "object",
        "description": "Logical OR",
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "$ref": "#/components/schemas/logical"
          }
        ]
      },
      "Condition": {
        "type": "object",
        "discriminator": {
          "propertyName": "op",
          "mapping": {
            "and": "#/components/schemas/and",
            "between": "#/components/schemas/between",
            "equals": "#/components/schemas/equals",
            "gt": "#/components/schemas/gt",
            "gte": "#/components/schemas/gte",
            "in": "#/components/schemas/in",
            "lt": "#/components/schemas/lt",
            "lte": "#/components/schemas/lte",
            "not": "#/components/schemas/not",
            "or": "#/components/schemas/or"
          }
        },
        "properties": {
          "op": {
            "type": "string",
            "description": "The condition operation",
            "enum": ["and", "or", "not", "between", "equals", "in", "gt", "gte", "lt", "lte"]
          }
        },
        "required": ["op"]
      },
      "logical": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "minItems": 2,
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": ["conditions"]
      },
      "logical-not": {
        "type": "object",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/Condition"
          }
        },
        "required": ["condition"],
        "example": {
          "operation": "not",
          "condition": {
            "operation": "equals",
            "path": "/name",
            "value": "John Dou"
          }
        }
      },
      "compare": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["path", "value"]
      },
      "schemas_SelfLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["self"]
          }
        },
        "required": ["rel"]
      },
      "OnBoardingUrlLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["onBoardingUrl"]
          }
        },
        "required": ["rel"]
      },
      "A1Gateway": {
        "description": "A1Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "A1Gateway credentials object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "A1Gateway account ID"
                  },
                  "password": {
                    "type": "string",
                    "description": "A1Gateway password",
                    "format": "password"
                  }
                },
                "required": ["accountId", "password"]
              },
              "mpi": {
                "$ref": "#/components/schemas/A1GatewayMpis"
              }
            }
          }
        ]
      },
      "AmexVPC": {
        "description": "AmexVPC config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "AmexVPC credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Merchant ID"
                  },
                  "accessCode": {
                    "type": "string",
                    "description": "Access Code",
                    "format": "password"
                  },
                  "user": {
                    "type": "string",
                    "description": "User (used for refund, void and capture)"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password (used for refund, void and capture)",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "accessCode", "user", "password"]
              },
              "settings": {
                "type": "object",
                "description": "AmexVPC settings object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "Virtual Payment Client URL"
                  }
                },
                "required": ["url"]
              }
            }
          }
        ]
      },
      "ApcoPay": {
        "description": "ApcoPay config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "ApcoPay credentials object",
                "properties": {
                  "profileID": {
                    "type": "string",
                    "description": "ApcoPay profile ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "ApcoPay secret word",
                    "format": "password"
                  },
                  "MerchantID": {
                    "type": "string",
                    "description": "ApcoPay merchant ID"
                  },
                  "MerchantPassword": {
                    "type": "string",
                    "description": "ApcoPay merchant password",
                    "format": "password"
                  }
                },
                "required": ["profileID", "secretWord", "MerchantID", "MerchantPassword"]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "ApcoPay's method",
                    "enum": ["AFTERPAY", "IDEAL", "CREDITCLICK", "BANCONTACT", "ONLINEUBERWEISEN"]
                  }
                },
                "required": ["method"]
              }
            }
          }
        ]
      },
      "AsiaPaymentGateway": {
        "description": "AsiaPaymentGateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "AsiaPaymentGateway credentials object",
                "properties": {
                  "merchantNumber": {
                    "type": "string",
                    "description": "AsiaPaymentGateway merchant number"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "AsiaPaymentGateway secret key for hash",
                    "format": "password"
                  }
                },
                "required": ["merchantNumber", "secretKey"]
              }
            }
          }
        ]
      },
      "AstroPay": {
        "description": "AstroPay config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "AstroPay credentials object",
                "properties": {
                  "x_login": {
                    "type": "string",
                    "description": "AstroPay login"
                  },
                  "x_tran_key": {
                    "type": "string",
                    "description": "AstroPay transaction key",
                    "format": "password"
                  },
                  "secret_key": {
                    "type": "string",
                    "description": "AstroPay secret key",
                    "format": "password"
                  },
                  "web_pay_login": {
                    "type": "string",
                    "description": "AstroPay web pay status login"
                  },
                  "web_pay_tran_key": {
                    "type": "string",
                    "description": "AstroPay web pay status password",
                    "format": "password"
                  }
                },
                "required": ["x_login", "x_tran_key", "secret_key", "web_pay_login", "web_pay_tran_key"]
              },
              "settings": {
                "type": "object",
                "description": "AstroPay settings object",
                "properties": {
                  "banks": {
                    "type": "array",
                    "description": "list of banks which will show on hook page",
                    "items": {
                      "$ref": "#/components/schemas/AstroPayBanks"
                    }
                  },
                  "skipStep": {
                    "type": "boolean",
                    "description": "Skip step for user to enter their personal information."
                  }
                }
              }
            }
          }
        ]
      },
      "AstroPayCard": {
        "description": "AstroPay Card config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "AstroPay Card credentials object",
                "properties": {
                  "x_login": {
                    "type": "string",
                    "description": "AstroPay Card login"
                  },
                  "x_tran_key": {
                    "type": "string",
                    "description": "AstroPay Card transaction key",
                    "format": "password"
                  },
                  "secret_key": {
                    "type": "string",
                    "description": "AstroPay Card secret key",
                    "format": "password"
                  }
                },
                "required": ["x_login", "x_tran_key", "secret_key"]
              }
            }
          }
        ]
      },
      "AuthorizeNet": {
        "description": "AuthorizeNet Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiLoginId": {
                    "type": "string",
                    "description": "AuthorizeNet Gateway api login ID"
                  },
                  "transactionKey": {
                    "description": "AuthorizeNet Gateway Transaction Key",
                    "type": "string",
                    "format": "password"
                  }
                },
                "required": ["apiLoginId", "transactionKey"]
              }
            }
          }
        ]
      },
      "Bambora": {
        "description": "Bambora Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Bambora Gateway merchant ID"
                  },
                  "apiPasscode": {
                    "type": "string",
                    "description": "Bambora Gateway API Passcode",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "apiPasscode"]
              }
            }
          }
        ]
      },
      "BitPay": {
        "description": "BitPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "BitPay credentials object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "BitPay merchant API token",
                    "format": "password"
                  }
                },
                "required": ["token"]
              }
            }
          }
        ]
      },
      "BlueSnap": {
        "description": "BlueSnap config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "BlueSnap credentials object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "BlueSnap merchant's api username."
                  },
                  "password": {
                    "type": "string",
                    "description": "BlueSnap merchant's api password.",
                    "format": "password"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        ]
      },
      "BraintreePayments": {
        "description": "BraintreePayments Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "BraintreePayments Public Key"
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "BraintreePayments Private Key",
                    "format": "password"
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "BraintreePayments merchant ID",
                    "format": "password"
                  },
                  "merchantAccountId": {
                    "type": "string",
                    "description": "BraintreePayments merchant account ID",
                    "format": "password"
                  }
                },
                "required": ["publicKey", "privateKey", "merchantId", "merchantAccountId"]
              }
            }
          }
        ]
      },
      "CASHlib": {
        "description": "CASHlib config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "CASHlib credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "CASHlib API Key",
                    "format": "password"
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "CASHlib merchant id"
                  }
                },
                "required": ["apiKey", "merchantId"]
              }
            }
          }
        ]
      },
      "CODVoucher": {
        "description": "COD Voucher config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "COD Voucher credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "COD Voucher API key",
                    "format": "password"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "COD Voucher API secret",
                    "format": "password"
                  }
                },
                "required": ["apiKey", "apiSecret"]
              }
            }
          }
        ]
      },
      "Cardknox": {
        "description": "Cardknox Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "xKey": {
                    "type": "string",
                    "description": "Cardknox xKey",
                    "format": "password"
                  }
                },
                "required": ["xKey"]
              }
            }
          }
        ]
      },
      "CashToCode": {
        "description": "CashToCode config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "CashToCode credentials object",
                "properties": {
                  "cashToCodeUsername": {
                    "type": "string",
                    "description": "CashToCode credentials Username"
                  },
                  "cashToCodePassword": {
                    "type": "string",
                    "description": "CashToCode credentials password",
                    "format": "password"
                  },
                  "merchantUsername": {
                    "type": "string",
                    "description": "Merchant credentials Username"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "Merchant credentials password",
                    "format": "password"
                  }
                },
                "required": ["cashToCodeUsername", "cashToCodePassword", "merchantUsername", "merchantPassword"]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "skipAmountSelection": {
                    "type": "boolean",
                    "description": "Skip amount selection screen",
                    "default": false
                  }
                }
              }
            }
          }
        ]
      },
      "Cashflows": {
        "description": "Cashflows Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "authId": {
                    "type": "string",
                    "description": "Cashflows Gateway auth ID"
                  },
                  "authPassword": {
                    "type": "string",
                    "description": "Cashflows Gateway auth password",
                    "format": "password"
                  }
                },
                "required": ["authPassword", "authId"]
              }
            }
          }
        ]
      },
      "CauriPayment": {
        "description": "CauriPayment config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "CauriPayment credentials object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "CauriPayment merchant's public key."
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "CauriPayment merchant's private key.",
                    "format": "password"
                  }
                },
                "required": ["publicKey", "privateKey"]
              }
            }
          }
        ]
      },
      "Cayan": {
        "description": "Cayan Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantSiteId": {
                    "type": "string",
                    "description": "Cayan Gateway merchant site ID"
                  },
                  "merchantName": {
                    "type": "string",
                    "description": "Cayan Gateway merchant name"
                  },
                  "merchantKey": {
                    "type": "string",
                    "description": "Cayan Gateway merchant key",
                    "format": "password"
                  }
                },
                "required": ["merchantSiteId", "merchantName", "merchantKey"]
              }
            }
          }
        ]
      },
      "Chase": {
        "description": "Chase Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Chase Gateway Net Connect username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Chase Gateway Net Connect password",
                    "format": "password"
                  },
                  "coNumber": {
                    "type": "string",
                    "description": "Chase Gateway CO Number used for delimited file reports"
                  },
                  "divisionId": {
                    "type": "string",
                    "description": "Chase Gateway division ID"
                  },
                  "partialAuth": {
                    "type": "boolean",
                    "description": "Support for Partial Auths",
                    "default": false
                  }
                },
                "required": ["username", "password", "coNumber", "divisionId", "partialAuth"]
              }
            }
          }
        ]
      },
      "Citadel": {
        "description": "Citadel config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Citadel credentials object",
                "properties": {
                  "storeName": {
                    "type": "string",
                    "description": "Store name"
                  },
                  "storeId": {
                    "type": "string",
                    "description": "Store ID"
                  },
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password",
                    "format": "password"
                  }
                },
                "required": ["storeName", "storeId", "username", "password"]
              }
            }
          }
        ]
      },
      "Clearhaus": {
        "description": "Clearhaus Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Clearhaus api key",
                    "format": "password"
                  }
                },
                "required": ["apiKey"]
              },
              "mpi": {
                "$ref": "#/components/schemas/ClearhausMpis"
              }
            }
          }
        ]
      },
      "Conekta": {
        "description": "Conekta config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Conekta credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Conekta private API key",
                    "format": "password"
                  }
                },
                "required": ["apiKey"]
              }
            }
          }
        ]
      },
      "Coppr": {
        "description": "Coppr config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Coppr credentials object",
                "properties": {
                  "organizationId": {
                    "type": "string",
                    "description": "Coppr Organization's ID"
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "Coppr api key",
                    "format": "password"
                  }
                },
                "required": ["organizationId", "apiKey"]
              }
            }
          }
        ]
      },
      "Credorax": {
        "description": "Credorax Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Credorax Gateway merchant ID"
                  },
                  "merchantMd5Signature": {
                    "type": "string",
                    "description": "Credorax Gateway md5 signature",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "merchantMd5Signature"]
              }
            }
          }
        ]
      },
      "Cryptonator": {
        "description": "Cryptonator config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Cryptonator credentials object",
                "properties": {
                  "merchant_id": {
                    "type": "string",
                    "description": "Cryptonator merchant ID"
                  },
                  "secret": {
                    "type": "string",
                    "description": "Cryptonator secret",
                    "format": "password"
                  }
                },
                "required": ["merchant_id", "secret"]
              }
            }
          }
        ]
      },
      "DataCash": {
        "description": "DataCash Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "client": {
                    "type": "string",
                    "description": "DataCash Gateway client"
                  },
                  "password": {
                    "type": "string",
                    "description": "DataCash Gateway password",
                    "format": "password"
                  },
                  "reportGroup": {
                    "type": "string",
                    "description": "DataCash report group"
                  },
                  "reportUser": {
                    "type": "string",
                    "description": "DataCash report user"
                  },
                  "reportPassword": {
                    "type": "string",
                    "description": "DataCash report password",
                    "format": "password"
                  },
                  "visaPayoutsClient": {
                    "type": "string",
                    "description": "DataCash Gateway client for Visa payouts (OCT)"
                  },
                  "visaPayoutsPassword": {
                    "type": "string",
                    "description": "DataCash Gateway password for Visa payouts (OCT)",
                    "format": "password"
                  },
                  "masterCardPayoutsClient": {
                    "type": "string",
                    "description": "DataCash Gateway client for MasterCard payouts (OCT)"
                  },
                  "masterCardPayoutsPassword": {
                    "type": "string",
                    "description": "DataCash Gateway password for MasterCard payouts (OCT)",
                    "format": "password"
                  }
                },
                "required": ["client", "password"]
              },
              "settings": {
                "type": "object",
                "description": "Datacash settings object",
                "properties": {
                  "policy": {
                    "type": "integer",
                    "description": "Policy",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 2
                  },
                  "delay": {
                    "type": "integer",
                    "description": "Auto Capture delay (in hours)",
                    "minimum": 0,
                    "default": 0
                  }
                }
              },
              "mpi": {
                "$ref": "#/components/schemas/DataCashMpis"
              }
            }
          }
        ]
      },
      "Dengi": {
        "description": "Dengi Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string",
                    "description": "Dengi Gateway project ID"
                  },
                  "publicKey": {
                    "type": "string",
                    "description": "Dengi Gateway public key",
                    "format": "password"
                  },
                  "refundKey": {
                    "type": "string",
                    "description": "Dengi Gateway refund key",
                    "format": "password"
                  }
                },
                "required": ["projectId", "publicKey", "refundKey"]
              }
            }
          }
        ]
      },
      "EPG": {
        "description": "EPG config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "EPG credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Merchant ID"
                  },
                  "productId": {
                    "type": "string",
                    "description": "Product ID"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "Merchant password",
                    "format": "password"
                  },
                  "merchantKey": {
                    "type": "string",
                    "description": "Merchant key",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "productId", "merchantPassword", "merchantKey"]
              }
            }
          }
        ]
      },
      "EPro": {
        "description": "EPro config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "EPro credentials object",
                "properties": {
                  "apiSecretKey": {
                    "type": "string",
                    "description": "EPro API secret key",
                    "format": "password"
                  }
                },
                "required": ["apiSecretKey"]
              }
            }
          }
        ]
      },
      "EcorePay": {
        "description": "EcorePay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "EcorePay Account ID"
                  },
                  "accountAuth": {
                    "type": "string",
                    "description": "EcorePay Account Auth",
                    "format": "password"
                  }
                },
                "required": ["accountId", "accountAuth"]
              }
            }
          }
        ]
      },
      "Elavon": {
        "description": "Elavon config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Elavon credentials object",
                "properties": {
                  "ssl_merchant_id": {
                    "type": "string",
                    "description": "Elavon merchant ID"
                  },
                  "ssl_user_id": {
                    "type": "string",
                    "description": "Elavon user ID"
                  },
                  "ssl_pin": {
                    "type": "string",
                    "description": "Elavon pin",
                    "format": "password"
                  }
                },
                "required": ["ssl_merchant_id", "ssl_user_id", "ssl_pin"]
              }
            }
          }
        ]
      },
      "FinTecSystems": {
        "description": "FinTecSystems config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "FinTecSystems credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "FinTecSystems api key",
                    "format": "password"
                  }
                },
                "required": ["apiKey"]
              },
              "settings": {
                "type": "object",
                "description": "FinTecSystems settings object",
                "properties": {
                  "recipientIBAN": {
                    "type": "string",
                    "description": "IBAN of the recipient account"
                  },
                  "recipientBIC": {
                    "type": "string",
                    "description": "BIC of the recipient account"
                  },
                  "recipientCountry": {
                    "type": "string",
                    "description": "Two letter country code",
                    "enum": ["AT", "CH", "DE"]
                  },
                  "recipientHolder": {
                    "type": "string",
                    "description": "Account holder of the recipient account"
                  }
                },
                "required": ["recipientIBAN", "recipientBIC", "recipientHolder", "recipientCountry"]
              }
            }
          }
        ]
      },
      "Finrax": {
        "description": "Finrax config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Finrax credentials object",
                "properties": {
                  "businessToken": {
                    "type": "string",
                    "description": "Finrax business token",
                    "format": "password"
                  }
                },
                "required": ["businessToken"]
              }
            }
          }
        ]
      },
      "Flexepin": {
        "description": "Flexepin Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Flexepin API Key"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "Flexepin API Secret",
                    "format": "password"
                  }
                },
                "required": ["apiKey", "apiSecret"]
              }
            }
          }
        ]
      },
      "Forte": {
        "description": "Forte Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "Forte Gateway account ID"
                  },
                  "locationId": {
                    "type": "string",
                    "description": "Forte Gateway location ID"
                  },
                  "apiAccessId": {
                    "type": "string",
                    "description": "Forte Gateway api access ID",
                    "format": "password"
                  },
                  "apiSecretKey": {
                    "type": "string",
                    "description": "Forte Gateway api secret key",
                    "format": "password"
                  }
                },
                "required": ["accountId", "locationId", "apiAccessId", "apiSecretKey"]
              }
            }
          }
        ]
      },
      "FundSend": {
        "description": "FundSend Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "FundSend Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "FundSend Gateway secret word",
                    "format": "password"
                  }
                },
                "required": ["clientId", "secretWord"]
              }
            }
          }
        ]
      },
      "GET": {
        "description": "GET Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "GET Gateway account ID"
                  }
                },
                "required": ["accountId"]
              },
              "mpi": {
                "$ref": "#/components/schemas/GETMpis"
              }
            }
          }
        ]
      },
      "Gigadat": {
        "description": "Gigadat config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Gigadat credentials object",
                "properties": {
                  "campaignId": {
                    "type": "string",
                    "description": "Gigadat campaign ID"
                  },
                  "accessToken": {
                    "type": "string",
                    "description": "Gigadat access token",
                    "format": "password"
                  },
                  "securityToken": {
                    "type": "string",
                    "description": "Gigadat security token",
                    "format": "password"
                  }
                },
                "required": ["campaignId", "accessToken", "securityToken"]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "sandbox": {
                    "type": "boolean",
                    "description": "True if gateway account is in sandbox mode",
                    "default": false
                  }
                },
                "required": ["sandbox"]
              }
            }
          }
        ]
      },
      "GlobalOne": {
        "description": "GlobalOne Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "terminalId": {
                    "type": "string",
                    "description": "GlobalOne Gateway terminal ID"
                  },
                  "sharedSecret": {
                    "type": "string",
                    "description": "GlobalOne Gateway shared secret",
                    "format": "password"
                  }
                },
                "required": ["terminalId", "sharedSecret"]
              }
            }
          }
        ]
      },
      "Gooney": {
        "description": "Gooney config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Gooney credentials object",
                "properties": {
                  "apiUser": {
                    "type": "string",
                    "description": "Gooney API user"
                  },
                  "apiPassword": {
                    "type": "string",
                    "description": "Gooney API password",
                    "format": "password"
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "Gooney API key"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "Gooney API secret",
                    "format": "password"
                  }
                },
                "required": ["username", "password", "apiKey", "apiSecret"]
              }
            }
          }
        ]
      },
      "Gpaysafe": {
        "description": "Gpaysafe Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Gpaysafe apiKey"
                  }
                },
                "required": ["apiKey"]
              }
            }
          }
        ]
      },
      "Greenbox": {
        "description": "Greenbox config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Greenbox credentials object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Greenbox client ID"
                  },
                  "locationId": {
                    "type": "string",
                    "description": "Greenbox location ID"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "Greenbox client secret",
                    "format": "password"
                  }
                },
                "required": ["clientId", "clientSecret", "locationId"]
              }
            }
          }
        ]
      },
      "INOVAPAY": {
        "description": "INOVAPAY config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "INOVAPAY credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "INOVAPAY API key"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "INOVAPAY API secret",
                    "format": "password"
                  }
                },
                "required": ["apiKey", "apiSecret"]
              }
            }
          }
        ]
      },
      "Ilixium": {
        "description": "Ilixium Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Ilixium credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Ilixium Gateway merchant ID"
                  },
                  "accountId": {
                    "type": "string",
                    "description": "Ilixium Gateway account ID"
                  },
                  "digestPassword": {
                    "type": "string",
                    "description": "Ilixium Gateway digest password",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "accountId", "digestPassword"]
              },
              "settings": {
                "type": "object",
                "description": "Ilixium settings object",
                "properties": {
                  "useIpFrame": {
                    "type": "boolean",
                    "description": "Force Ilixium to process via Ip Frame"
                  }
                }
              },
              "mpi": {
                "$ref": "#/components/schemas/IlixiumMpis"
              }
            }
          }
        ]
      },
      "Ingenico": {
        "description": "Ingenico Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Ingenico Gateway merchant ID"
                  },
                  "apiKeyId": {
                    "type": "string",
                    "description": "Ingenico Gateway api key ID"
                  },
                  "apiSecretKey": {
                    "type": "string",
                    "description": "Ingenico Gateway api secret key",
                    "format": "password"
                  },
                  "skipFraudService": {
                    "type": "boolean",
                    "description": "Ingenico skip fraud service"
                  }
                },
                "required": ["merchantId", "apiKeyId", "apiSecretKey"]
              },
              "mpi": {
                "$ref": "#/components/schemas/IngenicoMpis"
              }
            }
          }
        ]
      },
      "Inovio": {
        "description": "Inovio config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Inovio credentials object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Inovio username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Inovio password",
                    "format": "password"
                  }
                },
                "required": ["username", "password"]
              },
              "settings": {
                "type": "object",
                "description": "Inovio settings object",
                "properties": {
                  "websiteId": {
                    "type": "string",
                    "description": "Inovio website ID"
                  },
                  "merchantAccountId": {
                    "type": "string",
                    "description": "Inovio merchant account ID"
                  },
                  "productId": {
                    "type": "string",
                    "description": "Inovio product ID"
                  }
                },
                "required": ["websiteId", "merchantAccountId", "productId"]
              },
              "mpi": {
                "$ref": "#/components/schemas/InovioMpis"
              }
            }
          }
        ]
      },
      "InstaDebit": {
        "description": "InstaDebit config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "InstaDebit credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "InstaDebit merchant account number"
                  },
                  "password": {
                    "type": "string",
                    "description": "InstaDebit merchant account password",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "password"]
              }
            }
          }
        ]
      },
      "Intuit": {
        "description": "Intuit Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "The Intuit client_id key"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "The Intuit client_secret key",
                    "format": "password"
                  }
                },
                "required": ["clientId", "clientSecret"]
              }
            }
          }
        ]
      },
      "IpayOptions": {
        "description": "Ipay Options config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Ipay Options credentials object",
                "properties": {
                  "sid": {
                    "type": "string",
                    "description": "Ipay Options website ID"
                  },
                  "rcode": {
                    "type": "string",
                    "description": "Ipay Options rcode",
                    "format": "password"
                  }
                },
                "required": ["sid", "rcode"]
              },
              "settings": {
                "type": "object",
                "description": "Ipay Options settings object",
                "properties": {
                  "extraStep": {
                    "type": "boolean",
                    "description": "Show extra step for user to enter their email and DNI number"
                  },
                  "subdomain": {
                    "type": "string",
                    "description": "Subdomain to use when sending request to IpayOptions.",
                    "enum": ["miglite", "w88asiapay"]
                  },
                  "platform": {
                    "type": "string",
                    "description": "Platform which IpayOptions will process.",
                    "enum": ["SOAP", "TxHandler"]
                  }
                }
              }
            }
          }
        ]
      },
      "JetPay": {
        "description": "JetPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "TerminalID": {
                    "type": "string",
                    "description": "JetPay Gateway terminal ID"
                  }
                },
                "required": ["TerminalID"]
              }
            }
          }
        ]
      },
      "Jeton": {
        "description": "Jeton Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Jeton apiKey",
                    "format": "password"
                  }
                },
                "required": ["apiKey"]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "Jeton's method",
                    "enum": ["CHECKOUT", "DIRECT", "QR", "JETGO"]
                  }
                },
                "required": ["method"]
              }
            }
          }
        ]
      },
      "LPG": {
        "description": "LPG config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "LPG credentials object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "LPG public API key"
                  },
                  "secureKey": {
                    "type": "string",
                    "description": "LPG secure API key",
                    "format": "password"
                  },
                  "payoutUsername": {
                    "type": "string",
                    "description": "LPG payout account username",
                    "format": "password"
                  },
                  "payoutPassword": {
                    "type": "string",
                    "description": "LPG payout account password",
                    "format": "password"
                  }
                },
                "required": ["publicKey", "secureKey"]
              }
            }
          }
        ]
      },
      "Moneris": {
        "description": "Moneris Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiToken": {
                    "type": "string",
                    "description": "Moneris Gateway api token",
                    "format": "password"
                  },
                  "storeId": {
                    "type": "string",
                    "description": "Moneris Gateway store ID"
                  }
                },
                "required": ["storeId", "apiToken"]
              }
            }
          }
        ]
      },
      "MtaPay": {
        "description": "MTA Pay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "description": "MTA Pay Gateway account ID"
                  },
                  "partyId": {
                    "type": "string",
                    "description": "MTA Pay Gateway party ID"
                  },
                  "md5key": {
                    "type": "string",
                    "description": "MTA Pay Gateway md5key",
                    "format": "password"
                  }
                },
                "required": ["accountId", "partyId", "md5key"]
              },
              "settings": {
                "type": "object",
                "description": "MTA Pay settings object",
                "properties": {
                  "goods": {
                    "type": "string",
                    "description": "MTA Pay Gateway goods"
                  },
                  "mobilePay": {
                    "type": "string",
                    "description": "MTA Pay Gateway mobile pay param"
                  }
                },
                "required": ["mobilePay", "goods"]
              }
            }
          }
        ]
      },
      "NMI": {
        "description": "NMI Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "NMI Gateway api token"
                  },
                  "password": {
                    "type": "string",
                    "description": "NMI Gateway store ID",
                    "format": "password"
                  }
                },
                "required": ["username", "password"]
              },
              "mpi": {
                "$ref": "#/components/schemas/NMIMpis"
              }
            }
          }
        ]
      },
      "Netbanking": {
        "description": "Netbanking config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Netbanking credentials object",
                "properties": {
                  "midcode": {
                    "type": "string",
                    "description": "Netbanking MID code"
                  },
                  "midsecret": {
                    "type": "string",
                    "description": "Netbanking MID secret key",
                    "format": "password"
                  }
                },
                "required": ["midcode", "midsecret"]
              }
            }
          }
        ]
      },
      "Neteller": {
        "description": "Neteller Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Neteller credentials object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Neteller App Client ID"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "Neteller App Client Secret",
                    "format": "password"
                  },
                  "webhookSecretKey": {
                    "type": "string",
                    "description": "Neteller Webhook Secret Key",
                    "format": "password"
                  }
                },
                "required": ["clientId", "clientSecret", "webhookSecretKey"]
              },
              "settings": {
                "type": "object",
                "description": "Neteller settings object",
                "properties": {
                  "netellerGo": {
                    "type": "boolean",
                    "description": "Enable NETELLERgo! payment flow"
                  }
                }
              }
            }
          }
        ]
      },
      "NinjaWallet": {
        "description": "NinjaWallet config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "NinjaWallet credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "NinjaWallet api key",
                    "format": "password"
                  },
                  "secret": {
                    "type": "string",
                    "description": "NinjaWallet secret",
                    "format": "password"
                  },
                  "passphrase": {
                    "type": "string",
                    "description": "NinjaWallet passphrase",
                    "format": "password"
                  }
                },
                "required": ["apiKey", "secret", "passphrase"]
              }
            }
          }
        ]
      },
      "OchaPay": {
        "description": "OchaPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiUsername": {
                    "type": "string",
                    "description": "OchaPay Gateway username"
                  },
                  "apiPassword": {
                    "type": "string",
                    "description": "OchaPay Gateway api password",
                    "format": "password"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "OchaPay Gateway secret word",
                    "format": "password"
                  }
                },
                "required": ["apiUsername", "apiPassword", "secretWord"]
              }
            }
          }
        ]
      },
      "Onlineueberweisen": {
        "description": "Onlineueberweisen config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Onlineueberweisen credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Onlineueberweisen API Key",
                    "format": "password"
                  },
                  "nuaPayApiKey": {
                    "type": "string",
                    "description": "NuaPay API Key for reconciliation",
                    "format": "password"
                  },
                  "nuaPayAccountId": {
                    "type": "string",
                    "description": "NuaPay account ID for reconciliation"
                  }
                },
                "required": ["apiKey"]
              },
              "settings": {
                "type": "object",
                "description": "Onlineueberweisen settings object",
                "properties": {
                  "payformCode": {
                    "type": "string",
                    "description": "Onlineueberweisen payform code to use customized Payform template",
                    "default": "default"
                  },
                  "autoAbandonTtl": {
                    "type": "integer",
                    "description": "Auto-abandon if transaction is not reconciled after x hours"
                  }
                },
                "required": ["autoAbandonTtl"]
              }
            }
          }
        ]
      },
      "Optimal": {
        "description": "Optimal Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "storeId": {
                    "type": "string",
                    "description": "Optimal Gateway store ID"
                  },
                  "storePwd": {
                    "type": "string",
                    "description": "Optimal Gateway store password",
                    "format": "password"
                  },
                  "accountNum": {
                    "type": "string",
                    "description": "Optimal Gateway account number"
                  }
                },
                "required": ["storeId", "storePwd", "accountNum"]
              },
              "mpi": {
                "$ref": "#/components/schemas/OptimalMpis"
              }
            }
          }
        ]
      },
      "Pagsmile": {
        "description": "Pagsmile Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Pagsmile merchant ID"
                  },
                  "appId": {
                    "type": "string",
                    "description": "Pagsmile app ID"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "Pagsmile secret key",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "appId", "secretKey"]
              }
            }
          }
        ]
      },
      "Panamerican": {
        "description": "Panamerican config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Panamerican credentials object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Panamerican's key"
                  },
                  "password": {
                    "type": "string",
                    "description": "Panamerican's Password",
                    "format": "password"
                  }
                },
                "required": ["key", "password"]
              },
              "mpi": {
                "$ref": "#/components/schemas/PanamericanMpis"
              },
              "settings": {
                "type": "object",
                "description": "Panamerican settings object",
                "properties": {
                  "extraStep": {
                    "type": "boolean",
                    "description": "Show extra step for user to enter their ID number"
                  },
                  "convertToAscii": {
                    "type": "boolean",
                    "description": "Will convert all chars to ascii"
                  }
                },
                "required": ["extraStep"]
              }
            }
          }
        ]
      },
      "PandaGateway": {
        "description": "Panda Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantCode": {
                    "type": "string",
                    "description": "Panda Gateway merchant code"
                  },
                  "apiCode": {
                    "type": "string",
                    "description": "Panda Gateway api code"
                  },
                  "signKey": {
                    "type": "string",
                    "description": "Panda Gateway sign key",
                    "format": "password"
                  }
                },
                "required": ["merchantCode", "apiCode", "signKey"]
              }
            }
          }
        ]
      },
      "ParamountEft": {
        "description": "Paramount config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Paramount credentials object",
                "properties": {
                  "merchant_id": {
                    "type": "string",
                    "description": "Merchant account ID"
                  },
                  "merchant_pass": {
                    "type": "string",
                    "description": "Merchant account password",
                    "format": "password"
                  },
                  "payee": {
                    "type": "string",
                    "description": "Merchant name/descriptor"
                  }
                },
                "required": ["merchant_id", "merchant_pass", "payee"]
              }
            }
          }
        ]
      },
      "Pay4Fun": {
        "description": "Pay4Fun config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Pay4Fun credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Pay4Fun merchant ID"
                  },
                  "merchantSecret": {
                    "type": "string",
                    "description": "Pay4Fun merchant secret",
                    "format": "password"
                  },
                  "merchantKey": {
                    "type": "string",
                    "description": "Pay4Fun merchant key",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "merchantSecret", "merchantKey"]
              }
            }
          }
        ]
      },
      "PayCash": {
        "description": "PayCash config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "PayCash credentials object",
                "properties": {
                  "emisor": {
                    "type": "string",
                    "description": "Identify of the company"
                  },
                  "token": {
                    "type": "string",
                    "description": "Token",
                    "format": "password"
                  }
                },
                "required": ["emisor", "token"]
              }
            }
          }
        ]
      },
      "PayPal": {
        "description": "PayPal Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantIdInPayPal": {
                    "type": "string",
                    "description": "PayPal Gateway merchant id"
                  }
                },
                "required": ["merchantIdInPayPal"]
              }
            }
          }
        ]
      },
      "Payeezy": {
        "description": "Payeezy Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Payeezy Merchant ID"
                  },
                  "merchantToken": {
                    "type": "string",
                    "description": "Merchant Token",
                    "format": "password"
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "API Key"
                  },
                  "apiSecret": {
                    "type": "string",
                    "description": "API Secret",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "merchantToken", "apiKey", "apiSecret"]
              }
            }
          }
        ]
      },
      "Payflow": {
        "description": "Payflow config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Payflow credentials object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR"
                  },
                  "vendor": {
                    "type": "string",
                    "description": "Your merchant login ID created when you registered for the account."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password you defined while registering for the account.",
                    "format": "password"
                  }
                },
                "required": ["user", "vendor", "password"]
              }
            }
          }
        ]
      },
      "PaymenTechnologies": {
        "description": "PaymenTechnologies Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "authenticateId": {
                    "type": "string",
                    "description": "PaymenTechnologies Gateway authenticate ID"
                  },
                  "authenticatePw": {
                    "type": "string",
                    "description": "PaymenTechnologies Gateway authenticate password",
                    "format": "password"
                  },
                  "publicKey": {
                    "type": "string",
                    "description": "PaymenTechnologies Gateway API public key"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "PaymenTechnologies Gateway API secret key",
                    "format": "password"
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "PaymenTechnologies API key required for query operations",
                    "format": "password"
                  }
                },
                "required": ["authenticateId", "authenticatePw", "publicKey", "secretKey", "apiKey"]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "use3DSEndpoint": {
                    "type": "boolean",
                    "description": "Use 3DS endpoint"
                  }
                }
              }
            }
          }
        ]
      },
      "Payr": {
        "description": "Payr Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Payr Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "Payr Gateway secret word",
                    "format": "password"
                  },
                  "apiUserId": {
                    "type": "string",
                    "description": "Username for the Alliance API (transaction reporting)"
                  },
                  "apiSecurityToken": {
                    "type": "string",
                    "description": "Hash of the password for the Alliance API (transaction reporting)",
                    "format": "password"
                  }
                },
                "required": ["clientId", "secretWord"]
              }
            }
          }
        ]
      },
      "Paysafe": {
        "description": "Paysafe Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "storeId": {
                    "type": "string",
                    "description": "Paysafe Gateway store ID"
                  },
                  "storePwd": {
                    "type": "string",
                    "description": "Paysafe Gateway store password",
                    "format": "password"
                  },
                  "accountNum": {
                    "type": "string",
                    "description": "Paysafe Gateway account number"
                  }
                },
                "required": ["storeId", "storePwd", "accountNum"]
              },
              "mpi": {
                "$ref": "#/components/schemas/PaysafeMpis"
              }
            }
          }
        ]
      },
      "Paysafecash": {
        "description": "Paysafecash Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Paysafecash API key",
                    "format": "password"
                  }
                },
                "required": ["apiKey"]
              }
            }
          }
        ]
      },
      "Payvision": {
        "description": "Payvision Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "memberId": {
                    "type": "string",
                    "description": "Payvision Gateway member id"
                  },
                  "memberGuid": {
                    "type": "string",
                    "description": "Payvision Gateway member guid",
                    "format": "password"
                  }
                },
                "required": ["memberId", "memberGuid"]
              },
              "settings": {
                "type": "object",
                "description": "Payvision settings object",
                "properties": {
                  "avs": {
                    "type": "boolean",
                    "description": "Payvision Gateway avs"
                  },
                  "delay": {
                    "type": "integer",
                    "description": "Payvision Gateway delay"
                  },
                  "merchantAccountType": {
                    "type": "integer",
                    "description": "Payvision merchant account type"
                  }
                },
                "required": ["merchantAccountType"]
              },
              "mpi": {
                "$ref": "#/components/schemas/PayvisionMpis"
              }
            }
          }
        ]
      },
      "Plugnpay": {
        "description": "Plugnpay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "publisher-name": {
                    "type": "string",
                    "description": "Plugnpay Gateway member id"
                  },
                  "publisher-password": {
                    "type": "string",
                    "description": "Plugnpay Gateway avs",
                    "format": "password"
                  }
                },
                "required": ["publisher-name", "publisher-password"]
              }
            }
          }
        ]
      },
      "Prosa": {
        "description": "Prosa config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Prosa credentials object",
                "properties": {
                  "entityId": {
                    "type": "string",
                    "description": "Entity ID"
                  },
                  "accessToken": {
                    "type": "string",
                    "description": "Access token",
                    "format": "password"
                  }
                },
                "required": ["entityId", "accessToken"]
              }
            }
          }
        ]
      },
      "RPN": {
        "description": "RPN Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "mid": {
                    "type": "string",
                    "description": "RPN MID"
                  },
                  "key": {
                    "type": "string",
                    "description": "RPN Key",
                    "format": "password"
                  }
                },
                "required": ["mid", "key"]
              }
            }
          }
        ]
      },
      "Realex": {
        "description": "Realex Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "Realex Gateway merchant id"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "Realex Gateway secret key",
                    "format": "password"
                  },
                  "rebatePassword": {
                    "type": "string",
                    "description": "Realex Gateway rebate password",
                    "format": "password"
                  },
                  "account": {
                    "type": "string",
                    "description": "Realex Gateway account"
                  }
                },
                "required": ["merchantId", "secretKey", "rebatePassword", "account"]
              }
            }
          }
        ]
      },
      "Realtime": {
        "description": "Realtime Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Realtime Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "Realtime Gateway secret word",
                    "format": "password"
                  }
                },
                "required": ["clientId", "secretWord"]
              }
            }
          }
        ]
      },
      "Redsys": {
        "description": "Redsys Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantCode": {
                    "type": "string",
                    "description": "Redsys Gateway merchant code",
                    "format": "password"
                  },
                  "secretCode": {
                    "type": "string",
                    "description": "Redsys Gateway secret code",
                    "format": "password"
                  }
                },
                "required": ["merchantCode", "secretCode"]
              }
            }
          }
        ]
      },
      "Rotessa": {
        "description": "Rotessa config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Rotessa credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "Rotessa api key",
                    "format": "password"
                  }
                },
                "required": ["apiKey"]
              },
              "settings": {
                "type": "object",
                "description": "Rotessa settings object",
                "properties": {
                  "delay": {
                    "type": "integer",
                    "description": "Rotessa Gateway time delay for them to process transaction"
                  }
                },
                "required": ["delay"]
              }
            }
          }
        ]
      },
      "SMSVoucher": {
        "description": "SMSVoucher Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "AppId": {
                    "type": "string",
                    "description": "SMSVoucher AppId"
                  }
                },
                "required": ["AppId"]
              }
            }
          }
        ]
      },
      "Sofort": {
        "description": "Sofort config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Sofort credentials object",
                "properties": {
                  "configKey": {
                    "type": "string",
                    "description": "Sofort configuration key"
                  }
                },
                "required": ["configKey"]
              }
            }
          }
        ]
      },
      "Sagepay": {
        "description": "Sagepay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "M_ID": {
                    "type": "string",
                    "description": "Sagepay Gateway merchant ID"
                  },
                  "M_KEY": {
                    "type": "string",
                    "description": "Sagepay Gateway merchant key",
                    "format": "password"
                  }
                },
                "required": ["M_ID", "M_KEY"]
              }
            }
          }
        ]
      },
      "SeamlessChex": {
        "description": "SeamlessChex config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "SeamlessChex credentials object",
                "properties": {
                  "publicKey": {
                    "type": "string",
                    "description": "SeamlessChex publishable key"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "SeamlessChex secret key",
                    "format": "password"
                  }
                },
                "required": ["publicKey", "secretKey"]
              }
            }
          }
        ]
      },
      "SecureTrading": {
        "description": "SecureTrading config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "SecureTrading credentials object",
                "properties": {
                  "websiteId": {
                    "type": "string",
                    "description": "Website ID"
                  },
                  "username": {
                    "type": "string",
                    "description": "SecureTrading web service username"
                  },
                  "password": {
                    "type": "string",
                    "description": "SecureTrading web service password",
                    "format": "password"
                  }
                },
                "required": ["websiteId", "username", "password"]
              },
              "mpi": {
                "$ref": "#/components/schemas/SecureTradingMpis"
              }
            }
          }
        ]
      },
      "Skrill": {
        "description": "Skrill config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Skrill credentials object",
                "properties": {
                  "accountEmail": {
                    "type": "string",
                    "description": "Email address of your Skrill merchant account"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "Secret word used for MD5 signature verifications",
                    "format": "password"
                  },
                  "mqiPassword": {
                    "type": "string",
                    "description": "Password used during MQI/API requests",
                    "format": "password"
                  }
                },
                "required": ["accountEmail", "secretWord"]
              }
            }
          }
        ]
      },
      "SmartInvoice": {
        "description": "SmartInvoice config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "SmartInvoice credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "SmartInvoice merchant account UID"
                  },
                  "applicationId": {
                    "type": "string",
                    "description": "SmartInvoice application UID",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "applicationId"]
              },
              "mpi": {
                "$ref": "#/components/schemas/SmartInvoiceMpis"
              }
            }
          }
        ]
      },
      "SparkPay": {
        "description": "SparkPay config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "SparkPay credentials object",
                "properties": {
                  "shopId": {
                    "type": "string",
                    "description": "SparkPay shop ID"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "SparkPay secret key",
                    "format": "password"
                  }
                },
                "required": ["shopId", "secretKey"]
              }
            }
          }
        ]
      },
      "StaticGateway": {
        "description": "StaticGateway Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object"
          }
        ]
      },
      "Stripe": {
        "description": "Stripe Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "redirectUrl": {
                    "type": "string",
                    "description": "Stripe Gateway redirect url",
                    "format": "url"
                  }
                },
                "required": ["redirectUrl"]
              }
            }
          }
        ]
      },
      "TestProcessor": {
        "description": "TestProcessor Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "properties": {
              "mpi": {
                "$ref": "#/components/schemas/TestProcessorMpis"
              }
            }
          }
        ]
      },
      "ToditoCash": {
        "description": "ToditoCash config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "ToditoCash credentials object",
                "properties": {
                  "apiKey": {
                    "type": "string",
                    "description": "ToditoCash API key",
                    "format": "password"
                  }
                },
                "required": ["apiKey"]
              }
            }
          }
        ]
      },
      "UPayCard": {
        "description": "UPayCard Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "receiver_account": {
                    "type": "string",
                    "description": "merchant receiver account"
                  },
                  "key": {
                    "type": "string",
                    "description": "merchant key",
                    "format": "password"
                  },
                  "secret": {
                    "type": "string",
                    "description": "merchant secret",
                    "format": "password"
                  }
                },
                "required": ["receiver_account", "key", "secret"]
              },
              "settings": {
                "type": "object",
                "description": "UpayCard settings object",
                "properties": {
                  "tolerancePercentage": {
                    "type": "string",
                    "description": "Tolerance paercentage for settled amount"
                  }
                }
              }
            }
          }
        ]
      },
      "USAePay": {
        "description": "USAePay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "sourceKey": {
                    "type": "string",
                    "description": "USAePay Gateway source key",
                    "format": "password"
                  },
                  "pin": {
                    "type": "string",
                    "description": "USAePay Gateway pin",
                    "format": "password"
                  }
                },
                "required": ["sourceKey", "pin"]
              }
            }
          }
        ]
      },
      "VantivLitle": {
        "description": "VantivLitle Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "VantivLitle Gateway username"
                  },
                  "password": {
                    "type": "string",
                    "description": "VantivLitle Gateway password",
                    "format": "password"
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "VantivLitle Gateway merchant ID"
                  }
                },
                "required": ["username", "password", "merchantId"]
              },
              "mpi": {
                "$ref": "#/components/schemas/VantivLitleMpis"
              }
            }
          }
        ]
      },
      "Wallet88": {
        "description": "Wallet88 config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "Wallet88 credentials object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Wallet88 API user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Wallet88 API password",
                    "format": "password"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        ]
      },
      "Walpay": {
        "description": "Walpay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantName": {
                    "type": "string",
                    "description": "Walpay Gateway merchant name"
                  },
                  "merchantPin": {
                    "type": "string",
                    "description": "Walpay Gateway merchant pin",
                    "format": "password"
                  }
                },
                "required": ["merchantName", "merchantPin"]
              },
              "mpi": {
                "$ref": "#/components/schemas/WalpayMpis"
              }
            }
          }
        ]
      },
      "Wirecard": {
        "description": "Wirecard Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantUsername": {
                    "type": "string",
                    "description": "Wirecard Gateway merchant username"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "Wirecard Gateway merchant password",
                    "format": "password"
                  },
                  "businessSignature": {
                    "type": "string",
                    "description": "Wirecard Gateway merchant business case signature",
                    "format": "password"
                  },
                  "delay": {
                    "type": "integer",
                    "description": "Wirecard Gateway delay"
                  },
                  "sftpUsername": {
                    "type": "string",
                    "description": "Wirecard sftp username."
                  },
                  "sftpPrivateKey": {
                    "type": "string",
                    "description": "Wirecard sftp private key.",
                    "format": "password"
                  }
                },
                "required": ["merchantUsername", "merchantPassword", "businessSignature", "delay"]
              },
              "mpi": {
                "$ref": "#/components/schemas/WirecardMpis"
              }
            }
          }
        ]
      },
      "WorldlineAtosFrankfurt": {
        "description": "WorldlineAtosFrankfurt Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials", "settings"],
            "properties": {
              "mpi": {
                "$ref": "#/components/schemas/WorldlineAtosFrankfurtMpis"
              },
              "credentials": {
                "type": "object",
                "description": "WorldlineAtosFrankfurt credentials",
                "properties": {
                  "cardAcceptorIdCode": {
                    "type": "string",
                    "description": "Card Acceptor ID Code"
                  },
                  "acquiringInstitutionIdentificationCode": {
                    "type": "string",
                    "description": "Acquiring Institution Identification Code"
                  }
                },
                "required": ["cardAcceptorIdCode", "acquiringInstitutionIdentificationCode"]
              },
              "settings": {
                "type": "object",
                "description": "WorldlineAtosFrankfurt settings",
                "properties": {
                  "cardAcceptorName": {
                    "type": "string",
                    "description": "Card Acceptor Name"
                  },
                  "cardAcceptorLocation": {
                    "type": "string",
                    "description": "Card Acceptor Location"
                  },
                  "cardAcceptorCountryCode": {
                    "type": "string",
                    "description": "Card Acceptor Country Code"
                  }
                },
                "required": ["cardAcceptorName", "cardAcceptorLocation", "cardAcceptorCountryCode"]
              }
            }
          }
        ]
      },
      "Worldpay": {
        "description": "Worldpay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "merchantCode": {
                    "type": "string",
                    "description": "Worldpay Gateway merchant code",
                    "format": "password"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "Worldpay Gateway merchant password",
                    "format": "password"
                  }
                },
                "required": ["merchantCode", "merchantPassword"]
              },
              "mpi": {
                "$ref": "#/components/schemas/WorldpayMpis"
              }
            }
          }
        ]
      },
      "Zotapay": {
        "description": "Zotapay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "endpointId": {
                    "type": "string",
                    "description": "Zotapay's endpoint ID"
                  },
                  "merchantId": {
                    "type": "string",
                    "description": "Zotapay's merchant ID"
                  },
                  "merchantSecretKey": {
                    "type": "string",
                    "description": "Zotapay's merchant secret key",
                    "format": "password"
                  }
                },
                "required": ["endpointId", "merchantId", "merchantSecretKey"]
              }
            }
          }
        ]
      },
      "eMerchantPay": {
        "description": "eMerchantPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "eMerchantPay Gateway client ID"
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "eMerchantPay Gateway api key",
                    "format": "password"
                  },
                  "username": {
                    "type": "string",
                    "description": "eMerchantPay username for Genesis platform"
                  },
                  "token": {
                    "type": "string",
                    "description": "eMerchantPay token for Genesis platform"
                  },
                  "password": {
                    "type": "string",
                    "description": "eMerchantPay password for Genesis platform",
                    "format": "password"
                  }
                }
              },
              "settings": {
                "type": "object",
                "description": "eMerchantPay settings object",
                "properties": {
                  "platform": {
                    "type": "string",
                    "description": "eMerchantPay platform to process payment. default to IPG",
                    "enum": ["IPG", "Genesis"]
                  }
                }
              },
              "mpi": {
                "$ref": "#/components/schemas/eMerchantPayMpis"
              }
            }
          }
        ]
      },
      "ecoPayz": {
        "description": "ecoPayz config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "ecoPayz credentials object",
                "properties": {
                  "paymentPageId": {
                    "type": "string",
                    "description": "ecoPayz payment page ID"
                  },
                  "merchantAccountNumber": {
                    "type": "string",
                    "description": "ecoPayz merchant account number"
                  },
                  "merchantPassword": {
                    "type": "string",
                    "description": "ecoPayz merchant password",
                    "format": "password"
                  }
                },
                "required": ["paymentPageId", "merchantAccountNumber", "merchantPassword"]
              },
              "settings": {
                "type": "object",
                "description": "ecoPayz settings object",
                "properties": {
                  "validCurrency": {
                    "type": "string",
                    "description": "Three letter currency code",
                    "enum": ["CAD", "EUR", "GBP", "USD"]
                  }
                },
                "required": ["validCurrency"]
              }
            }
          }
        ]
      },
      "iCanPay": {
        "description": "iCanPay Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "authenticateId": {
                    "type": "string",
                    "description": "iCanPay Gateway authenticate ID"
                  },
                  "authenticatePw": {
                    "type": "string",
                    "description": "iCanPay Gateway authenticate password",
                    "format": "password"
                  },
                  "publicKey": {
                    "type": "string",
                    "description": "iCanPay Gateway API public key"
                  },
                  "secretKey": {
                    "type": "string",
                    "description": "iCanPay Gateway API secret key",
                    "format": "password"
                  }
                },
                "required": ["authenticateId", "authenticatePw", "publicKey", "secretKey"]
              },
              "settings": {
                "type": "object",
                "properties": {
                  "use3DSEndpoint": {
                    "type": "boolean",
                    "description": "Use 3DS endpoint"
                  }
                }
              }
            }
          }
        ]
      },
      "iCheque": {
        "description": "iCheque Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "iCheque Gateway client ID"
                  },
                  "secretWord": {
                    "type": "string",
                    "description": "iCheque Gateway secret word",
                    "format": "password"
                  },
                  "apiUserId": {
                    "type": "string",
                    "description": "Username for the Alliance API (transaction reporting)"
                  },
                  "apiSecurityToken": {
                    "type": "string",
                    "description": "Hash of the password for the Alliance API (transaction reporting)",
                    "format": "password"
                  }
                },
                "required": ["clientId", "secretWord"]
              }
            }
          }
        ]
      },
      "iDebit": {
        "description": "iDebit config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "description": "iDebit credentials object",
                "properties": {
                  "merchantId": {
                    "type": "string",
                    "description": "iDebit merchant account number"
                  },
                  "password": {
                    "type": "string",
                    "description": "iDebit merchant account password",
                    "format": "password"
                  }
                },
                "required": ["merchantId", "password"]
              }
            }
          }
        ]
      },
      "vegaaH": {
        "description": "vegaaH Gateway config",
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          {
            "type": "object",
            "required": ["credentials"],
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "terminalId": {
                    "type": "string",
                    "description": "vegaaH Gateway terminal ID"
                  },
                  "password": {
                    "type": "string",
                    "description": "vegaaH Gateway password",
                    "format": "password"
                  }
                },
                "required": ["terminalId", "password"]
              }
            }
          }
        ]
      },
      "GatewayAccount": {
        "type": "object",
        "required": [
          "gatewayName",
          "acquirerName",
          "merchantCategoryCode",
          "websites",
          "acceptedCurrencies",
          "organizationId"
        ],
        "discriminator": {
          "propertyName": "gatewayName",
          "mapping": {
            "A1Gateway": "#/components/schemas/A1Gateway",
            "AmexVPC": "#/components/schemas/AmexVPC",
            "ApcoPay": "#/components/schemas/ApcoPay",
            "AsiaPaymentGateway": "#/components/schemas/AsiaPaymentGateway",
            "AstroPay": "#/components/schemas/AstroPay",
            "AstroPayCard": "#/components/schemas/AstroPayCard",
            "AuthorizeNet": "#/components/schemas/AuthorizeNet",
            "Bambora": "#/components/schemas/Bambora",
            "BitPay": "#/components/schemas/BitPay",
            "BlueSnap": "#/components/schemas/BlueSnap",
            "BraintreePayments": "#/components/schemas/BraintreePayments",
            "CASHlib": "#/components/schemas/CASHlib",
            "CODVoucher": "#/components/schemas/CODVoucher",
            "Cardknox": "#/components/schemas/Cardknox",
            "CashToCode": "#/components/schemas/CashToCode",
            "Cashflows": "#/components/schemas/Cashflows",
            "CauriPayment": "#/components/schemas/CauriPayment",
            "Cayan": "#/components/schemas/Cayan",
            "Chase": "#/components/schemas/Chase",
            "Citadel": "#/components/schemas/Citadel",
            "Clearhaus": "#/components/schemas/Clearhaus",
            "Conekta": "#/components/schemas/Conekta",
            "Coppr": "#/components/schemas/Coppr",
            "Credorax": "#/components/schemas/Credorax",
            "Cryptonator": "#/components/schemas/Cryptonator",
            "DataCash": "#/components/schemas/DataCash",
            "Dengi": "#/components/schemas/Dengi",
            "EPG": "#/components/schemas/EPG",
            "EPro": "#/components/schemas/EPro",
            "EcorePay": "#/components/schemas/EcorePay",
            "Elavon": "#/components/schemas/Elavon",
            "FinTecSystems": "#/components/schemas/FinTecSystems",
            "Finrax": "#/components/schemas/Finrax",
            "Flexepin": "#/components/schemas/Flexepin",
            "Forte": "#/components/schemas/Forte",
            "FundSend": "#/components/schemas/FundSend",
            "GET": "#/components/schemas/GET",
            "Gigadat": "#/components/schemas/Gigadat",
            "GlobalOne": "#/components/schemas/GlobalOne",
            "Gooney": "#/components/schemas/Gooney",
            "Gpaysafe": "#/components/schemas/Gpaysafe",
            "Greenbox": "#/components/schemas/Greenbox",
            "INOVAPAY": "#/components/schemas/INOVAPAY",
            "Ilixium": "#/components/schemas/Ilixium",
            "Ingenico": "#/components/schemas/Ingenico",
            "Inovio": "#/components/schemas/Inovio",
            "InstaDebit": "#/components/schemas/InstaDebit",
            "Intuit": "#/components/schemas/Intuit",
            "IpayOptions": "#/components/schemas/IpayOptions",
            "JetPay": "#/components/schemas/JetPay",
            "Jeton": "#/components/schemas/Jeton",
            "LPG": "#/components/schemas/LPG",
            "Moneris": "#/components/schemas/Moneris",
            "MtaPay": "#/components/schemas/MtaPay",
            "NMI": "#/components/schemas/NMI",
            "Netbanking": "#/components/schemas/Netbanking",
            "Neteller": "#/components/schemas/Neteller",
            "NinjaWallet": "#/components/schemas/NinjaWallet",
            "OchaPay": "#/components/schemas/OchaPay",
            "Onlineueberweisen": "#/components/schemas/Onlineueberweisen",
            "Optimal": "#/components/schemas/Optimal",
            "Pagsmile": "#/components/schemas/Pagsmile",
            "Panamerican": "#/components/schemas/Panamerican",
            "PandaGateway": "#/components/schemas/PandaGateway",
            "ParamountEft": "#/components/schemas/ParamountEft",
            "Pay4Fun": "#/components/schemas/Pay4Fun",
            "PayCash": "#/components/schemas/PayCash",
            "PayPal": "#/components/schemas/PayPal",
            "Payeezy": "#/components/schemas/Payeezy",
            "Payflow": "#/components/schemas/Payflow",
            "PaymenTechnologies": "#/components/schemas/PaymenTechnologies",
            "Payr": "#/components/schemas/Payr",
            "Paysafe": "#/components/schemas/Paysafe",
            "Paysafecash": "#/components/schemas/Paysafecash",
            "Payvision": "#/components/schemas/Payvision",
            "Plugnpay": "#/components/schemas/Plugnpay",
            "Prosa": "#/components/schemas/Prosa",
            "RPN": "#/components/schemas/RPN",
            "Realex": "#/components/schemas/Realex",
            "Realtime": "#/components/schemas/Realtime",
            "Redsys": "#/components/schemas/Redsys",
            "Rotessa": "#/components/schemas/Rotessa",
            "SMSVoucher": "#/components/schemas/SMSVoucher",
            "Sofort": "#/components/schemas/Sofort",
            "Sagepay": "#/components/schemas/Sagepay",
            "SeamlessChex": "#/components/schemas/SeamlessChex",
            "SecureTrading": "#/components/schemas/SecureTrading",
            "Skrill": "#/components/schemas/Skrill",
            "SmartInvoice": "#/components/schemas/SmartInvoice",
            "SparkPay": "#/components/schemas/SparkPay",
            "StaticGateway": "#/components/schemas/StaticGateway",
            "Stripe": "#/components/schemas/Stripe",
            "TestProcessor": "#/components/schemas/TestProcessor",
            "ToditoCash": "#/components/schemas/ToditoCash",
            "UPayCard": "#/components/schemas/UPayCard",
            "USAePay": "#/components/schemas/USAePay",
            "VantivLitle": "#/components/schemas/VantivLitle",
            "Wallet88": "#/components/schemas/Wallet88",
            "Walpay": "#/components/schemas/Walpay",
            "Wirecard": "#/components/schemas/Wirecard",
            "WorldlineAtosFrankfurt": "#/components/schemas/WorldlineAtosFrankfurt",
            "Worldpay": "#/components/schemas/Worldpay",
            "Zotapay": "#/components/schemas/Zotapay",
            "eMerchantPay": "#/components/schemas/eMerchantPay",
            "ecoPayz": "#/components/schemas/ecoPayz",
            "iCanPay": "#/components/schemas/iCanPay",
            "iCheque": "#/components/schemas/iCheque",
            "iDebit": "#/components/schemas/iDebit",
            "vegaaH": "#/components/schemas/vegaaH"
          }
        },
        "properties": {
          "id": {
            "description": "The gateway identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas_ResourceId"
              }
            ]
          },
          "status": {
            "description": "The gateway account's status",
            "readOnly": true,
            "type": "string",
            "enum": ["active", "inactive", "pending", "closed"]
          },
          "gatewayName": {
            "$ref": "#/components/schemas/gateway-name"
          },
          "acquirerName": {
            "$ref": "#/components/schemas/acquirer-name"
          },
          "merchantCategoryCode": {
            "description": "The gateway account's merchant category code",
            "type": "integer",
            "minimum": 742,
            "maximum": 9950
          },
          "dccMarkup": {
            "description": "Dynamic currency conversion markup in basis points",
            "type": "integer",
            "minimum": -10000,
            "maximum": 10000
          },
          "dccForceCurrency": {
            "type": "string",
            "description": "Force dynamic currency conversion to the specified currency on each sale.\nLeave it empty to disable force DCC.\n"
          },
          "descriptor": {
            "description": "The gateway account's descriptor",
            "type": "string"
          },
          "cityField": {
            "description": "The gateway account's city field (also known as line 2 descriptor)",
            "type": "string"
          },
          "organizationId": {
            "description": "Organization ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas_ResourceId"
              }
            ]
          },
          "excludedDccQuoteCurrencies": {
            "description": "Excluded Dynamic Currency Conversion Quote Currencies",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "monthlyLimit": {
            "description": "Monthly Limit",
            "type": "number",
            "format": "double",
            "minimum": 0
          },
          "approvalWindowTtl": {
            "description": "The time window (in seconds) allotted for approving a suspended transaction before it is automatically canceled",
            "type": "integer",
            "default": 3600,
            "minimum": 300,
            "maximum": 16777215
          },
          "threeDSecure": {
            "description": "True, if Gateway Account allows 3DSecure",
            "type": "boolean"
          },
          "dynamicDescriptor": {
            "description": "True, if Gateway Account allows dynamic descriptor",
            "type": "boolean"
          },
          "acceptedCurrencies": {
            "description": "Accepted currencies (array of the currency three letter code)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "method": {
            "$ref": "#/components/schemas/schemas_Method"
          },
          "paymentCardSchemes": {
            "description": "Accepted payment card brands",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payment-card-brands"
            }
          },
          "isDown": {
            "description": "True if gateway is currently in downtime period.",
            "type": "boolean",
            "readOnly": true
          },
          "additionalCriteria": {
            "description": "The additional criteria that allows to check whether the gateway account can be selected for the transaction to be processed.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Condition"
              }
            ]
          },
          "timeout": {
            "description": "Gateway Account request timeout in seconds",
            "type": "integer",
            "nullable": true,
            "minimum": 10,
            "maximum": 120
          },
          "token": {
            "description": "Gateway Account token",
            "type": "string",
            "readOnly": true,
            "example": "TwiX3f92k4AiBE27BzTbQ38hHjicBz_w"
          },
          "createdTime": {
            "description": "Gateway Account created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Gateway Account updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/schemas_SelfLink"
                },
                {
                  "$ref": "#/components/schemas/OnBoardingUrlLink"
                }
              ]
            }
          }
        }
      },
      "MpiName": {
        "description": "The Merchant plug-in Name",
        "type": "string",
        "enum": [
          "PayvisionMpi",
          "WirecardMpi",
          "IlixiumMpi",
          "DataCashMpi",
          "OptimalMpi",
          "PaysafeMpi",
          "IngenicoMpi",
          "CardinalCommerce",
          "PaayMpi",
          "Panamerican",
          "eMerchantPayMpi",
          "SecureTradingMpi",
          "ClearhausMpi",
          "Other",
          "ThreeDSecureIOMpi",
          "WorldlineAtosFrankfurtMpi"
        ]
      },
      "Other": {
        "description": "Other",
        "allOf": [
          {
            "$ref": "#/components/schemas/A1GatewayMpis"
          },
          {
            "$ref": "#/components/schemas/eMerchantPayMpis"
          },
          {
            "$ref": "#/components/schemas/GETMpis"
          },
          {
            "$ref": "#/components/schemas/NMIMpis"
          },
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          },
          {
            "$ref": "#/components/schemas/VantivLitleMpis"
          },
          {
            "$ref": "#/components/schemas/WalpayMpis"
          },
          {
            "$ref": "#/components/schemas/WorldpayMpis"
          }
        ]
      },
      "PaayMpi": {
        "description": "Paay",
        "allOf": [
          {
            "$ref": "#/components/schemas/A1GatewayMpis"
          },
          {
            "$ref": "#/components/schemas/eMerchantPayMpis"
          },
          {
            "$ref": "#/components/schemas/GETMpis"
          },
          {
            "$ref": "#/components/schemas/NMIMpis"
          },
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          },
          {
            "$ref": "#/components/schemas/VantivLitleMpis"
          },
          {
            "$ref": "#/components/schemas/WalpayMpis"
          },
          {
            "$ref": "#/components/schemas/WorldpayMpis"
          },
          {
            "type": "object",
            "required": ["apiKey", "secret", "mpiUrl", "sandboxMpiUrl"],
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "Paay ApiKey"
              },
              "secret": {
                "type": "string",
                "format": "password",
                "description": "Paay secret"
              },
              "mpiUrl": {
                "type": "string",
                "description": "Paay MPI url"
              },
              "sandboxMpiUrl": {
                "type": "string",
                "description": "Paay sandbox MPI url"
              }
            }
          }
        ]
      },
      "A1GatewayMpis": {
        "description": "A1Gateway Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaayMpi", "Other"]
          }
        }
      },
      "eMerchantPayMpis": {
        "description": "eMerchantPay Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaayMpi", "eMerchantPayMpi", "Other"]
          }
        }
      },
      "GETMpis": {
        "description": "GET Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaayMpi", "Other"]
          }
        }
      },
      "NMIMpis": {
        "description": "NMI Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaayMpi", "Other"]
          }
        }
      },
      "CardinalCommerce": {
        "description": "CardinalCommerce Mpi Credentials",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          },
          {
            "type": "object",
            "required": ["merchantId", "processorId", "transactionPwd"],
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Cardinal MerchantId"
              },
              "processorId": {
                "type": "string",
                "description": "Cardinal ProcessorId"
              },
              "transactionPwd": {
                "type": "string",
                "format": "password",
                "description": "Cardinal TransactionPwd"
              }
            }
          }
        ]
      },
      "PayvisionMpi": {
        "description": "Payvision Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayvisionMpis"
          }
        ]
      },
      "PayvisionMpis": {
        "description": "Payvision Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi",
            "CardinalCommerce": "#/components/schemas/CardinalCommerce",
            "PayvisionMpi": "#/components/schemas/PayvisionMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PayvisionMpi", "Payvision3DS2", "CardinalCommerce", "PaayMpi", "Other"]
          }
        }
      },
      "VantivLitleMpis": {
        "description": "VantivLitle Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaayMpi", "Other"]
          }
        }
      },
      "WalpayMpis": {
        "description": "WalpayMpis Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaayMpi", "Other"]
          }
        }
      },
      "WorldpayMpis": {
        "description": "Worldpay Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Other": "#/components/schemas/Other",
            "PaayMpi": "#/components/schemas/PaayMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaayMpi", "Other"]
          }
        }
      },
      "ThreeDSecureIOMpi": {
        "description": "ThreeDSecureIOMpi",
        "allOf": [
          {
            "$ref": "#/components/schemas/WorldlineAtosFrankfurtMpis"
          },
          {
            "type": "object",
            "required": [
              "merchantId",
              "merchantName",
              "merchantAcquirerBinVisa",
              "merchantAcquirerBinMastercard",
              "merchantCountry",
              "merchantUrl"
            ],
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Merchant Id",
                "maxLength": 24
              },
              "merchantName": {
                "type": "string",
                "description": "Merchant Name",
                "maxLength": 25
              },
              "merchantAcquirerBinVisa": {
                "type": "string",
                "description": "Visa Acquirer BIN",
                "minLength": 6,
                "maxLength": 11
              },
              "merchantAcquirerBinMastercard": {
                "type": "string",
                "description": "Mastercard Acquirer BIN",
                "minLength": 6,
                "maxLength": 11
              },
              "merchantCountry": {
                "type": "string",
                "description": "Merchant Country ISO Alpha-2 Code",
                "maxLength": 2,
                "example": "US"
              },
              "merchantUrl": {
                "type": "string",
                "description": "Merchant URL",
                "maxLength": 2048
              }
            }
          }
        ]
      },
      "WorldlineAtosFrankfurtMpis": {
        "description": "WorldlineAtosFrankfurt Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "ThreeDSecureIOMpi": "#/components/schemas/ThreeDSecureIOMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["ThreeDSecureIOMpi"]
          }
        }
      },
      "WirecardMpi": {
        "description": "Wirecard Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/WirecardMpis"
          }
        ]
      },
      "WirecardMpis": {
        "description": "Wirecard Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "WirecardMpi": "#/components/schemas/WirecardMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["WirecardMpi"]
          }
        }
      },
      "TestProcessorMpi": {
        "description": "TestProcessor Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/TestProcessorMpis"
          }
        ]
      },
      "TestProcessorMpis": {
        "description": "TestProcessorMpis Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "TestSandboxMpi": "#/components/schemas/TestProcessorMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["TestSandboxMpi"]
          }
        }
      },
      "SmartInvoiceMpi": {
        "description": "SmartInvoice Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmartInvoiceMpis"
          }
        ]
      },
      "SmartInvoiceMpis": {
        "description": "SmartInvoice Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "SmartInvoiceMpi": "#/components/schemas/SmartInvoiceMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["SmartInvoiceMpi"]
          }
        }
      },
      "SecureTradingMpi": {
        "description": "SecureTrading Mpi",
        "allOf": [
          {
            "$ref": "#/components/schemas/SecureTradingMpis"
          }
        ]
      },
      "SecureTradingMpis": {
        "description": "SecureTrading Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "SecureTradingMpi": "#/components/schemas/SecureTradingMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["SecureTradingMpi"]
          }
        }
      },
      "PaysafeMpi": {
        "description": "Paysafe Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaysafeMpis"
          }
        ]
      },
      "PaysafeMpis": {
        "description": "Paysafe Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "PaysafeMpi": "#/components/schemas/PaysafeMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["PaysafeMpi"]
          }
        }
      },
      "PanamericanMpi": {
        "description": "Panamerican Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/PanamericanMpis"
          }
        ]
      },
      "PanamericanMpis": {
        "description": "Panamerican Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "Panamerican": "#/components/schemas/PanamericanMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["Panamerican"]
          }
        }
      },
      "OptimalMpi": {
        "description": "Optimal Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/OptimalMpis"
          }
        ]
      },
      "OptimalMpis": {
        "description": "Optimal Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "OptimalMpi": "#/components/schemas/OptimalMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["OptimalMpi"]
          }
        }
      },
      "InovioMpi": {
        "description": "Inovio Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/InovioMpis"
          }
        ]
      },
      "InovioMpis": {
        "description": "Inovio Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "InovioMpi": "#/components/schemas/InovioMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["InovioMpi"]
          }
        }
      },
      "IngenicoMpi": {
        "description": "Ingenico Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/IngenicoMpis"
          }
        ]
      },
      "IngenicoMpis": {
        "description": "Ingenico Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "IngenicoMpi": "#/components/schemas/IngenicoMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["IngenicoMpi"]
          }
        }
      },
      "IlixiumMpi": {
        "description": "Ilixium Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/IlixiumMpis"
          }
        ]
      },
      "IlixiumMpis": {
        "description": "IlixiumMpis Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "IlixiumMpi": "#/components/schemas/IlixiumMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["IlixiumMpi"]
          }
        }
      },
      "DataCashMpi": {
        "description": "DataCash Integrated",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataCashMpis"
          }
        ]
      },
      "DataCashMpis": {
        "description": "DataCash Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "DataCashMpi": "#/components/schemas/DataCashMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["DataCashMpi"]
          }
        }
      },
      "ClearhausMpi": {
        "description": "Clearhaus Mpi Credentials",
        "allOf": [
          {
            "$ref": "#/components/schemas/ClearhausMpis"
          },
          {
            "type": "object",
            "required": ["merchantId", "acquirerBin", "apiKey"],
            "properties": {
              "merchantId": {
                "type": "string",
                "description": "Merchant account ID or Card Acceptor ID provided by the acquiring bank."
              },
              "acquirerBin": {
                "type": "string",
                "description": "Acquiring institution identification code."
              },
              "apiKey": {
                "type": "string",
                "format": "password",
                "description": "Mpi Api key"
              }
            }
          }
        ]
      },
      "ClearhausMpis": {
        "description": "Clearhaus Mpis",
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "ClearhausMpi": "#/components/schemas/ClearhausMpi"
          }
        },
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MpiName"
              }
            ],
            "enum": ["ClearhausMpi"]
          }
        }
      },
      "AstroPayBanks": {
        "type": "string",
        "enum": [
          "CU",
          "SE",
          "BV",
          "BM",
          "SM",
          "OX",
          "BQ",
          "EN",
          "FA",
          "BW",
          "SS",
          "SU",
          "WA",
          "FB",
          "TC",
          "I",
          "BB",
          "B",
          "CA",
          "SB",
          "BL",
          "NB",
          "UI"
        ]
      },
      "GatewayAccountEmbed": {
        "type": "object",
        "description": "Gateway Account object",
        "readOnly": true,
        "properties": {
          "gatewayAccount": {
            "$ref": "#/components/schemas/GatewayAccount"
          }
        }
      },
      "WebsiteEmbed": {
        "type": "object",
        "description": "Website object",
        "readOnly": true,
        "properties": {
          "website": {
            "type": "object"
          }
        }
      },
      "AuthTransactionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["authTransaction"]
          }
        },
        "required": ["rel"]
      },
      "AuthTransactionEmbed": {
        "type": "object",
        "description": "Auth Transaction object",
        "readOnly": true,
        "properties": {
          "authTransaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "PaymentCard": {
        "type": "object",
        "required": ["customerId"],
        "properties": {
          "id": {
            "description": "The card identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "method": {
            "description": "The method of payment instrument.",
            "type": "string",
            "readOnly": true,
            "enum": ["payment-card"]
          },
          "bin": {
            "description": "The card's bin (the PAN's first 6 digits)",
            "type": "string",
            "format": "bin",
            "readOnly": true
          },
          "last4": {
            "description": "The PAN's last 4 digits",
            "type": "string",
            "readOnly": true
          },
          "expYear": {
            "description": "Card's expiry year.",
            "type": "integer"
          },
          "expMonth": {
            "description": "Card's expiry month.",
            "type": "integer"
          },
          "billingAddress": {
            "description": "The Billing Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "fingerprint": {
            "description": "A unique value to identify the PAN regardless of expiration dates.  It contains alphanumeric values.",
            "type": "string",
            "readOnly": true
          },
          "panFingerprint": {
            "deprecated": true,
            "description": "A unique value to identify the PAN regardless of expiration dates.  It contains alphanumeric values. Use `fingerprint` instead.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "Payment Card status.  When a card is `active` it means it has been used at least once for an approved transaction.\nTo remove a card from being in use, set it as `deactivated` (see the deactivation endpoint).\n",
            "type": "string",
            "readOnly": true,
            "enum": ["active", "expired", "inactive", "deactivated", "pending", "verification-needed"]
          },
          "brand": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/payment-card-brands"
              }
            ]
          },
          "bankCountry": {
            "description": "Payment Card bank country",
            "type": "string",
            "readOnly": true
          },
          "bankName": {
            "description": "Payment Card bank name",
            "type": "string",
            "readOnly": true
          },
          "stickyGatewayAccountId": {
            "description": "Default Gateway Account ID used for transactions",
            "type": "string",
            "readOnly": true
          },
          "createdTime": {
            "description": "Card created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Card updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expirationReminderTime": {
            "description": "Time expiration reminder event will be triggered",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expirationReminderNumber": {
            "description": "Number of expiration reminder events triggered",
            "type": "integer",
            "readOnly": true
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                },
                {
                  "$ref": "#/components/schemas/AuthTransactionLink"
                },
                {
                  "$ref": "#/components/schemas/ApprovalUrlLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AuthTransactionEmbed"
                },
                {
                  "$ref": "#/components/schemas/CustomerEmbed"
                }
              ]
            }
          }
        }
      },
      "PaymentCardEmbed": {
        "type": "object",
        "description": "Payment Card object",
        "readOnly": true,
        "properties": {
          "paymentCard": {
            "$ref": "#/components/schemas/PaymentCard"
          }
        }
      },
      "BankAccountEmbed": {
        "type": "object",
        "description": "Bank Account object",
        "readOnly": true,
        "properties": {
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccount"
          }
        }
      },
      "Invoice": {
        "type": "object",
        "required": ["customerId", "websiteId", "currency"],
        "properties": {
          "id": {
            "description": "The invoice identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "invoiceNumber": {
            "description": "An auto-incrementing number based on the sequence of invoices for any particular customer.",
            "readOnly": true,
            "type": "integer"
          },
          "customerId": {
            "description": "The customer's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websiteId": {
            "description": "The website's ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "organizationId": {
            "description": "The organization's ID",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "subscriptionId": {
            "description": "The related Subscription's ID if available, otherwise null",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "amount": {
            "description": "The Invoice's amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "amountDue": {
            "description": "The Invoice's due amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "subtotalAmount": {
            "description": "The Invoice's subtotal amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "discountAmount": {
            "description": "The Invoice's discounts amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "taxAmount": {
            "description": "The Invoice's taxes amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "shippingAmount": {
            "description": "The Invoice's shipping amount",
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "billingAddress": {
            "description": "Invoice's billing address",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "deliveryAddress": {
            "description": "Invoice's delivery address",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "poNumber": {
            "description": "Purchase order number which will be displayed on the invoice",
            "nullable": true,
            "example": "PO123456",
            "type": "string"
          },
          "notes": {
            "description": "Notes for the customer which will be displayed on the invoice",
            "type": "string"
          },
          "items": {
            "type": "array",
            "description": "Invoice Items array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            }
          },
          "taxes": {
            "type": "array",
            "description": "Taxes applied to this invoice",
            "readOnly": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/InvoiceTax"
                }
              ]
            }
          },
          "discounts": {
            "type": "array",
            "description": "Discounts applied",
            "readOnly": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/InvoiceDiscount"
                }
              ]
            }
          },
          "transactions": {
            "type": "array",
            "description": "Invoice transactions array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "autopayScheduledTime": {
            "description": "Invoice autopay scheduled time",
            "type": "string",
            "format": "date-time"
          },
          "autopayRetryNumber": {
            "description": "Invoice autopay retry number",
            "readOnly": true,
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "retryInstruction": {
            "description": "The invoice retry instruction",
            "type": "object",
            "properties": {
              "attempts": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "scheduleInstruction": {
                      "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
                    }
                  },
                  "required": ["scheduleInstruction"]
                }
              },
              "afterAttemptPolicies": {
                "description": "The policy on the attempt finishes",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["change-subscription-renewal-time"]
                }
              },
              "afterRetryEndPolicies": {
                "description": "The policy on the retry ends",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["abandon-invoice", "cancel-subscription"]
                }
              }
            },
            "required": ["attempts", "afterAttemptPolicies", "afterRetryEndPolicies"]
          },
          "revision": {
            "description": "The number of times the invoice data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
            "type": "integer",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Invoice status.",
            "readOnly": true,
            "enum": [
              "draft",
              "unpaid",
              "paid",
              "past-due",
              "delinquent",
              "abandoned",
              "voided",
              "partially-paid",
              "partially-refunded",
              "refunded",
              "disputed"
            ]
          },
          "type": {
            "type": "string",
            "description": "Invoice type.",
            "readOnly": true,
            "enum": ["initial", "renewal", "interim", "cancellation", "one-time", "refund", "charge"]
          },
          "delinquentCollectionPeriod": {
            "type": "integer",
            "description": "Delinquent Collection Period - difference between paidTime and dueTime in days.",
            "readOnly": true
          },
          "collectionPeriod": {
            "type": "integer",
            "description": "Collection Period - difference between paidTime and issuedTime in days.",
            "readOnly": true
          },
          "abandonedTime": {
            "description": "Invoice abandoned time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "voidedTime": {
            "description": "Invoice voided time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "paidTime": {
            "description": "Invoice paid time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "dueTime": {
            "description": "Invoice due time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "issuedTime": {
            "description": "Invoice issued time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "createdTime": {
            "description": "Invoice created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Invoice updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "dueReminderTime": {
            "description": "Time past due reminder event will be triggered",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "dueReminderNumber": {
            "description": "Number of past due reminder events triggered",
            "type": "integer",
            "readOnly": true
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                },
                {
                  "$ref": "#/components/schemas/WebsiteLink"
                },
                {
                  "$ref": "#/components/schemas/OrganizationLink"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceLink"
                },
                {
                  "$ref": "#/components/schemas/TransactionAllocationsLink"
                },
                {
                  "$ref": "#/components/schemas/RecalculateInvoiceLink"
                },
                {
                  "$ref": "#/components/schemas/SubscriptionLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CustomerEmbed"
                },
                {
                  "$ref": "#/components/schemas/WebsiteEmbed"
                },
                {
                  "$ref": "#/components/schemas/OrganizationEmbed"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceEmbed"
                }
              ]
            }
          }
        }
      },
      "InvoicesEmbed": {
        "type": "object",
        "description": "Invoices collection",
        "readOnly": true,
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "OrganizationLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["organization"]
          }
        },
        "required": ["rel"]
      },
      "TransactionAllocationsLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["transactionAllocations"]
          }
        },
        "required": ["rel"]
      },
      "RecalculateInvoiceLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["recalculateInvoice"]
          }
        },
        "required": ["rel"]
      },
      "SubscriptionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["subscription"]
          }
        },
        "required": ["rel"]
      },
      "schemas_ContactPhoneNumbers": {
        "description": "The list of phone numbers",
        "type": "array",
        "items": {
          "type": "object",
          "required": ["label", "value"],
          "properties": {
            "label": {
              "description": "The phone label",
              "type": "string"
            },
            "value": {
              "description": "The phone value",
              "type": "string"
            },
            "primary": {
              "description": "True if phone is primary",
              "type": "boolean"
            }
          }
        }
      },
      "schemas_ContactEmails": {
        "description": "The list of emails",
        "type": "array",
        "items": {
          "type": "object",
          "required": ["label", "value"],
          "properties": {
            "label": {
              "description": "The email label",
              "type": "string"
            },
            "value": {
              "description": "The email value",
              "type": "string"
            },
            "primary": {
              "description": "True if email is primary",
              "type": "boolean"
            }
          }
        }
      },
      "Organization": {
        "type": "object",
        "required": ["name", "country"],
        "properties": {
          "id": {
            "description": "The organization identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas_ResourceId"
              }
            ]
          },
          "createdTime": {
            "description": "The organization created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The organization updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "name": {
            "description": "The organization name",
            "type": "string",
            "maxLength": 60
          },
          "address": {
            "description": "The organization street address",
            "type": "string",
            "maxLength": 60
          },
          "address2": {
            "description": "The organization street address",
            "type": "string",
            "maxLength": 60
          },
          "city": {
            "description": "The organization city",
            "type": "string",
            "maxLength": 45
          },
          "region": {
            "description": "The organization region (state)",
            "type": "string",
            "maxLength": 45
          },
          "country": {
            "description": "The organization country ISO Alpha-2 code",
            "type": "string",
            "pattern": "^[A-Z]{2}$"
          },
          "postalCode": {
            "description": "The organization postal code",
            "type": "string",
            "maxLength": 10
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/schemas_ContactPhoneNumbers"
          },
          "emails": {
            "$ref": "#/components/schemas/schemas_ContactEmails"
          },
          "taxDescriptor": {
            "description": "The organization's tax label. This will be displayed on the invoice.",
            "type": "string",
            "maxLength": 255
          },
          "invoiceTimeZone": {
            "description": "Invoice will use this time zone to display time otherwise UTC will be used. Example \"America/New_York\"",
            "type": "string",
            "maxLength": 50
          },
          "isPrimary": {
            "description": "True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false)",
            "type": "boolean"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/schemas_SelfLink"
            }
          }
        }
      },
      "OrganizationEmbed": {
        "type": "object",
        "description": "Organization object",
        "readOnly": true,
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        }
      },
      "TransactionLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["transaction"]
          }
        },
        "required": ["rel"]
      },
      "TransactionEmbed": {
        "type": "object",
        "description": "Transaction object",
        "readOnly": true,
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "Dispute": {
        "type": "object",
        "required": ["currency", "transactionId", "postedTime", "type", "status", "reasonCode"],
        "properties": {
          "id": {
            "description": "The dispute identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "The dispute's customer ID",
            "type": "string",
            "readOnly": true
          },
          "transactionId": {
            "description": "The dispute's transaction ID",
            "type": "string"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "amount": {
            "description": "The dispute amount",
            "type": "number",
            "format": "double"
          },
          "acquirerReferenceNumber": {
            "description": "The dispute's acquirer reference number",
            "type": "string"
          },
          "reasonCode": {
            "description": "The dispute's reason code",
            "type": "string",
            "enum": [
              "1000",
              "10.1",
              "10.2",
              "10.3",
              "10.4",
              "10.5",
              "11.1",
              "11.2",
              "11.3",
              "12",
              "12.1",
              "12.2",
              "12.3",
              "12.4",
              "12.5",
              "12.6",
              "12.7",
              "13.1",
              "13.2",
              "13.3",
              "13.4",
              "13.5",
              "13.6",
              "13.7",
              "13.8",
              "13.9",
              "2",
              "30",
              "31",
              "35",
              "37",
              "40",
              "41",
              "42",
              "46",
              "47",
              "49",
              "50",
              "53",
              "54",
              "55",
              "57",
              "59",
              "60",
              "62",
              "7",
              "70",
              "71",
              "72",
              "73",
              "74",
              "75",
              "76",
              "77",
              "79",
              "8",
              "80",
              "81",
              "82",
              "83",
              "85",
              "86",
              "93",
              "00",
              "63",
              "A01",
              "A02",
              "A08",
              "F10",
              "F14",
              "F22",
              "F24",
              "F29",
              "C02",
              "C04",
              "C05",
              "C08",
              "C14",
              "C18",
              "C28",
              "C31",
              "C32",
              "M10",
              "M49",
              "P01",
              "P03",
              "P04",
              "P05",
              "P07",
              "P08",
              "P22",
              "P23",
              "R03",
              "R13",
              "M01",
              "FR1",
              "FR4",
              "FR6",
              "AL",
              "AP",
              "AW",
              "CA",
              "CD",
              "CR",
              "DA",
              "DP",
              "DP1",
              "EX",
              "IC",
              "IN",
              "IS",
              "LP",
              "N",
              "NA",
              "NC",
              "P",
              "RG",
              "RM",
              "RN1",
              "RN2",
              "SV",
              "TF",
              "TNM",
              "UA01",
              "UA02",
              "UA32",
              "UA99",
              "UA03",
              "UA10",
              "UA11",
              "UA12",
              "UA18",
              "UA20",
              "UA21",
              "UA22",
              "UA23",
              "UA28",
              "UA30",
              "UA31",
              "UA38",
              "duplicate",
              "fraudulent",
              "subscription_canceled",
              "product_unacceptable",
              "product_not_received",
              "unrecognized",
              "credit_not_processed",
              "customer_initiated",
              "incorrect_account_details",
              "insufficient_funds",
              "bank_cannot_process",
              "debit_not_authorized",
              "general"
            ]
          },
          "category": {
            "description": "The dispute's category",
            "type": "string",
            "readOnly": true,
            "enum": [
              "fraud",
              "unrecognized",
              "product-not-received",
              "product-unacceptable",
              "product-not-refunded",
              "duplicate",
              "subscription-canceled",
              "uncategorized"
            ]
          },
          "type": {
            "description": "The dispute's type",
            "type": "string",
            "enum": ["information-request", "first-chargeback", "second-chargeback", "arbitration"]
          },
          "status": {
            "description": "The dispute's status",
            "type": "string",
            "enum": ["response-needed", "under-review", "forfeited", "won", "lost", "unknown"]
          },
          "postedTime": {
            "description": "Dispute posted time",
            "type": "string",
            "format": "date-time"
          },
          "deadlineTime": {
            "description": "Dispute deadline time",
            "type": "string",
            "format": "date-time"
          },
          "rawResponse": {
            "description": "Dispute raw response from gateway",
            "type": "string",
            "readOnly": true
          },
          "resolvedTime": {
            "description": "Dispute resolved time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "createdTime": {
            "description": "Dispute created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Dispute updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/TransactionLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionEmbed"
                }
              ]
            }
          }
        }
      },
      "EventType": {
        "type": "string",
        "description": "Rebilly event type",
        "readOnly": true,
        "enum": [
          "dispute-created",
          "gateway-account-requested",
          "transaction-processed",
          "subscription-activated",
          "subscription-canceled",
          "subscription-created",
          "subscription-renewed",
          "payment-card-expired",
          "invoice-past-due",
          "invoice-paid",
          "transaction-declined",
          "transaction-process-requested",
          "risk-score-changed",
          "transaction-discrepancy-found"
        ]
      },
      "MatchedRule": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "id": {
            "description": "Event tracking id",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "event": {
            "$ref": "#/components/schemas/EventType"
          },
          "description": {
            "description": "Rule's description",
            "type": "string"
          },
          "rulesVersion": {
            "type": "integer",
            "description": "Rule version"
          },
          "occurredTime": {
            "description": "Time when event occurred.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "context": {
            "type": "object",
            "description": "Event's context",
            "additionalProperties": {
              "type": "string"
            }
          },
          "processedRules": {
            "type": "object",
            "description": "Processed rules",
            "properties": {
              "name": {
                "type": "string",
                "description": "Rule name"
              },
              "actions": {
                "type": "array",
                "description": "Rule actions applied",
                "items": {
                  "type": "string"
                }
              },
              "result": {
                "type": "string",
                "description": "Rule result"
              }
            }
          }
        }
      },
      "FileCreateFromInline": {
        "type": "object",
        "required": ["file"],
        "properties": {
          "file": {
            "description": "The file in base64 encoded format.",
            "type": "string",
            "example": "R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs="
          },
          "isPublic": {
            "description": "The File visibility. If public a permalink is provided.",
            "type": "boolean",
            "example": false
          },
          "name": {
            "description": "The file name used for downloading",
            "type": "string",
            "example": "logo.png"
          },
          "description": {
            "description": "The file description",
            "type": "string",
            "example": "My file description"
          },
          "tags": {
            "description": "The tags list",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["test", "tags"]
          }
        }
      },
      "FileCreateFromUrl": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "url": {
            "description": "The URL of the file to upload.",
            "type": "string",
            "example": "https://blog.rebilly.com/wp-content/uploads/2017/09/rb_LogoInverted_Small.png"
          },
          "isPublic": {
            "description": "The File visibility. If public a permalink is provided.",
            "type": "boolean",
            "example": false
          },
          "name": {
            "description": "The file name used for downloading",
            "type": "string",
            "example": "logo.png"
          },
          "description": {
            "description": "The file description",
            "type": "string",
            "example": "My file description"
          },
          "tags": {
            "description": "The tags list",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["test", "tags"]
          }
        }
      },
      "InvoiceIssue": {
        "type": "object",
        "properties": {
          "issuedTime": {
            "description": "Invoice issued time. Will be issued immediately if `null` or omitted.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueTime": {
            "description": "Invoice due time. Will be set same as `issuedTime` if `null` or omitted.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "InvoiceReissue": {
        "type": "object",
        "properties": {
          "dueTime": {
            "description": "Invoice due time. Will be set as current date-time if `null` or omitted.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "InvoiceTimeline": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The Timeline message identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Timeline message type",
            "type": "string",
            "readOnly": true,
            "enum": [
              "timeline-comment-created",
              "invoice-created",
              "invoice-issued",
              "invoice-abandoned",
              "invoice-voided",
              "invoice-past-due",
              "invoice-paid",
              "invoice-partially-paid",
              "invoice-disputed",
              "invoice-refunded",
              "invoice-partially-refunded",
              "invoice-renewal-payment-declined",
              "email-message-sent",
              "coupon-applied",
              "transaction-approved",
              "transaction-abandoned",
              "transaction-canceled",
              "transaction-declined",
              "transaction-refunded",
              "transaction-voided"
            ]
          },
          "triggeredBy": {
            "description": "Shows who or what triggered the Timeline event",
            "type": "string",
            "readOnly": true,
            "enum": ["rebilly", "app", "direct-api"]
          },
          "message": {
            "description": "The message that describes the message details",
            "type": "string"
          },
          "extraData": {
            "$ref": "#/components/schemas/TimelineExtraData"
          },
          "occurredTime": {
            "description": "Timeline message time",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "InvoiceLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["invoice"]
          }
        },
        "required": ["rel"]
      },
      "InvoiceTransactionAllocation": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "transactionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InvoiceLink"
                },
                {
                  "$ref": "#/components/schemas/TransactionLink"
                }
              ]
            }
          }
        }
      },
      "KycDocumentRejection": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "type": {
            "type": "string",
            "enum": ["document-unreadable", "document-expired", "document-not-matching", "underage-person", "other"]
          },
          "message": {
            "description": "The rejection message",
            "type": "string",
            "example": "Provided document is unreadable"
          }
        }
      },
      "KycDocumentMatches": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "score": {
            "description": "The calculated score that represents the % of confidence that this ID represents the given customer",
            "type": "number",
            "format": "double",
            "example": 0.75
          },
          "data": {
            "type": "object",
            "properties": {
              "containsImage": {
                "description": "Flag that indicates if there is an image that contains a face on it",
                "type": "boolean",
                "example": true
              },
              "isIdentityDocument": {
                "description": "Flag that indicates if this looks like and ID",
                "type": "boolean",
                "example": true
              },
              "isPublishedOnline": {
                "description": "If there is an exact match found online",
                "type": "boolean",
                "example": false
              },
              "firstName": {
                "description": "The customer first name if it was matched, null otherwise",
                "type": "string",
                "example": "John"
              },
              "lastName": {
                "description": "The customer last name if it was matched, null otherwise",
                "type": "string",
                "example": "Doe"
              },
              "dateOfBirth": {
                "description": "The date of birth found on the document, null if not found",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServerTimestamp"
                  }
                ]
              },
              "expiryDate": {
                "description": "The expiry date found on the document, null if not found",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServerTimestamp"
                  }
                ]
              },
              "issueDate": {
                "description": "The issued date found on the document, null if not found",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServerTimestamp"
                  }
                ]
              },
              "hasMinimalAge": {
                "description": "Checks the minimal age, 21+ for USA and 18+ for all other countries. Null if dateOfBirth could not be determined.",
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "KycDocument": {
        "type": "object",
        "required": ["fileId", "customerId", "documentType", "status"],
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "fileId": {
            "description": "Linked File object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "Linked Customer object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "documentType": {
            "description": "Document type submitted for validation, only identity-proof type is analyzed in an automated manner.",
            "type": "string",
            "enum": ["identity-proof", "address-proof"]
          },
          "status": {
            "description": "Status of the validation.",
            "type": "string",
            "readOnly": true,
            "enum": ["pending", "in-progress", "accepted", "rejected"]
          },
          "reviewerId": {
            "description": "Reviewer's user ID.",
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "reviewerName": {
            "description": "Reviewer's first and last name.",
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reviewTime": {
            "description": "Date and time of manual review.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/KycDocumentRejection"
          },
          "documentMatches": {
            "$ref": "#/components/schemas/KycDocumentMatches"
          },
          "createdTime": {
            "description": "Creation date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Latest update date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "processedTime": {
            "description": "Processing date/time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 3,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/FileLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                }
              ]
            }
          }
        }
      },
      "ResetPasswordToken": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "token": {
            "description": "The token's identifier string",
            "type": "string",
            "readOnly": true
          },
          "username": {
            "description": "The token's username",
            "type": "string"
          },
          "credentialId": {
            "description": "Token's credential ID",
            "type": "string",
            "readOnly": true
          },
          "expiredTime": {
            "description": "Password expired time",
            "type": "string",
            "format": "date-time"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "PaymentCardCreateToken": {
        "type": "object",
        "required": ["customerId", "token"],
        "properties": {
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "token": {
            "description": "PaymentCardToken ID.",
            "type": "string"
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          }
        }
      },
      "PaymentCardCreatePlain": {
        "type": "object",
        "required": ["customerId", "pan", "expYear", "expMonth", "billingAddress"],
        "properties": {
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "pan": {
            "description": "The card PAN (Primary Account Number).",
            "type": "string",
            "writeOnly": true
          },
          "expYear": {
            "description": "Card's expiry year.",
            "type": "integer"
          },
          "expMonth": {
            "description": "Card's expiry month.",
            "type": "integer"
          },
          "cvv": {
            "description": "Card's cvv (card verification value).",
            "type": "string",
            "writeOnly": true
          },
          "billingAddress": {
            "description": "The Billing Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          }
        }
      },
      "PaymentInstrumentValidation": {
        "type": "object",
        "required": ["method", "paymentInstrumentId"],
        "properties": {
          "id": {
            "description": "Payment instrument validation ID",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "method": {
            "description": "Payment method",
            "type": "string"
          },
          "paymentInstrumentId": {
            "description": "Payment instrument ID",
            "type": "string"
          },
          "actionCode": {
            "description": "Action code",
            "type": "string",
            "readOnly": true
          },
          "responseCode": {
            "description": "Response code",
            "type": "string",
            "readOnly": true
          },
          "avsResult": {
            "description": "Address verification result",
            "type": "string",
            "readOnly": true
          },
          "cvvResult": {
            "description": "CVV result",
            "type": "string",
            "readOnly": true
          },
          "billingAddress": {
            "description": "Billing address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "expYear": {
            "description": "Payment card's expiry year.",
            "type": "integer",
            "readOnly": true
          },
          "expMonth": {
            "description": "Payment card's expiry month.",
            "type": "integer",
            "readOnly": true
          },
          "createdTime": {
            "description": "Payment instrument validation created time.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "Payment": {
        "type": "object",
        "required": ["websiteId", "customerId", "currency", "amount"],
        "properties": {
          "id": {
            "description": "The payment identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websiteId": {
            "description": "The website identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "The customer identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "amount": {
            "description": "The payment amount",
            "type": "number",
            "format": "double"
          },
          "scheduledTime": {
            "description": "The time the payment is scheduled for collection",
            "type": "string",
            "format": "date-time"
          },
          "invoiceIds": {
            "description": "The array of invoice identifiers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            }
          },
          "description": {
            "description": "The payment description",
            "type": "string",
            "maxLength": 255
          },
          "retryInstruction": {
            "$ref": "#/components/schemas/PaymentRetry"
          },
          "retryNumber": {
            "readOnly": true,
            "description": "The position in the sequence of retries",
            "type": "integer"
          },
          "retriedPaymentId": {
            "readOnly": true,
            "description": "The retried payment ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          "billingAddress": {
            "description": "Billing Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "status": {
            "description": "Payment status",
            "type": "string",
            "readOnly": true,
            "enum": ["scheduled", "queued", "in-progress", "incomplete", "waiting-gateway", "suspended", "completed"]
          },
          "result": {
            "description": "Payment result",
            "type": "string",
            "readOnly": true,
            "enum": ["approved", "declined", "canceled", "abandoned", "unknown"]
          },
          "riskMetadata": {
            "description": "Risk metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskMetadata"
              }
            ]
          },
          "createdTime": {
            "description": "Payment created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Payment updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/WebsiteLink"
                },
                {
                  "$ref": "#/components/schemas/TransactionLink"
                },
                {
                  "$ref": "#/components/schemas/ApprovalUrlLink"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WebsiteEmbed"
                },
                {
                  "$ref": "#/components/schemas/CustomerEmbed"
                },
                {
                  "$ref": "#/components/schemas/TransactionEmbed"
                }
              ]
            }
          }
        }
      },
      "PayPalAccount": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The PayPal identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "method": {
            "description": "The method of payment instrument.",
            "type": "string",
            "readOnly": true,
            "enum": ["paypal"]
          },
          "customerId": {
            "description": "The Customer's ID.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "billingAddress": {
            "description": "The Customer's Billing Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "username": {
            "description": "PayPal username.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "PayPal Account status",
            "type": "string",
            "readOnly": true,
            "enum": ["inactive", "active", "deactivated"]
          },
          "createdTime": {
            "description": "PayPal Account created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "PayPal Account updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                },
                {
                  "$ref": "#/components/schemas/ApprovalUrlLink"
                }
              ]
            }
          }
        },
        "required": ["customerId", "billingAddress"]
      },
      "PayPalAccountAuthorization": {
        "type": "object",
        "required": ["websiteId", "currency"],
        "properties": {
          "websiteId": {
            "description": "The Website ID",
            "type": "string"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "amount": {
            "description": "The amount to authorize",
            "type": "number",
            "format": "double",
            "default": 1
          },
          "gatewayAccountId": {
            "description": "The Gateway Account ID which use to send transactions",
            "type": "string"
          },
          "redirectUrl": {
            "$ref": "#/components/schemas/TransactionRedirectUrl"
          }
        }
      },
      "InitialInvoiceLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["initialInvoice"]
          }
        },
        "required": ["rel"]
      },
      "RecentInvoiceLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "description": "The link type",
            "type": "string",
            "enum": ["recentInvoice"]
          }
        },
        "required": ["rel"]
      },
      "RecentInvoiceEmbed": {
        "type": "object",
        "description": "Recent Invoice object",
        "readOnly": true,
        "properties": {
          "recentInvoice": {
            "$ref": "#/components/schemas/Invoice"
          }
        }
      },
      "InitialInvoiceEmbed": {
        "type": "object",
        "description": "Initial Invoice object",
        "readOnly": true,
        "properties": {
          "initialInvoice": {
            "$ref": "#/components/schemas/Invoice"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "discriminator": {
          "propertyName": "orderType",
          "mapping": {
            "one-time-order": "#/components/schemas/one-time-order",
            "subscription-order": "#/components/schemas/subscription-order"
          }
        },
        "required": ["orderType", "customerId", "websiteId", "items"],
        "properties": {
          "id": {
            "description": "The Subscription identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "orderType": {
            "description": "Specifies the type of order, a subscription or a one-time purchase.\n",
            "type": "string",
            "enum": ["subscription-order", "one-time-order"],
            "default": "subscription-order"
          },
          "billingStatus": {
            "description": "The billing status of the most recent invoice.  It may\nhelp you determine if you should change the service status\nsuch as suspending the service.\n",
            "type": "string",
            "readOnly": true,
            "enum": ["unpaid", "past-due", "delinquent", "paid", "voided", "refunded", "disputed", "voided"]
          },
          "customerId": {
            "description": "Unique id for each customer",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websiteId": {
            "description": "Unique id for each website",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "initialInvoiceId": {
            "description": "Unique id for the initial invoice",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "recentInvoiceId": {
            "description": "Unique id for the most recently issued invoice. It might not be `paid` yet.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "required": ["planId"],
              "properties": {
                "planId": {
                  "description": "Unique id for each plan",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                },
                "quantity": {
                  "description": "Number of units of the product on the given plan",
                  "type": "integer"
                }
              }
            }
          },
          "deliveryAddress": {
            "description": "Delivery address",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "billingAddress": {
            "description": "Billing address",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "riskMetadata": {
            "nullable": true,
            "example": null,
            "description": "Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskMetadata"
              }
            ]
          },
          "activationTime": {
            "description": "Subscription activation time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "couponIds": {
            "type": "array",
            "nullable": true,
            "description": "A list of coupons to redeem on the customer and restrict to this subscription.\nRead more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).\n\nThis parameter respects the following logic:\n\n- When not passed then applied coupons will not be changed.\n\n- When empty array passed then all applied coupon redemptions will be canceled.\n\n- When list of coupons is passed then not applied yet coupons will be applied, already applied coupons\nwill not change their state, applied coupons that are not presented in passed list will be canceled.\n\nIf list of applied coupons on pending subscription will be changed due to this param during update subscription,\n Invoice for the subscription will be reissued.\n",
            "writeOnly": true,
            "items": {
              "type": "string",
              "description": "Coupon ID"
            }
          },
          "poNumber": {
            "description": "Purchase order number, will be displayed on the issued invoices",
            "nullable": true,
            "example": "PO123456",
            "type": "string"
          },
          "revision": {
            "description": "The number of times the subscription data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
            "type": "integer",
            "readOnly": true
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                },
                {
                  "$ref": "#/components/schemas/InitialInvoiceLink"
                },
                {
                  "$ref": "#/components/schemas/RecentInvoiceLink"
                },
                {
                  "$ref": "#/components/schemas/WebsiteLink"
                }
              ]
            }
          },
          "_embedded": {
            "type": "array",
            "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RecentInvoiceEmbed"
                },
                {
                  "$ref": "#/components/schemas/InitialInvoiceEmbed"
                },
                {
                  "$ref": "#/components/schemas/CustomerEmbed"
                },
                {
                  "$ref": "#/components/schemas/WebsiteEmbed"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceEmbed"
                }
              ]
            }
          }
        }
      },
      "SubscriptionMetadata": {
        "type": "object",
        "properties": {
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "createdTime": {
            "description": "Subscription created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Subscription updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SelfLink"
                },
                {
                  "$ref": "#/components/schemas/CustomerLink"
                },
                {
                  "$ref": "#/components/schemas/WebsiteLink"
                },
                {
                  "$ref": "#/components/schemas/LeadSourceLink"
                }
              ]
            }
          }
        }
      },
      "one-time-order": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "properties": {
              "status": {
                "description": "One-time order status",
                "type": "string",
                "readOnly": true,
                "enum": ["pending", "completed", "abandoned"]
              }
            }
          },
          {
            "$ref": "#/components/schemas/SubscriptionMetadata"
          }
        ]
      },
      "UpcomingInvoiceItem": {
        "type": "object",
        "description": "Line item",
        "required": ["type", "unitPriceAmount", "unitPriceCurrency", "quantity"],
        "properties": {
          "type": {
            "description": "Type of line item",
            "type": "string",
            "enum": ["debit", "credit"]
          },
          "description": {
            "description": "Description of line item",
            "type": "string"
          },
          "unitPriceAmount": {
            "description": "Unit price of the line item",
            "type": "number",
            "format": "double",
            "example": 49.95
          },
          "unitPriceCurrency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "quantity": {
            "description": "Quantity of line item",
            "type": "integer",
            "example": 1
          },
          "periodStartTime": {
            "description": "Date-time when the period begins for this item",
            "type": "string",
            "format": "date-time"
          },
          "periodEndTime": {
            "description": "Date-time when the period ends for this item",
            "type": "string",
            "format": "date-time"
          },
          "createdTime": {
            "description": "Date-time when the item was added to the subscription",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          }
        }
      },
      "UpcomingInvoiceItemCollection": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UpcomingInvoiceItem"
        }
      },
      "SubscriptionCancellationState": {
        "type": "object",
        "properties": {
          "canceledTime": {
            "description": "Subscription canceled time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "canceledBy": {
            "description": "Canceled by",
            "type": "string",
            "readOnly": true,
            "enum": ["merchant", "customer", "rebilly"]
          },
          "cancelCategory": {
            "description": "Cancel category",
            "type": "string",
            "readOnly": true,
            "enum": [
              "billing-failure",
              "did-not-use",
              "did-not-want",
              "missing-features",
              "bugs-or-problems",
              "do-not-remember",
              "risk-warning",
              "contract-expired",
              "too-expensive",
              "never-started",
              "switched-plan",
              "other"
            ]
          },
          "cancelDescription": {
            "description": "Cancel reason description in free form",
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          }
        }
      },
      "subscription-order": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "properties": {
              "status": {
                "description": "The status of the subscription service. A subscription starts\nin the `pending` status, and will become `active` when the\nservice period begins.\n",
                "type": "string",
                "readOnly": true,
                "enum": ["pending", "active", "canceled", "churned", "suspended", "paused", "abandoned"]
              },
              "inTrial": {
                "description": "True if the subscription is currently in a trial period",
                "type": "boolean",
                "readOnly": true
              },
              "trial": {
                "type": "object",
                "description": "To use plan defaults do not send the `trial` key, or send a `null` value with it.",
                "required": ["endTime"],
                "properties": {
                  "enabled": {
                    "description": "Enable or disable the trial for this subscription. If enabled for plans without trial prices, the trial will be free.",
                    "type": "boolean"
                  },
                  "endTime": {
                    "description": "The time the trial should end",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "invoiceTimeShift": {
                "description": "You can shift issue time and due time of invoices for this subscription.\nThis setting overrides plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same billing period,\nthis property allows to subscribe to different plans.\n",
                "nullable": true,
                "example": null,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InvoiceTimeShift"
                  }
                ]
              },
              "recurringInterval": {
                "type": "object",
                "description": "The recurring interval to override plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same recurring period length,\nthis property allows to subscribe to different plans.\n",
                "nullable": true,
                "example": null,
                "properties": {
                  "periodAnchorInstruction": {
                    "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
                  }
                }
              },
              "autopay": {
                "description": "Autopay determines if a payment attempt will be automatic",
                "type": "boolean",
                "default": true
              },
              "startTime": {
                "description": "Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.",
                "nullable": true,
                "example": null,
                "type": "string",
                "format": "date-time"
              },
              "endTime": {
                "description": "Subscription end time",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServerTimestamp"
                  }
                ]
              },
              "renewalTime": {
                "description": "Subscription renewal time",
                "type": "string",
                "format": "date-time"
              },
              "rebillNumber": {
                "description": "The current period number",
                "type": "integer",
                "readOnly": true
              },
              "renewalReminderTime": {
                "description": "Time renewal reminder event will be triggered",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServerTimestamp"
                  }
                ]
              },
              "renewalReminderNumber": {
                "description": "Number of renewal reminder events triggered",
                "type": "integer",
                "readOnly": true
              },
              "trialReminderTime": {
                "description": "Time renewal reminder event will be triggered",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServerTimestamp"
                  }
                ]
              },
              "trialReminderNumber": {
                "description": "Number of renewal reminder events triggered",
                "type": "integer",
                "readOnly": true
              },
              "lineItems": {
                "description": "Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.",
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpcomingInvoiceItemCollection"
                  }
                ]
              },
              "lineItemSubtotal": {
                "type": "object",
                "readOnly": true,
                "description": "Subtotal of line items in this subscription (signed value). If credits exceed debits, it will be a negative number.",
                "properties": {
                  "currency": {
                    "$ref": "#/components/schemas/CurrencyCode"
                  },
                  "amount": {
                    "type": "number",
                    "format": "double",
                    "example": 49.95
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/SubscriptionMetadata"
          },
          {
            "$ref": "#/components/schemas/SubscriptionCancellationState"
          }
        ]
      },
      "Search": {
        "type": "object",
        "properties": {
          "customers": {
            "description": "List of returned customers",
            "readOnly": true,
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Customer"
                }
              ]
            }
          },
          "invoices": {
            "description": "List of returned invoices",
            "readOnly": true,
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Invoice"
                }
              ]
            }
          },
          "orders": {
            "description": "List of returned orders",
            "readOnly": true,
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Subscription"
                }
              ]
            }
          },
          "transactions": {
            "description": "List of returned transactions",
            "readOnly": true,
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Transaction"
                }
              ]
            }
          },
          "searched": {
            "description": "Names of searched resources, even if they returned nothing",
            "readOnly": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PriceBasedShippingRate": {
        "type": "object",
        "required": ["name", "currency", "price"],
        "properties": {
          "name": {
            "description": "The shipping rate name",
            "type": "string",
            "maxLength": 255
          },
          "minOrderSubtotal": {
            "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
            "type": "number",
            "format": "double",
            "default": 0
          },
          "maxOrderSubtotal": {
            "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
            "type": "number",
            "format": "double"
          },
          "price": {
            "description": "The shipping price - 0 is a valid value (for free)",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "ShippingZone": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "id": {
            "description": "The shipping zone identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "name": {
            "description": "The shipping zone name",
            "type": "string",
            "maxLength": 255
          },
          "countries": {
            "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
            "type": "array",
            "items": {
              "description": "Country ISO Alpha-2 code",
              "type": "string",
              "pattern": "^[A-Z]{2}$"
            }
          },
          "rates": {
            "description": "Price-based shipping rate instructions",
            "type": "array",
            "items": {
              "description": "Price based shipping rate instruction",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PriceBasedShippingRate"
                }
              ]
            }
          },
          "isDefault": {
            "description": "Is this Shipping Zone default",
            "readOnly": true
          },
          "createdTime": {
            "description": "The shipping zone created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "The shipping zone updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "SubscriptionCancellation": {
        "type": "object",
        "required": ["subscriptionId", "churnTime"],
        "properties": {
          "id": {
            "description": "Cancellation identifier",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "subscriptionId": {
            "description": "Identifier of the canceled subscription",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "proratedInvoiceId": {
            "description": "Identifier of the invoice on which the cancellation proration is calculated.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "appliedInvoiceId": {
            "description": "The identifier of the invoice where the cancellation fees or credits are applied.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "canceledBy": {
            "description": "Who did the cancellation",
            "type": "string",
            "default": "customer",
            "enum": ["merchant", "customer"]
          },
          "reason": {
            "description": "Cancellation reason",
            "type": "string",
            "default": "other",
            "enum": [
              "did-not-use",
              "did-not-want",
              "missing-features",
              "bugs-or-problems",
              "do-not-remember",
              "risk-warning",
              "contract-expired",
              "too-expensive",
              "other",
              "billing-failure"
            ]
          },
          "description": {
            "description": "Cancel reason description in free form",
            "type": "string",
            "maxLength": 255
          },
          "prorated": {
            "description": "Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and\nsubscription's next renewal time.\n",
            "type": "boolean",
            "default": false
          },
          "status": {
            "description": "\"draft\" defines that the cancellation isn't applied on an invoice and subscription but\ncan be inspected to see the charge.\n\"confirmed\" will set a subscription to be canceled when the `churnTime` is reached.\n\"completed\" is a read-only status which is set by the system when the churnTime is reached.\nThe cancellation may not be changed or deleted when the status is \"completed\".\n",
            "type": "string",
            "default": "confirmed",
            "enum": ["draft", "confirmed", "completed", "revoked"]
          },
          "canceledTime": {
            "description": "The cancellation time (when the status is confirmed which is by default unless specified \"draft\").",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "createdTime": {
            "description": "The time of resource creation (when it is posted).",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "churnTime": {
            "description": "The time when the subscription will be deactivated.",
            "type": "string",
            "format": "date-time"
          },
          "lineItems": {
            "description": "Items to be added to the new invoice. Proration item is generated and added automatically.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpcomingInvoiceItemCollection"
              }
            ]
          },
          "lineItemSubtotal": {
            "description": "Subtotal of the line items which will be added after the subscription's cancellation",
            "readOnly": true,
            "type": "number",
            "example": 49.95
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "SubscriptionReactivation": {
        "type": "object",
        "required": ["subscriptionId"],
        "properties": {
          "id": {
            "description": "Reactivation identifier",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "subscriptionId": {
            "description": "Identifier of the reactivated subscription",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "cancellationId": {
            "description": "Identifier of the related cancellation",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "description": {
            "description": "Reactivation reason description in free form",
            "type": "string",
            "maxLength": 255
          },
          "effectiveTime": {
            "description": "The date from which the service period would start, unless the subscription is canceled but still active.\nIn case the susbcription is still active, the subscription will continue the current service period.\nIf omitted, it will default to the current time.\n",
            "type": "string",
            "format": "date-time"
          },
          "renewalTime": {
            "description": "The time of the next subscription renewal. If omitted then it is computed from the effective time.\nIf the subscription is canceled but active it is ignored, so the next renewal will happen as scheduled.\n",
            "type": "string",
            "format": "date-time"
          },
          "createdTime": {
            "description": "The time of resource creation (when it is posted).",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "SubscriptionChange": {
        "type": "object",
        "required": ["planId", "renewalPolicy", "prorated"],
        "properties": {
          "planId": {
            "description": "The plan identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "quantity": {
            "description": "Number of units of the product on the given plan. If null or omitted, current quantity will not be changed.",
            "type": "integer"
          },
          "renewalPolicy": {
            "description": "The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.",
            "type": "string",
            "enum": ["reset", "retain"]
          },
          "prorated": {
            "description": "Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period.\nIn addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well,\nfor the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size.\n",
            "type": "boolean"
          },
          "effectiveTime": {
            "description": "The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.",
            "type": "string",
            "format": "date-time"
          },
          "preview": {
            "description": "If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "SubscriptionInvoice": {
        "type": "object",
        "properties": {
          "transactionId": {
            "description": "If present, applies a payment to the invoice created.  If the payment is for the invoice total, it would be marked as paid.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          }
        }
      },
      "OrderTimeline": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The Timeline message identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Timeline message type",
            "type": "string",
            "readOnly": true,
            "enum": [
              "timeline-comment-created",
              "order-renewed",
              "order-activated",
              "order-completed",
              "order-reactivated",
              "order-canceled",
              "order-upgraded",
              "order-downgraded",
              "order-billing-address-changed",
              "order-delivery-address-changed",
              "order-renewal-time-changed",
              "order-churned",
              "order-custom-fields-changed",
              "order-items-changed",
              "order-billing-anchor-changed",
              "order-recurring-interval-changed",
              "order-risk-metadata-changed",
              "order-paid-early",
              "order-quantity-changed",
              "email-message-sent",
              "coupon-applied",
              "invoice-created",
              "invoice-issued",
              "invoice-abandoned",
              "invoice-voided",
              "invoice-past-due",
              "invoice-paid",
              "invoice-partially-paid",
              "invoice-disputed",
              "invoice-refunded",
              "invoice-partially-refunded",
              "invoice-renewal-payment-declined"
            ]
          },
          "triggeredBy": {
            "description": "Shows who or what triggered the Timeline message",
            "type": "string",
            "readOnly": true,
            "enum": ["rebilly", "app", "direct-api"]
          },
          "message": {
            "description": "The message that describes the message details",
            "type": "string"
          },
          "extraData": {
            "$ref": "#/components/schemas/TimelineExtraData"
          },
          "occurredTime": {
            "description": "Timeline message time",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "TokenMethod": {
        "type": "string",
        "description": "The token payment method",
        "enum": [
          "cash",
          "check",
          "paypal",
          "Alipay",
          "AstroPay Card",
          "bank-transfer",
          "bitcoin",
          "Boleto",
          "cash-deposit",
          "CASHlib",
          "CashToCode",
          "China UnionPay",
          "domestic-cards",
          "echeck",
          "ecoPayz",
          "ecoVoucher",
          "EPS",
          "ePay.bg",
          "Flexepin",
          "Giropay",
          "Gpaysafe",
          "iDebit",
          "iDEAL",
          "INOVAPAY-pin",
          "INOVAPAY-wallet",
          "InstaDebit",
          "instant-bank-transfer",
          "Interac-online",
          "Interac-eTransfer",
          "invoice",
          "Jeton",
          "Klarna",
          "miscellaneous",
          "Neteller",
          "Nordea-Solo",
          "OchaPay",
          "online-bank-transfer",
          "Onlineueberweisen",
          "Paysafecard",
          "Pay4Fun",
          "PinPay",
          "phone",
          "POLi",
          "Przelewy24",
          "QQPay",
          "Resurs",
          "SEPA",
          "Skrill",
          "Skrill Rapid Transfer",
          "SMSVoucher",
          "SparkPay",
          "Trustly",
          "UPayCard",
          "voucher",
          "WeChat Pay"
        ]
      },
      "PaymentToken": {
        "type": "object",
        "title": "Payment Token",
        "required": ["method", "billingAddress"],
        "properties": {
          "id": {
            "description": "The token identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "isUsed": {
            "description": "Whether the token was already used",
            "type": "boolean",
            "default": false,
            "readOnly": true
          },
          "method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenMethod"
              }
            ]
          },
          "fingerprint": {
            "description": "Device fingerprint hash",
            "type": "string"
          },
          "billingAddress": {
            "description": "The billing address object",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "leadSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeadSource"
              }
            ],
            "writeOnly": true
          },
          "createdTime": {
            "description": "Token created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Token updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "usageTime": {
            "description": "Token usage time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expirationTime": {
            "description": "Token expiration time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "TokenPaymentCardInstrument": {
        "type": "object",
        "description": "Payment Token instrument object",
        "required": ["pan", "billingAddress", "expMonth", "expYear"],
        "properties": {
          "pan": {
            "description": "Payment Card PAN (Primary Account Number)",
            "type": "string",
            "writeOnly": true
          },
          "bin": {
            "description": "Payment Card BIN (the PAN's first 6 digits)",
            "type": "string",
            "format": "bin",
            "readOnly": true
          },
          "last4": {
            "description": "Payment Card PAN's last 4 digits",
            "type": "string",
            "readOnly": true
          },
          "brand": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/payment-card-brands"
              }
            ]
          },
          "expMonth": {
            "description": "Payment Card expiry month",
            "type": "integer"
          },
          "expYear": {
            "description": "Payment Card expiry year",
            "type": "integer"
          },
          "cvv": {
            "description": "Payment Card CVV/CVC",
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PaymentCardToken": {
        "type": "object",
        "title": "Payment Card Token",
        "required": ["method", "paymentInstrument", "billingAddress"],
        "properties": {
          "id": {
            "description": "The token identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "isUsed": {
            "description": "Whether the token was already used",
            "type": "boolean",
            "default": false,
            "readOnly": true
          },
          "method": {
            "description": "The token payment method",
            "type": "string",
            "enum": ["payment-card"]
          },
          "paymentInstrument": {
            "description": "The payment instrument details",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenPaymentCardInstrument"
              }
            ]
          },
          "fingerprint": {
            "description": "Device fingerprint hash",
            "type": "string"
          },
          "billingAddress": {
            "description": "The billing address object",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "leadSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeadSource"
              }
            ],
            "writeOnly": true
          },
          "createdTime": {
            "description": "Token created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Token updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "usageTime": {
            "description": "Token usage time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expirationTime": {
            "description": "Token expiration time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "TokenBankAccountInstrument": {
        "type": "object",
        "required": ["accountNumberType"],
        "discriminator": {
          "propertyName": "accountNumberType",
          "mapping": {
            "BBAN": "#/components/schemas/BBANInstrument",
            "IBAN": "#/components/schemas/IBANInstrument"
          }
        },
        "properties": {
          "accountNumberType": {
            "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
            "type": "string",
            "default": "BBAN",
            "enum": ["IBAN", "BBAN"]
          }
        }
      },
      "BBANInstrument": {
        "description": "Payment Token instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenBankAccountInstrument"
          },
          {
            "type": "object",
            "required": ["accountNumber", "routingNumber", "accountType"],
            "properties": {
              "accountNumber": {
                "description": "Bank Account Number",
                "type": "string",
                "pattern": "^[0-9]+$",
                "writeOnly": true
              },
              "routingNumber": {
                "description": "Bank Routing Number",
                "type": "string",
                "pattern": "^[0-9]+$"
              },
              "accountType": {
                "description": "Bank Account Type",
                "type": "string",
                "enum": ["checking", "savings", "other"]
              },
              "bic": {
                "description": "Bank Identifier Code",
                "type": "string"
              },
              "bankName": {
                "description": "Bank name",
                "type": "string"
              },
              "last4": {
                "description": "Bank Account Number's last 4 digits",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ]
      },
      "IBANInstrument": {
        "description": "Payment Token instrument object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenBankAccountInstrument"
          },
          {
            "type": "object",
            "required": ["accountNumber"],
            "properties": {
              "accountNumber": {
                "description": "Bank Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available\nin [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
                "type": "string",
                "writeOnly": true
              },
              "bic": {
                "description": "Bank Identifier Code",
                "type": "string"
              },
              "bankName": {
                "description": "Bank name",
                "type": "string"
              },
              "last4": {
                "description": "Bank Account Number's last 4 digits",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ]
      },
      "BankAccountToken": {
        "type": "object",
        "title": "Bank Account Token",
        "required": ["method", "paymentInstrument", "billingAddress"],
        "properties": {
          "id": {
            "description": "The token identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "isUsed": {
            "description": "Whether the token was already used",
            "type": "boolean",
            "default": false,
            "readOnly": true
          },
          "method": {
            "description": "The token payment method",
            "type": "string",
            "enum": ["ach"]
          },
          "paymentInstrument": {
            "description": "The payment instrument details",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenBankAccountInstrument"
              }
            ]
          },
          "fingerprint": {
            "description": "Device fingerprint hash",
            "type": "string"
          },
          "billingAddress": {
            "description": "The billing address object",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "leadSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeadSource"
              }
            ],
            "writeOnly": true
          },
          "createdTime": {
            "description": "Token created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "updatedTime": {
            "description": "Token updated time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "usageTime": {
            "description": "Token usage time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "expirationTime": {
            "description": "Token expiration time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      },
      "TransactionRequest": {
        "type": "object",
        "required": ["websiteId", "customerId", "currency", "amount", "type"],
        "properties": {
          "id": {
            "description": "The payment identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "websiteId": {
            "description": "The website identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "customerId": {
            "description": "The customer identifier string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              }
            ]
          },
          "type": {
            "description": "The type of transaction requested.\nYou should always include the type within your API request.\nThis supports a limited subset of Transaction types.  To refund or void, use the refund endpoint.\nTo `capture` use the `sale` endpoint.  It will capture if there are any eligible\ntransactions of type `authorize` that can be captured.\n",
            "type": "string",
            "enum": ["sale", "authorize", "credit"]
          },
          "amount": {
            "description": "The transaction amount.  Use `0` for a zero dollar verification. This is important if\nyou want to authorize a payment instrument before giving access to a free trial, for example.\n",
            "type": "number",
            "format": "double",
            "example": 97.97
          },
          "invoiceIds": {
            "description": "The array of invoice identifiers.  It's important to note that the transaction\namount can be more or less than the combined invoice amounts.  If the transaction\nis a type `sale` and it is `approved` it will be applied to these invoices in\nthe order of the first issued invoice to the most recently issued invoice.  If\nthere are enough funds to fully pay an invoice, the invoice status will be marked\nas paid.\n",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            }
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrument"
          },
          "billingAddress": {
            "description": "Billing Address. If not supplied, we use the billing address associated with the payment instrument, and then customer.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactObject"
              }
            ]
          },
          "requestId": {
            "description": "The request id is **recommended**. It prevents duplicate transaction requests within a short period of time. If a duplicate request is sent with the same `requestId` it will be ignored to prevent double-billing anyone.  It must be unique within a 24-hour period.  We recommend generating a UUID v4 as its value.",
            "type": "string",
            "nullable": true,
            "maxLength": 50,
            "pattern": "^[\\-\\w]+$",
            "example": "44433322-2c4y-483z-a0a9-158621f77a21"
          },
          "description": {
            "nullable": true,
            "description": "The payment description",
            "type": "string",
            "maxLength": 255
          },
          "notificationUrl": {
            "nullable": true,
            "description": "The URL where a server-to-server notification request type `POST` with a transaction payload will be sent\nwhen the transaction's result is finalized. Do not trust the notification;\nfollow with a `GET` request to confirm the result of the transaction.  Please respond with a `2xx`\nHTTP status code, or we will reattempt the request again.\n",
            "type": "string",
            "format": "uri"
          },
          "redirectUrl": {
            "nullable": true,
            "description": "The URL to redirect the end-user when an offsite transaction is completed.  Defaults to the website's configured URL.",
            "type": "string",
            "format": "uri"
          },
          "customFields": {
            "$ref": "#/components/schemas/ResourceCustomFields"
          },
          "isProcessedOutside": {
            "description": "True if transaction was processed outside Rebilly",
            "type": "boolean",
            "default": false
          },
          "processedTime": {
            "type": "string",
            "description": "The time the transaction was processed. Can be specified only if transaction was processed outside Rebilly.",
            "format": "date-time"
          }
        }
      },
      "TransactionGatewayLog": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "headers": {
            "description": "The request headers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "description": "The request URL",
            "type": "string"
          },
          "request": {
            "description": "The request body",
            "type": "string"
          },
          "response": {
            "description": "The response body",
            "type": "string"
          },
          "duration": {
            "description": "The request time, msec",
            "type": "integer"
          },
          "createdTime": {
            "description": "The log entry created time",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/TransactionLink"
            }
          }
        }
      },
      "TransactionRefund": {
        "type": "object",
        "required": ["amount"],
        "properties": {
          "amount": {
            "description": "Refund amount",
            "type": "number",
            "format": "double"
          }
        }
      },
      "TransactionTimeline": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The Timeline message identifier string",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "type": {
            "description": "Timeline message type",
            "type": "string",
            "readOnly": true,
            "enum": [
              "timeline-comment-created",
              "transaction-approved",
              "transaction-canceled",
              "transaction-declined",
              "transaction-abandoned",
              "transaction-refunded",
              "transaction-voided",
              "transaction-discrepancy-found",
              "transaction-amount-discrepancy-found",
              "transaction-reconciled",
              "transaction-initiated",
              "transaction-retried",
              "risk-score-changed",
              "transaction-timeout-resolved",
              "dispute-created",
              "dispute-won",
              "dispute-lost",
              "dispute-responded",
              "dispute-forfeited",
              "dispute-changed",
              "gateway-response-received",
              "transaction-scheduled-time-changed",
              "transaction-rules-processed",
              "transaction-capture-delayed",
              "transaction-captured",
              "transaction-waiting-gateway"
            ]
          },
          "triggeredBy": {
            "description": "Shows who or what triggered the Timeline message",
            "type": "string",
            "readOnly": true,
            "enum": ["rebilly", "app", "direct-api"]
          },
          "message": {
            "description": "The message that describes the message details",
            "type": "string"
          },
          "extraData": {
            "$ref": "#/components/schemas/TimelineExtraData"
          },
          "occurredTime": {
            "description": "Timeline message time",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ]
          },
          "_links": {
            "type": "array",
            "description": "The links related to resource",
            "readOnly": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SelfLink"
            }
          }
        }
      }
    },
    "parameters": {
      "organizationId": {
        "name": "Organization-Id",
        "in": "header",
        "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
        "schema": {
          "$ref": "#/components/schemas/ResourceId"
        },
        "required": false
      },
      "collectionLimit": {
        "name": "limit",
        "in": "query",
        "description": "The collection items limit",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1000
        }
      },
      "collectionOffset": {
        "name": "offset",
        "in": "query",
        "description": "The collection items offset",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "resourceId": {
        "name": "id",
        "in": "path",
        "description": "The resource identifier string",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 50,
          "pattern": "^[@~\\-\\.\\w]+$"
        }
      },
      "collectionFilter": {
        "name": "filter",
        "in": "query",
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
        "schema": {
          "type": "string"
        }
      },
      "collectionQuery": {
        "name": "q",
        "in": "query",
        "description": "The partial search of the text fields.",
        "schema": {
          "type": "string"
        }
      },
      "collectionExpand": {
        "name": "expand",
        "in": "query",
        "description": "Expand a response to get a full related object included inside \nof the `_embedded` path in the response. \n\nIt accepts a comma-separated list of objects to expand.\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
        "schema": {
          "type": "string"
        }
      },
      "collectionFields": {
        "name": "fields",
        "in": "query",
        "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned.",
        "schema": {
          "type": "string"
        }
      },
      "collectionSort": {
        "name": "sort",
        "in": "query",
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "customFieldResource": {
        "name": "resource",
        "in": "path",
        "description": "The resource type string",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "transactions",
            "websites",
            "contacts",
            "products",
            "plans"
          ]
        }
      },
      "subscriptionExpand": {
        "name": "expand",
        "in": "query",
        "description": "Expand a response to get a full related object included inside \nof the `_embedded` path in the response. \n\nTo expand multiple objects, it accepts a comma-separated \nlist of objects (example: `expand=recentInvoice,initialInvoice`).\n\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
        "schema": {
          "type": "string"
        }
      },
      "tag": {
        "name": "tag",
        "in": "path",
        "description": "The tag name",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[@~\\-\\.\\w\\s]+$"
        }
      },
      "customerId": {
        "name": "customerId",
        "in": "path",
        "description": "The customer identifier string",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 50,
          "pattern": "^[@~\\-\\.\\w]+$"
        }
      }
    },
    "headers": {
      "Rate-Limit-Limit": {
        "description": "The number of allowed requests in the current period",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Remaining": {
        "description": "The number of remaining requests in the current period",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Reset": {
        "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
        "schema": {
          "type": "string"
        }
      },
      "Pagination-Total": {
        "description": "Total items count",
        "schema": {
          "type": "integer"
        }
      },
      "Pagination-Limit": {
        "description": "Items per page limit",
        "schema": {
          "type": "integer"
        }
      },
      "Pagination-Offset": {
        "description": "Pagination offset",
        "schema": {
          "type": "integer"
        }
      }
    },
    "responses": {
      "AccessForbidden": {
        "description": "Access forbidden, invalid API-KEY was used",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidDataError": {
        "description": "Invalid data was sent",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InvalidError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Customer": {
        "description": "Customer",
        "headers": {
          "Rate-Limit-Limit": {
            "$ref": "#/components/headers/Rate-Limit-Limit"
          },
          "Rate-Limit-Remaining": {
            "$ref": "#/components/headers/Rate-Limit-Remaining"
          },
          "Rate-Limit-Reset": {
            "$ref": "#/components/headers/Rate-Limit-Reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "Found": {
        "description": "Resource was moved",
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "requestBodies": {
      "Attachment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        },
        "description": "Attachment resource",
        "required": true
      },
      "Blacklist": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Blacklist"
            }
          }
        },
        "description": "Blacklist resource",
        "required": true
      },
      "Contact": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Contact"
            }
          }
        },
        "description": "Contact resource",
        "required": true
      },
      "Coupon": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Coupon"
            }
          }
        },
        "description": "Coupon resource",
        "required": true
      },
      "Credential": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Credential"
            }
          }
        },
        "description": "Credential resource",
        "required": true
      },
      "Customer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        },
        "description": "Customer resource",
        "required": true
      },
      "Dispute": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Dispute"
            }
          }
        },
        "description": "Dispute resource",
        "required": true
      },
      "Invoice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        },
        "description": "Invoice resource",
        "required": true
      },
      "Payment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        },
        "description": "Payment resource",
        "required": true
      },
      "Plan": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Plan"
            }
          }
        },
        "description": "Plan resource",
        "required": true
      },
      "Product": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "description": "Product resource",
        "required": true
      },
      "SubscriptionCancellation": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubscriptionCancellation"
            }
          }
        },
        "description": "Cancellation resource",
        "required": true
      },
      "Subscription": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        },
        "description": "Subscription resource",
        "required": true
      },
      "Tag": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "description": "Tag resource",
        "required": true
      },
      "TransactionRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransactionRequest"
            }
          }
        },
        "description": "Payment resource",
        "required": true
      }
    }
  }
}
